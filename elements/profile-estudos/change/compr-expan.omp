; OM File Header - Saved 2015/02/22 1:26:11
; (6.04 :patc (om-make-point 95 79) (om-make-point 50 50) (om-make-point 705 604) "No documentation " 183 0 nil "2015/02/22 1:26:11")
; End File Header
(in-package :om)(load-lib-for (quote ("profile")))(setf *om-current-persistent* (om-load-patch1 "compr-expan" (quote ((om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 133 330) (om-make-point 52 28) (list 0 250) "(0 250)" nil) (om-load-editor-box1 "xxCHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 55 363) (om-make-point 157 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6700) (6500) (5300) (6200) (5700) (5900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 417 322) (om-make-point 52 28) (list 0 100) "(0 100)" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 338 277) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote nil) (om-make-point 385 204) nil nil nil (list (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 195 211) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 220 402) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 241 68) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 216 68) (om-make-point 20 28) 4 "4" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 170 68) (om-make-point 25 28) -4 "-4" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 188 102) nil nil nil nil 1) (om-load-editor-box1 "xxxxCHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 284 201) (om-make-point 91 96) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6500 6400 5500 6200 5700 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "xxCOMPR/EXPAN1" (quote |Profile|::compr/expan) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 6000 7200 6600)) (om-load-inputfun (quote input-funbox) "number" "VALUE" 2) (om-load-inputfun (quote input-funbox) "number" "NOTE?" nil))) (om-make-point 191 331) (om-make-point 116 61) nil nil "compr/expan" 1) (om-load-editor-box1 "xxCHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 77 200) (om-make-point 101 98) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6500 6400 5500 6200 5700 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "xxaux2" (quote t) (quote nil) (om-make-point 18 136) (om-make-point 123 50) (list 6000 6500 6400 5500 6200 5700 5900) "(6000 6500 6400 5500 6200 5700 5900)" nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 301 462) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 154 466) nil nil nil 0)) (quote ((5 0 0 0 nil 0) (7 0 1 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (8 1 7 0 nil 0) (0 0 7 1 nil 0) (6 1 7 2 nil 0) (9 0 8 1 nil 0) (1 1 10 0 nil 0) (1 0 11 0 nil 0))) 1 "omloop" nil) (om-load-editor-box1 "xxCHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 240 91) (om-make-point 84 95) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6500 6400 5500 6200 5700 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 310 361) (om-make-point 337 126) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (4000) (4300) (7900) (5200) (7200) (6400) (6000) (4500) (4800) (7400) (5300) (6900) (6200) (6000) (5000) (5200) (6900) (5500) (6500) (6200) (6000) (5500) (5500) (6500) (5700) (6200) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6500) (6400) (5500) (6200) (5700) (5900) (6000) (6900) (6700) (5000) (6400) (5300) (5700) (6000) (7400) (7200) (4500) (6500) (5000) (5700) (6000) (7900) (7600) (4000) (6700) (4800) (5500))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 179 158) (om-make-point 30 28) 1.3 "1.3" nil) (om-load-boxcall (quote genfun) "COMPR/EXPAN1" (quote |Profile|::compr/expan) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 6000 7200 6600)) (om-load-inputfun (quote input-funbox) "number" "VALUE" 2) (om-load-inputfun (quote input-funbox) "number" "NOTE?" nil))) (om-make-point 140 204) (om-make-point 116 61) nil nil "compr/expan" 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 57 21) (om-make-point 216 28) (list 6000 6500 6400 5500 6200 5700 5900) "(6000 6500 6400 5500 6200 5700 5900)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 66 59) (om-make-point 90 96) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6500 6400 5500 6200 5700 5900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil))) thechord) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote t))) t nil nil nil))) (quote ((8 0 1 1 nil 0) (0 0 1 2 nil 0) (4 0 3 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0) (10 1 8 0 nil 0) (7 0 8 1 nil 0) (5 1 8 2 nil 0) (9 0 10 1 nil 0))) nil 6.04))
