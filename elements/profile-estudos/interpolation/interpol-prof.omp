; OM File Header - Saved 2015/02/22 1:26:11
; (6.04 :patc (om-make-point 127 57) (om-make-point 50 50) (om-make-point 849 668) "No documentation " 183 0 nil "2015/02/22 1:26:11")
; End File Header
(in-package :om)(load-lib-for (quote ("profile")))(setf *om-current-persistent* (om-load-patch1 "interpol-prof" (quote ((om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 337 90) (om-make-point 426 115) (list (list 6200 6400 6500 6700 6900 7000 6100) (list 6200 6400 6500 6700 6900 7000 6100) (list 6200 6400 6500 6700 6900 7000 6100) (list 6500 6900 7200 7700 7600 7400 7200 7400 7200 7000 6900 6700 6500) (list 6500 6900 7200 7700 7600 7400 7200 7400 7200 7000 6900 6700 6500) (list 6500 6900 7200 7700 7600 7400 7200 7400 7200 7000 6900 6700 6500) (list 6000 6200 6400 6500 6700 6900 7100) (list 6000 6200 6400 6500 6700 6900 7100) (list 6000 6200 6400 6500 6700 6900 7100) (list 6000 6200 6400 6500 6700 6900 7100)) "((6200 6400 6500 6700 6900 7000 6100) (6200 6400 6500 6700 6900 7000 6100) (6200 6400 6500 6700 6900 7000 6100) (6500 6900 7200 7700 7600 7400 7200 7400 7200 7000 6900 6700 6500) (6500 6900 7200 7700 7600 7400 7200 7400 7200 7000 6900 6700 6500) (6500 6900 7200 7700 7600 7400 7200 7400 7200 7000 6900 6700 6500) (6000 6200 6400 6500 6700 6900 7100) (6000 6200 6400 6500 6700 6900 7100) (6000 6200 6400 6500 6700 6900 7100) (6000 6200 6400 6500 6700 6900 7100))" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 647 383) (om-make-point 32 28) 200 "200" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 299 384) (om-make-point 52 28) (list 0 100) "(0 100)" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 225 354) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 93 415) (om-make-point 642 173) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (5200) (5300) (5500) (5700) (5800) (4900) (5800) (5700) (5500) (5300) (5200) (5300) (4900) (5200) (5300) (5500) (5500) (5800) (5800) (5000) (5800) (5800) (5500) (5500) (5300) (5200) (5200) (4900) (5000) (5200) (5500) (5500) (5800) (6100) (5700) (5700) (6100) (5800) (5500) (5500) (5200) (5200) (5000) (4600) (5000) (5200) (5300) (5700) (5800) (6100) (6200) (6100) (6100) (6200) (6100) (5800) (5700) (5300) (5200) (5000) (4900) (4100) (4800) (5200) (5300) (5800) (5800) (6400) (6700) (6700) (7000) (7000) (6700) (6700) (6400) (5800) (5800) (5300) (5200) (4800) (4300) (3800) (4600) (5200) (5200) (5800) (6000) (6500) (7000) (6900) (7600) (7900) (7400) (6900) (7000) (6500) (6000) (5800) (5200) (5200) (4600) (4000) (3800) (4600) (5000) (4800) (5700) (6200) (6000) (6700) (7200) (7200) (7900) (8200) (7900) (7200) (7200) (6700) (6000) (6200) (5700) (4800) (5000) (4600) (3800) (3600) (4500) (5000) (4800) (5500) (6200) (6000) (6700) (7200) (7200) (7700) (8300) (8300) (7700) (7200) (7200) (6700) (6000) (6200) (5500) (4800) (5000) (4500) (3600) (3600) (4300) (5000) (5000) (5300) (6000) (6200) (6200) (6900) (7400) (7200) (7900) (8400) (8400) (7900) (7200) (7400) (6900) (6200) (6200) (6000) (5300) (5000) (5000) (4300) (3600) (3600) (4300) (4800) (5200) (4800) (5500) (6000) (6400) (6000) (6700) (7200) (7600) (7200) (7900) (8400) (8800) (8400) (7900) (7200) (7600) (7200) (6700) (6000) (6400) (6000) (5500) (4800) (5200) (4800) (4300) (3600))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 200)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport approx fontsize staff cmnpref deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 260 145) (om-make-point 61 78) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 16 34 44 50 54 59 63 68 72 82 93 105 122 140 176)) (quote (0 6 15 20 26 32 43 53 62 70 78 85 90 95 98 98)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 388 256) (om-make-point 20 28) 2 "2" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 339 252) (om-make-point 26 28) 5 "5" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 193 254) (om-make-point 26 28) 10 "10" nil) (om-load-boxcall (quote genfun) "INTERPOL-PROF" (quote |Profile|::interpol-prof) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PROF1" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "no documentation" "PROF2" 2) (om-load-inputfun (quote input-funbox) "no documentation" "STEPS" 2) (om-load-inputfun (quote input-funbox) "no documentation" "NBR-N" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TAB" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NOTE?" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PRECIS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "APPROX" nil))) (om-make-point 53 288) (om-make-point 370 61) nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 145 100) (om-make-point 100 120) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 4300 4800 5200 4800 5500 6000 6400 6000 6700 7200 7600 7200 7900 8400 8800 8400 7900 7200 7600 7200 6700 6000 6400 6000 5500 4800 5200 4800 4300 3600)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport cmnpref staff fontsize approx deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 (om-make-point 0 0) 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 180 16) (om-make-point 223 72) (list 3600 4300 4800 5200 4800 5500 6000 6400 6000 6700 7200 7600 7200 7900 8400 8800 8400 7900 7200 7600 7200 6700 6000 6400 6000 5500 4800 5200 4800 4300 3600) "(3600 4300 4800 5200 4800 5500 6000 6400 6000 6700 7200 7600 7200 7900 8400 8800 8400 7900 7200 7600 7200 6700 6000 6400 6000 5500 4800 5200 4800 4300 3600)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 38 37) (om-make-point 138 54) (list 5000 5200 5300 5500 5700 5800 4900 5800 5700 5500 5300 5200 5300) "(5000 5200 5300 5500 5700 5800 4900 5800 5700 5500 5300 5200 5300)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 33 91) (om-make-point 93 139) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5200 5300 5500 5700 5800 4900 5800 5700 5500 5300 5200 5300)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport cmnpref staff fontsize approx deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 (om-make-point 0 0) 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) (quote t))) t nil nil nil))) (quote ((9 0 3 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (1 0 4 7 nil 0) (13 1 9 0 nil 0) (10 1 9 1 nil 0) (8 0 9 2 nil 0) (5 0 9 4 nil 0) (0 0 9 5 nil 0) (7 0 9 6 nil 0) (6 0 9 7 nil 0) (11 0 10 1 nil 0) (12 0 13 1 nil 0))) nil 6.04))
