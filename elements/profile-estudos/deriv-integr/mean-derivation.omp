; OM File Header - Saved 2015/02/22 1:26:11
; (6.04 :patc (om-make-point 153 22) (om-make-point 50 50) (om-make-point 640 533) "No documentation " 183 0 nil "2015/02/22 1:26:11")
; End File Header
(in-package :om)(load-lib-for (quote ("profile")))(setf *om-current-persistent* (om-load-patch1 "mean-derivation" (quote ((om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 233 153) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote genfun) "MEAN-DERIVATION" (quote |Profile|::mean-derivation) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 6000 6600 7100)) (om-load-inputfun (quote input-funbox) "number" "GR¡" 1) (om-load-inputfun (quote input-funbox) "number" "NOTE?" nil))) (om-make-point 201 184) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 388 414) nil nil nil nil 1) (om-load-editor-box1 "xxBPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 471 400) (om-make-point 90 81) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440)) (quote (6800 7100 6900 5700 4800 5700 6800 7100 6900 5700 4800 5700 6800 7100 6900 5700 4800 5700 6800 7100 6900 5600 4500 5700 6900 7200 7100 5600 4500 5700 6900 7200 7100 5600 4500 5700 6900 7200 7100 5600 4500 5700 6900 7200 7100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport palette-mode obj-mode)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 0 0)) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 25 231) (om-make-point 90 81) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450)) (quote (6400 7200 7100 6900 4500 5200 6400 7200 7100 6900 4500 5200 6400 7200 7100 6900 4500 5200 6400 7200 6900 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7100 7200)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport palette-mode obj-mode)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 0 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 275 266) (om-make-point 52 28) (list 0 100) "(0 100)" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 230 10) (om-make-point 120 41) (list 6000 6200 6400 6500 6800 6900 7100) "(6000 6200 6400 6500 6800 6900 7100)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 262 55) (om-make-point 89 96) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6400 6500 6800 6900 7100)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom cmnpref staff fontsize approx deltapict outport inport palette-mode obj-mode)) (list nil nil (quote t) 2621450 18350450 0 1000 nil 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (om-make-point 0 0) 0 0 0 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 47 32) (om-make-point 122 40) (list 6400 7200 7100 6900 4500 5200 6400 7200 7100 6900 4500 5200 6400 7200 7100 6900 4500 5200 6400 7200 6900 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7100 7200) "(6400 7200 7100 6900 4500 5200 6400 7200 7100 6900 4500 5200 6400 7200 7100 6900 4500 5200 6400 7200 6900 7100$ 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400$ 7100 7200)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 44 76) (om-make-point 95 106) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 7200 7100 6900 4500 5200 6400 7200 7100 6900 4500 5200 6400 7200 7100 6900 4500 5200 6400 7200 6900 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7200 7100 4000 5200 6400 7400 7100 7200)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom cmnpref staff fontsize approx deltapict outport inport palette-mode obj-mode)) (list nil nil (quote t) 2621450 18350450 0 1000 nil 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (om-make-point 0 0) 0 0 0 0)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 204 302) (om-make-point 195 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7100) (6900) (5700) (4800) (5700) (6800) (7100) (6900) (5700) (4800) (5700) (6800) (7100) (6900) (5700) (4800) (5700) (6800) (7100) (6900) (5600) (4500) (5700) (6900) (7200) (7100) (5600) (4500) (5700) (6900) (7200) (7100) (5600) (4500) (5700) (6900) (7200) (7100) (5600) (4500) (5700) (6900) (7200) (7100))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom cmnpref staff fontsize approx deltapict outport inport palette-mode obj-mode)) (list nil nil (quote t) 2621450 18350450 0 1000 nil 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (om-make-point 0 0) 0 0 0 0)) t nil nil nil))) (quote ((9 1 1 0 nil 0) (0 0 1 1 nil 0) (7 1 1 2 nil 0) (10 1 2 0 nil 0) (2 0 3 2 nil 0) (9 1 4 2 nil 0) (6 0 7 1 nil 0) (8 0 9 1 nil 0) (1 0 10 1 nil 0) (5 0 10 2 nil 0))) nil 6.04))
