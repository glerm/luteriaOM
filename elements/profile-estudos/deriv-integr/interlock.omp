; OM File Header - Saved 2015/02/22 1:26:11
; (6.0301 :patc (om-make-point 248 23) (om-make-point 50 50) (om-make-point 721 666) "No documentation " 183 0 nil "2015/02/22 1:26:11")
; End File Header
(in-package :om)(load-lib-for (quote ("Profile")))(setf *om-current-persistent* (om-load-patch1 "interlock" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 275 231) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote genfun) "PR-INTERLOCK" (quote |Profile|::pr-interlock) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST1" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "number" "LIST2" 2) (om-load-inputfun (quote input-funbox) "number" "GR" 2))) (om-make-point 186 251) nil nil nil nil 1) (om-load-editor-box1 "BPF1" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 504 535) (om-make-point 144 76) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240)) (quote (6300 6500 6500 6200 7000 6500 6900 6500 7000 6900 6500 6500 6500 5700 6000 5500 4600 5000 5300 4600 5000 5000 4600 5300 5100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winsize winpos)) (list nil (om-make-point 370 280) (om-make-point 400 20))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 23 278) (om-make-point 95 74) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30)) (quote (6300 7000 4600 5100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winsize winpos)) (list nil (om-make-point 370 280) (om-make-point 400 20))) t nil nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 563 474) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 265 309) (om-make-point 52 28) (list 0 100) "(0 100)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 160 342) (om-make-point 334 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6500) (6500) (6200) (7000) (6500) (6900) (6500) (7000) (6900) (6500) (6500) (6500) (5700) (6000) (5500) (4600) (5000) (5300) (4600) (5000) (5000) (4600) (5300) (5100))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom deltapict approx fontsize staff cmnpref outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 (om-make-point 0 0) 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 0 0 nil nil)) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 281 88) (om-make-point 104 112) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6500 7400 6500 5700 6500 7200 6500 5800 6500 7400 6500 5300 6900 7700 6900 5500 6200 7000 6200 5300 6200 6900 6200 5500 6200 7000 6200 5000 6500 7400 6500 5100 5800 6700 5800 5000 5800 6500 5800 5100 5800 6700 5800 4600 6200 7000 6200 4600)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom deltapict approx fontsize staff cmnpref outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 2621450 18350450 0 1000 nil 1 (om-make-point 0 0) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 0 0 nil nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 42) (om-make-point 106 38) (list 5800 6500 7400 6500 5700 6500 7200 6500 5800 6500 7400 6500 5300 6900 7700 6900 5500 6200 7000 6200 5300 6200 6900 6200 5500 6200 7000 6200 5000 6500 7400 6500 5100 5800 6700 5800 5000 5800 6500 5800 5100 5800 6700 5800 4600 6200 7000 6200 4600) "(5800 6500 7400 6500 5700 6500 7200 6500 5800 6500 7400 6500 5300 6900 7700 6900 5500 6200 7000 6200 5300 6200$ 6900 6200 5500 6200 7000 6200 5000 6500 7400 6500 5100 5800 6700 5800 5000 5800 6500 5800 5100 5800 6700 5800$ 4600 6200 7000 6200 4600)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 65 47) (om-make-point 132 28) (list 6300 7000 4600 5100) "(6300 7000 4600 5100)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 80 75) (om-make-point 79 122) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 7000 4600 5100)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom deltapict approx fontsize staff cmnpref outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 2621450 18350450 0 1000 nil 1 (om-make-point 0 0) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 0 0 nil nil)) t nil nil nil))) (quote ((10 1 1 0 nil 0) (7 1 1 1 nil 0) (0 0 1 2 nil 0) (4 0 2 2 nil 0) (10 1 3 2 nil 0) (6 1 4 0 nil 0) (1 0 6 1 nil 0) (5 0 6 2 nil 0) (8 0 7 1 nil 0) (9 0 10 1 nil 0))) nil 6.0301))
