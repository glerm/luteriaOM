; OM File Header - Saved 2015/02/22 1:26:11
; (6.04 :patc (om-make-point 89 22) (om-make-point 50 50) (om-make-point 705 638) "No documentation " 183 0 nil "2015/02/22 1:26:11")
; End File Header
(in-package :om)(load-lib-for (quote ("profile")))(setf *om-current-persistent* (om-load-patch1 "integration" (quote ((om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 182 215) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 412 205) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote genfun) "DERIVATION" (quote |Profile|::derivation) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfunmenu1 (quote input-funmenu) "number" "START" 2 (list (list "first" 1) (list "orig" 2))) (om-load-inputfun (quote input-funbox) "" "GR¡" 1))) (om-make-point 366 234) nil nil nil nil 1) (om-load-boxcall (quote genfun) "INTEGRATION" (quote |Profile|::integration) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfunmenu1 (quote input-funmenu) "number" "START" 1 (list (list "baric" 1) (list "orig" 2))) (om-load-inputfun (quote input-funbox) "number" "GR¡" 1))) (om-make-point 115 243) nil nil nil nil 1) (om-load-boxcall (quote genfun) "xxFLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 412 493) nil nil nil nil 1) (om-load-editor-box1 "xxxxBPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 539 450) (om-make-point 89 103) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130)) (quote (7800 7900 7800 7300 7400 7100 7000 7800 7900 7800 7300 7600 7400 7100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-editor-box1 "xxBPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 206 101) (om-make-point 89 103) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100 110 120 130)) (quote (7800 7900 7800 7300 7400 7100 7000 7800 7900 7800 7300 7600 7400 7100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote lispfun) "xxxxFIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 348 316) nil nil nil nil 1) (om-load-editor-box1 "xxxxCHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 341 381) (om-make-point 146 89) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7900) (7800) (7300) (7400) (7100) (7000) (7800) (7900) (7800) (7300) (7600) (7400) (7100))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport cmnpref staff fontsize approx deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (om-make-point 0 0) 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "xxxxaux2" (quote t) (quote nil) (om-make-point 407 328) (om-make-point 52 28) (list 0 100) "(0 100)" nil) (om-load-boxcall (quote bastype) "xxaux2" (quote t) (quote nil) (om-make-point 181 385) (om-make-point 52 28) (list 0 100) "(0 100)" nil) (om-load-editor-box1 "xxCHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 75 97) (om-make-point 86 96) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7900 7800 7300 7400 7100 7000 7800 7900 7800 7300 7600 7400 7100)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport cmnpref staff fontsize approx deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (om-make-point 0 0) 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "xxaux" (quote t) (quote nil) (om-make-point 67 55) (om-make-point 94 33) (list 7800 7900 7800 7300 7400 7100 7000 7800 7900 7800 7300 7600 7400 7100) "(7800 7900 7800 7300 7400 7100 7000 7800 7900 7800 7300 7600 7400 7100)" nil) (om-load-editor-box1 "xxCHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 131 421) (om-make-point 149 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((52600/7) (7800) (57300/7) (59300/7) (57800/7) (57000/7) (54100/7) (50500/7) (7500) (55200/7) (57200/7) (55700/7) (56300/7) (55500/7) (52600/7))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport cmnpref staff fontsize approx deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (om-make-point 0 0) 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote lispfun) "xxFIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 115 326) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 2 2 nil 0) (11 1 3 0 nil 0) (0 0 3 2 nil 0) (8 1 4 0 nil 0) (4 0 5 2 nil 0) (11 1 6 2 nil 0) (2 0 7 0 nil 0) (7 0 8 1 nil 0) (9 0 8 2 nil 0) (12 0 11 1 nil 0) (14 0 13 1 nil 0) (10 0 13 2 nil 0) (3 0 14 0 nil 0))) nil 6.04))
