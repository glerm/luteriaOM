; OM File Header - Saved 2015/02/22 1:26:11
; (6.04 :patc (om-make-point 126 90) (om-make-point 50 50) (om-make-point 580 474) "No documentation " 183 0 nil "2015/02/22 1:26:11")
; End File Header
(in-package :om)(load-lib-for (quote ("profile")))(setf *om-current-persistent* (om-load-patch1 "bpf-interpolx" (quote ((om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "BPF-LIST" "BPF-LIST" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj))))) (om-make-point 155 304) (om-make-point 302 141) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 6 12 17 23 29 35 40 46 52)) (quote (0 58 114 85 135 81 159 140 113 -22)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2 7 13 19 25 30 36 42 48 53)) (quote (7 63 119 90 140 87 163 145 118 -15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3 9 15 20 26 32 38 43 49 55)) (quote (14 68 125 96 146 93 167 150 123 -8)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5 11 16 22 28 33 39 45 51 56)) (quote (21 74 130 102 151 98 171 154 129 -1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6 12 18 24 29 35 41 46 52 58)) (quote (27 79 135 108 157 104 175 159 134 6)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (8 14 19 25 31 36 42 48 54 59)) (quote (34 84 140 113 162 110 179 164 139 13)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (10 15 21 27 32 38 44 49 55 61)) (quote (41 90 145 119 168 116 184 169 144 20)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (11 17 23 28 34 40 45 51 56 62)) (quote (48 95 150 125 173 121 188 173 149 27)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (13 19 24 30 35 41 47 52 58 63)) (quote (55 100 155 130 178 127 192 178 154 35)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (15 20 26 31 37 43 48 54 59 65)) (quote (62 106 160 136 184 133 196 183 159 42)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (16 22 27 33 39 44 50 55 61 66)) (quote (69 111 165 142 189 138 200 187 165 49)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (18 23 29 35 40 46 51 57 62 68)) (quote (75 116 170 148 195 144 204 192 170 56)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (19 25 31 36 42 47 53 58 64 69)) (quote (82 122 176 153 200 150 208 197 175 63)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (21 27 32 38 43 49 54 60 65 71)) (quote (89 127 181 159 206 155 212 202 180 70)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (23 28 34 39 45 50 56 61 67 72)) (quote (96 133 186 165 211 161 216 206 185 77)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (24 30 35 41 46 52 57 63 68 74)) (quote (103 138 191 170 217 167 220 211 190 84)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (26 31 37 42 48 53 59 64 70 75)) (quote (110 143 196 176 222 173 225 216 196 91)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (28 33 38 44 49 55 60 66 71 76)) (quote (117 149 201 182 227 178 229 221 201 98)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (29 35 40 45 51 56 62 67 72 78)) (quote (124 154 206 188 233 184 233 225 206 105)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (31 36 42 47 52 58 63 69 74 79)) (quote (130 159 211 193 238 190 237 230 211 112)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (32 38 43 49 54 59 65 70 75 81)) (quote (137 165 216 199 244 195 241 235 216 119)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (34 39 45 50 55 61 66 71 77 82)) (quote (144 170 221 205 249 201 245 240 221 126)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (36 41 46 52 57 62 68 73 78 84)) (quote (151 175 227 210 255 207 249 244 227 134)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (37 43 48 53 59 64 69 74 80 85)) (quote (158 181 232 216 260 212 253 249 232 141)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (39 44 50 55 60 65 71 76 81 86)) (quote (165 186 237 222 265 218 257 254 237 148)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (41 46 51 56 62 67 72 77 83 88)) (quote (172 191 242 228 271 224 261 259 242 155)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (42 47 53 58 63 68 74 79 84 89)) (quote (178 197 247 233 276 230 266 263 247 162)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (44 49 54 59 65 70 75 80 86 91)) (quote (185 202 252 239 282 235 270 268 252 169)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (45 51 56 61 66 71 77 82 87 92)) (quote (192 207 257 245 287 241 274 273 257 176)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (47 52 57 63 68 73 78 83 88 94)) (quote (199 213 262 251 293 247 278 277 263 183)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (49 54 59 64 69 74 80 85 90 95)) (quote (206 218 267 256 298 252 282 282 268 190)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (50 55 61 66 71 76 81 86 91 97)) (quote (213 223 272 262 304 258 286 287 273 197)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (52 57 62 67 72 78 83 88 93 98)) (quote (220 229 278 268 309 264 290 292 278 204)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (54 59 64 69 74 79 84 89 94 99)) (quote (226 234 283 273 314 269 294 296 283 211)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (55 60 65 70 75 81 86 91 96 101)) (quote (233 239 288 279 320 275 298 301 288 218)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (57 62 67 72 77 82 87 92 97 102)) (quote (240 245 293 285 325 281 302 306 294 225)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (58 63 69 74 79 84 89 94 99 104)) (quote (247 250 298 291 331 287 307 311 299 232)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (60 65 70 75 80 85 90 95 100 105)) (quote (254 255 303 296 336 292 311 315 304 240)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (62 67 72 77 82 87 92 97 102 107)) (quote (261 261 308 302 342 298 315 320 309 247)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (63 68 73 78 83 88 93 98 103 108)) (quote (268 266 313 308 347 304 319 325 314 254)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (65 70 75 80 85 90 95 100 104 109)) (quote (274 271 318 313 352 309 323 330 319 261)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (67 71 76 81 86 91 96 101 106 111)) (quote (281 277 323 319 358 315 327 334 325 268)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (68 73 78 83 88 93 98 102 107 112)) (quote (288 282 329 325 363 321 331 339 330 275)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (70 75 80 84 89 94 99 104 109 114)) (quote (295 287 334 331 369 327 335 344 335 282)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (71 76 81 86 91 96 101 105 110 115)) (quote (302 293 339 336 374 332 339 349 340 289)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (73 78 83 88 92 97 102 107 112 117)) (quote (309 298 344 342 380 338 343 353 345 296)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (75 80 84 89 94 99 104 108 113 118)) (quote (316 303 349 348 385 344 348 358 350 303)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (76 81 86 91 95 100 105 110 115 119)) (quote (322 309 354 353 391 349 352 363 356 310)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (78 83 87 92 97 102 107 111 116 121)) (quote (329 314 359 359 396 355 356 367 361 317)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (80 84 89 94 99 103 108 113 118 122)) (quote (336 319 364 365 401 361 360 372 366 324)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (81 86 91 95 100 105 110 114 119 124)) (quote (343 325 369 371 407 366 364 377 371 331)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (83 88 92 97 102 106 111 116 121 125)) (quote (350 330 374 376 412 372 368 382 376 339)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (84 89 94 99 103 108 113 117 122 127)) (quote (357 335 380 382 418 378 372 386 381 346)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (86 91 95 100 105 109 114 119 123 128)) (quote (364 341 385 388 423 384 376 391 386 353)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (88 92 97 102 106 111 116 120 125 130)) (quote (371 346 390 393 429 389 380 396 392 360)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (89 94 99 103 108 112 117 122 126 131)) (quote (377 351 395 399 434 395 384 401 397 367)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (91 96 100 105 109 114 119 123 128 132)) (quote (384 357 400 405 439 401 389 405 402 374)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (93 97 102 106 111 115 120 125 129 134)) (quote (391 362 405 411 445 406 393 410 407 381)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (94 99 103 108 112 117 122 126 131 135)) (quote (398 367 410 416 450 412 397 415 412 388)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (96 100 105 109 114 119 123 128 132 137)) (quote (405 373 415 422 456 418 401 420 417 395)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (97 102 106 111 116 120 125 129 134 138)) (quote (412 378 420 428 461 423 405 424 423 402)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (99 104 108 113 117 122 126 131 135 140)) (quote (419 383 426 434 467 429 409 429 428 409)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (101 105 110 114 119 123 128 132 137 141)) (quote (425 389 431 439 472 435 413 434 433 416)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (102 107 111 116 120 125 129 134 138 142)) (quote (432 394 436 445 478 441 417 438 438 423)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (104 108 113 117 122 126 131 135 139 144)) (quote (439 399 441 451 483 446 421 443 443 430)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (106 110 114 119 123 128 132 136 141 145)) (quote (446 405 446 456 488 452 425 448 448 438)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (107 112 116 120 125 129 134 138 142 147)) (quote (453 410 451 462 494 458 430 453 454 445)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (109 113 118 122 126 131 135 139 144 148)) (quote (460 415 456 468 499 463 434 457 459 452)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (110 115 119 123 128 132 137 141 145 150)) (quote (467 421 461 474 505 469 438 462 464 459)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (112 116 121 125 129 134 138 142 147 151)) (quote (473 426 466 479 510 475 442 467 469 466)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (114 118 122 127 131 135 140 144 148 152)) (quote (480 431 471 485 516 480 446 472 474 473)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (115 120 124 128 132 137 141 145 150 154)) (quote (487 437 477 491 521 486 450 476 479 480)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (117 121 125 130 134 138 143 147 151 155)) (quote (494 442 482 496 526 492 454 481 484 487)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (119 123 127 131 136 140 144 148 153 157)) (quote (501 447 487 502 532 498 458 486 490 494)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (120 124 129 133 137 141 146 150 154 158)) (quote (508 453 492 508 537 503 462 491 495 501)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (122 126 130 134 139 143 147 151 155 160)) (quote (515 458 497 514 543 509 466 495 500 508)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (123 128 132 136 140 144 149 153 157 161)) (quote (521 463 502 519 548 515 471 500 505 515)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (125 129 133 138 142 146 150 154 158 163)) (quote (528 469 507 525 554 520 475 505 510 522)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (127 131 135 139 143 147 152 156 160 164)) (quote (535 474 512 531 559 526 479 510 515 529)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (128 132 137 141 145 149 153 157 161 165)) (quote (542 479 517 536 565 532 483 514 521 536)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (130 134 138 142 146 150 155 159 163 167)) (quote (549 485 522 542 570 537 487 519 526 544)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (132 136 140 144 148 152 156 160 164 168)) (quote (556 490 528 548 575 543 491 524 531 551)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (133 137 141 145 149 153 158 162 166 170)) (quote (563 495 533 554 581 549 495 528 536 558)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (135 139 143 147 151 155 159 163 167 171)) (quote (569 501 538 559 586 555 499 533 541 565)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (136 140 144 148 152 157 161 165 169 173)) (quote (576 506 543 565 592 560 503 538 546 572)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (138 142 146 150 154 158 162 166 170 174)) (quote (583 511 548 571 597 566 507 543 552 579)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (140 144 148 152 156 160 164 168 171 175)) (quote (590 517 553 576 603 572 512 547 557 586)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (141 145 149 153 157 161 165 169 173 177)) (quote (597 522 558 582 608 577 516 552 562 593)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (143 147 151 155 159 163 167 170 174 178)) (quote (604 527 563 588 613 583 520 557 567 600)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (145 148 152 156 160 164 168 172 176 180)) (quote (611 533 568 594 619 589 524 562 572 607)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (146 150 154 158 162 166 170 173 177 181)) (quote (618 538 573 599 624 594 528 566 577 614)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (148 152 156 159 163 167 171 175 179 183)) (quote (624 543 579 605 630 600 532 571 582 621)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (149 153 157 161 165 169 173 176 180 184)) (quote (631 549 584 611 635 606 536 576 588 628)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (151 155 159 163 166 170 174 178 182 186)) (quote (638 554 589 617 641 612 540 581 593 635)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (153 156 160 164 168 172 176 179 183 187)) (quote (645 559 594 622 646 617 544 585 598 643)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (154 158 162 166 169 173 177 181 185 188)) (quote (652 565 599 628 651 623 548 590 603 650)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (156 160 163 167 171 175 179 182 186 190)) (quote (659 570 604 634 657 629 553 595 608 657)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (158 161 165 169 173 176 180 184 188 191)) (quote (666 576 609 639 662 634 557 600 613 664)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (159 163 167 170 174 178 182 185 189 193)) (quote (672 581 614 645 668 640 561 604 619 671)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (161 164 168 172 176 179 183 187 190 194)) (quote (679 586 619 651 673 646 565 609 624 678)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (162 166 170 173 177 181 185 188 192 196)) (quote (686 592 624 657 679 652 569 614 629 685)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (164 168 171 175 179 182 186 190 193 197)) (quote (693 597 630 662 684 657 573 618 634 692)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) :from-file t)) nil nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 345 194) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 312 193) (om-make-point 26 28) 10 "10" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 284 193) (om-make-point 26 28) 10 "10" nil) (om-load-editor-box1 "xxBPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 254 27) (om-make-point 96 112) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (164 166 178 184 186 191 196 197)) (quote (693 582 689 645 573 635 633 692)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 107 41) (om-make-point 96 112) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 15 17 18 20 27 33 37 39 44 52)) (quote (0 100 146 43 168 187 70 106 233 130 165 -22)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "BPF-INTERPOLX" (quote |Profile|::bpf-interpolx) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BPF1" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "no documentation" "BPF2" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "no documentation" "ECHANTILLONS" 10) (om-load-inputfun (quote input-funbox) "no documentation" "APPROX" 10) (om-load-inputfun (quote input-funbox) "no documentation" "STEPS" 10) (om-load-inputfun (quote input-funbox) "no documentation" "TAB" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "MODE" 1 (list (list "bpf" 1) (list "list" 2))))) (om-make-point 219 225) (om-make-point 206 61) nil nil nil 1))) (quote ((6 0 0 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0) (2 0 6 3 nil 0) (1 0 6 4 nil 0))) nil 6.04))
