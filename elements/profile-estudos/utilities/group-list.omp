; OM File Header - Saved 2015/02/22 1:26:11
; (6.0301 :patc (om-make-point 264 27) (om-make-point 50 50) (om-make-point 496 603) "No documentation " 183 0 nil "2015/02/22 1:26:11")
; End File Header
(in-package :om)(load-lib-for (quote ("Profile")))(setf *om-current-persistent* (om-load-patch1 "group-list" (quote ((om-load-boxcall (quote genfun) "PR-GROUP-LIST" (quote |Profile|::pr-group-list) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "number" "GROUP" 2) (om-load-inputfunmenu1 (quote input-funmenu) "" "MODE?" 1 (list (list "stop" 1) (list "circ" 2) (list "scal" 3))))) (om-make-point 148 296) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 226 251) (om-make-point 80 28) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil) (om-load-boxcall (quote bastype) "xxxxaux1" (quote t) (quote nil) (om-make-point 238 342) (om-make-point 58 28) (list 0 1000) "(0 1000)" nil) (om-load-editor-box1 "xxxxCHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 150 389) (om-make-point 223 173) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8000) (6800 6098) (5600 5214 4898) (4632 4400 4196 4014) (3848 3698 3560 3432 3312) (3200 3096 2996 2902 2814 2730))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000) (1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100) (100 100) (100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0) (0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1) (1 1) (1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 2621450 18350450 0 1000 nil 1 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -7) 0 0 0 0 nil nil)) t nil nil nil) (om-load-boxcall (quote bastype) "xxxxaux" (quote t) (quote nil) (om-make-point 149 55) (om-make-point 280 74) (list 8000 6800 6098 5600 5214 4898 4632 4400 4196 4014 3848 3698 3560 3432 3312 3200 3096 2996 2902 2814 2730 2648 2572 2498 2428 2360 2294 2232) "(8000 6800 6098 5600 5214 4898 4632 4400 4196 4014 3848 3698 3560 3432 3312 3200 3096 2996 2902 2814 2730 2648 2572 2498 2428 2360 2294 2232)" nil) (om-load-editor-box1 "xxxxCHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 93 134) (om-make-point 94 145) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 6800 6098 5600 5214 4898 4632 4400 4196 4014 3848 3698 3560 3432 3312 3200 3096 2996 2902 2814 2730 2648 2572 2498 2428 2360 2294 2232)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 2621450 18350450 0 1000 nil 1 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 nil nil)) t nil nil nil))) (quote ((5 1 0 0 nil 0) (1 0 0 1 nil 0) (0 0 3 1 nil 0) (2 0 3 2 nil 0) (4 0 5 1 nil 0))) nil 6.0301))
