; OM File Header - Saved 2015/02/22 1:26:11
; (6.04 :patc (om-make-point 38 88) (om-make-point 50 50) (om-make-point 557 543) "No documentation " 183 0 nil "2015/02/22 1:26:11")
; End File Header
(in-package :om)(load-lib-for (quote ("profile")))(setf *om-current-persistent* (om-load-patch1 "notes-change" (quote ((om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 274 16) (om-make-point 96 45) (list 6000 6200 6400 6500 6700 6900 7100) "(6000 6200 6400 6500 6700 6900 7100)" nil) (om-load-editor-box1 "CHORD1" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 264 73) (om-make-point 78 94) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6400 6500 6700 6900 7100)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport approx fontsize staff cmnpref deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 281 267) (om-make-point 52 28) (list 0 100) "(0 100)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 191 312) (om-make-point 212 149) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (6700) (6000) (5500) (5200) (4800) (4700) (4300) (4100) (4000) (3800) (3600) (3500) (3500) (3300) (3100) (3100) (2900) (2900) (2800) (2800) (2600) (2600) (2400) (2400) (2300) (2300) (2300))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.04 nil))))) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport approx fontsize staff cmnpref deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 2 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 74 13) (om-make-point 109 46) (list 8000 6800 6098 5600 5214 4898 4632 4400 4196 4014 3848 3698 3560 3432 3312 3200 3096 2996 2902 2814 2730 2648 2572 2498 2428 2360 2294 2232) "(8000 6800 6098 5600 5214 4898 4632 4400 4196 4014 3848 3698 3560 3432 3312 3200 3096 2996 2902 2814 2730 2648$ 2572 2498 2428 2360 2294 2232)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 72 71) (om-make-point 87 146) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 6800 6098 5600 5214 4898 4632 4400 4196 4014 3848 3698 3560 3432 3312 3200 3096 2996 2902 2814 2730 2648 2572 2498 2428 2360 2294 2232)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport approx fontsize staff cmnpref deltapict zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "NOTES-CHANGE" (quote |Profile|::notes-change) (quote ((om-load-inputfun (quote input-funbox) "list" "PITS" (list 6100 6300)) (om-load-inputfun (quote input-funbox) "number" "SCALE" (list 6000)) (om-load-inputfun (quote input-funbox) "number" "MOD" 12))) (om-make-point 195 237) nil nil nil "notes-change" 1))) (quote ((0 0 1 1 nil 0) (6 0 3 1 nil 0) (2 0 3 2 nil 0) (4 0 5 1 nil 0) (5 1 6 0 nil 0) (1 1 6 1 nil 0))) nil 6.04))
