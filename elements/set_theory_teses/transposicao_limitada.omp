; OM File Header - Saved 2014/05/23 18:53:22
; (6.080003 :patc (om-make-point 118 110) (om-make-point 0 0) (om-make-point 1018 675) "" 183 0 "2014/04/25 15:28:06" "2014/05/23 18:45:55")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "transposicao_limitada" (quote ((om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 516 390) (om-make-point 60 32) (list 0 300) "(0 300)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 358 535) (om-make-point 202 92) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6200 6600 6800) (6000 6100 6600 6700))) :lonset (quote (0 300 1300)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "base_C4" (om-load-patch-abs1 "base_C4" (quote ((om-load-boxout "output" 0 (om-make-point 23 170) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 124 91) (om-make-point 48 32) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 63 124) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 90 52) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 36 108) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0))) 6.080003 nil "" (om-make-point 0 0) (om-make-point 500 377)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 353 417) nil (list (list (list 6000 6200 6600 6800) (list 6000 6100 6600 6700))) nil "base_C4") (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 468 99) (om-make-point 27 32) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 389 52) (om-make-point 27 32) 4 "4" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 256 86) (om-make-point 34 32) 12 "12" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 310 35) (om-make-point 41 32) "ttl" "\"ttl\"" nil) (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 1 5 7 9)))) (om-make-point 269 294) (om-make-point 109 117) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 6 8) (list 0 1 6 7)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "FAMILLE" (quote famille) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfunmenu1 (quote input-funmenu) "familly" "FAMILLY" "ttl" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun (quote input-funbox) "number of elements" "K" 6) (om-load-inputfun (quote input-funbox) "howmany answers" "HOWMANY" 5))) (om-make-point 309 116) nil nil nil nil 1))) (quote ((2 0 1 1 nil 0) (0 0 1 2 nil 0) (7 2 2 0 nil 0) (8 0 7 2 nil 0) (5 0 8 0 nil 0) (6 0 8 1 nil 0) (4 0 8 2 nil 0) (3 0 8 3 nil 0))) nil 6.080003))
