; OM File Header - Saved 2015/02/11 22:59:49
; (6.080003 :patc (om-make-point 118 360) (om-make-point 0 31) (om-make-point 1364 612) "" 183 0 "2015/01/28 12:31:14" "2015/02/11 22:59:49")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tabela01" (quote ((om-load-boxcomment "comment" (om-make-point 280 73) (quote "Celula Z (ANTOKOLETZ, 1984, p.69-77)") "" (om-make-point 789 80) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 19.998697916666665D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 111 31) (quote "vetor intervalar") "" (om-make-point 785 161) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 434 581) (om-make-point 124 109) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100 6700) (6000 6700) (6600 6700) (6100 6600) (6700 7200) (6600 7300) (6000 6600) (6700 7300) (6600 7200) (6000 6100) (6700 7800) (7200 6100))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6500)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 72 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 4/5 nil 1000 0 (om-make-point 1253 479) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 95 47) (quote "celulaZ germinal ->") "" (om-make-point 26 612) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 136 590) (om-make-point 257 109) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100 6700) (7200 6700) (6600 6700) (6100 6600) (6700 6000) (6600 7300) (6000 6600) (6700 7300) (6600 7200) (6000 6300) (7800 7900) (7200 7300 6700 7900 6000 9000))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6500)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((11) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 48 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 1068 369) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "base_C4 2" (om-load-patch-abs1 "base_C4" (quote ((om-load-boxout "output" 0 (om-make-point 23 170) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 124 91) (om-make-point 48 32) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 63 124) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 90 52) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 36 108) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 975 551) nil (list (list (list 6000 6500) (list 6000 6600) (list 6000 6100))) nil "base_C4") (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 793 519) (om-make-point 124 109) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6500) (6000 6600) (6000 6100))) :lonset (quote (0 500 1000 2000)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 48 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 1068 369) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 16" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1171 586) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 110 23) "((0 5) (0 6) (0 1))" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 9" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 1077 569) nil nil nil nil 1) (om-load-editor-box1 "TEXT-VIEW 4" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1172 140) (om-make-point 58 252) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 46 223) "untitled"))) (om-set-dialog-item-text rep "2-6
2-5
2-1
2-5
2-5
2-5
2-6
2-6
2-6
2-1
2-1
2-1
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1226 464) (om-make-point 132 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100 6700) (6000 6700) (6600 6700) (6100 6600) (6700 6000) (6600 6100) (6000 6600) (6700 6100) (6600 6000) (6000 6100) (6700 6600) (6100 6000))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6500)) :ldur (quote ((1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000))) :lvel (quote ((100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 72 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 4/5 nil 1000 0 (om-make-point 1253 479) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "base_C4" (om-load-patch-abs1 "base_C4" (quote ((om-load-boxout "output" 0 (om-make-point 23 170) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 124 91) (om-make-point 48 32) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 63 124) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 90 52) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 36 108) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1185 402) nil (list (list (list 6100 6700) (list 6000 6700) (list 6600 6700) (list 6100 6600) (list 6700 6000) (list 6600 6100) (list 6000 6600) (list 6700 6100) (list 6600 6000) (list 6000 6100) (list 6700 6600) (list 6100 6000))) nil "base_C4") (om-load-editor-box1 "TEXT-VIEW 3" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 920 519) (om-make-point 51 89) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 39 60) "untitled"))) (om-set-dialog-item-text rep "2-5
2-6
2-1
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote abstraction) "Fitra_Forte_duplicados" (om-load-lisp-abspatch "Fitra_Forte_duplicados" 6.080003 ";;; remove repeticoes de listas dentro de listas$$$(lambda (diades) (remove-duplicates diades :test #'equal))") (quote ((om-load-inputfun (quote input-funbox) "" "DIADES" nil))) (om-make-point 1021 480) nil (list (list (quote |2-5|) (quote |2-6|) (quote |2-1|))) nil "Fitra_Forte_duplicados") (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 988 261) (om-make-point 35 32) (quote :fn) ":fn" nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1071 424) nil nil nil nil 1) (om-load-boxcall (quote genfun) "P-FORM" (quote p-form) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :fn) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "SET" (list 7 1)))) (om-make-point 1028 313) nil nil "l" nil 1) (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1232 140) (om-make-point 58 252) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 46 223) "untitled"))) (om-set-dialog-item-text rep "(1 7)
(0 7)
(6 7)
(1 6)
(7 0)
(6 1)
(0 6)
(7 1)
(6 0)
(0 1)
(7 6)
(1 0)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote abstraction) "Fitra_diades_duplicadas" (om-load-lisp-abspatch "Fitra_diades_duplicadas" 6.080003 ";;; remove repeticoes de listas dentro de listas$$$(lambda (diades) (remove-duplicates diades :test #'equal))") (quote ((om-load-inputfun (quote input-funbox) "" "DIADES" nil))) (om-make-point 1070 50) nil (list (list (list 1 7) (list 0 7) (list 6 7) (list 1 6) (list 7 0) (list 6 1) (list 0 6) (list 7 1) (list 6 0) (list 0 1) (list 7 6) (list 1 0))) nil "Fitra_diades_duplicadas") (om-load-boxcall (quote abstraction) "diades" (om-load-patch-abs1 "diades" (quote ((om-load-boxout "output" 0 (om-make-point 62 442) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "PERMUTATIONS" (quote permutations) (quote ((om-load-inputfun (quote input-funbox) "a list" "BAG" nil))) (om-make-point 43 132) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 2 2 2 2)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 47 373) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 51 196) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 120 205) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 125 261) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 154 268) (om-make-point 27 32) 2 "2" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 89 310) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 81 270) (om-make-point 27 32) 2 "2" nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (9 0 1 0 nil 0) (3 0 2 0 nil 0) (7 0 2 1 nil 0) (1 0 3 0 nil 0) (3 0 4 0 nil 0) (4 0 5 0 nil 0) (6 0 5 1 nil 0) (8 0 7 0 nil 0) (5 0 7 1 nil 0))) 6.080003 nil "" (om-make-point 0 0) (om-make-point 1364 504)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 965 160) nil (list (list (list 0 1) (list 6 7) (list 0 1) (list 7 6) (list 0 6) (list 1 7) (list 0 6) (list 7 1) (list 0 7) (list 1 6) (list 0 7) (list 6 1) (list 1 0) (list 6 7) (list 1 0) (list 7 6) (list 1 6) (list 0 7) (list 1 6) (list 7 0) (list 1 7) (list 0 6) (list 1 7) (list 6 0) (list 6 0) (list 1 7) (list 6 0) (list 7 1) (list 6 1) (list 0 7) (list 6 1) (list 7 0) (list 6 7) (list 0 1) (list 6 7) (list 1 0) (list 7 0) (list 1 6) (list 7 0) (list 6 1) (list 7 1) (list 0 6) (list 7 1) (list 6 0) (list 7 6) (list 0 1) (list 7 6) (list 1 0))) nil "diades") (om-load-boxwithed1 (quote box-with-win) "intervalo_interno" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 1224 59) nil nil nil (list (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 177 209) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 181 282) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 189 129) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 193 40) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 185 351) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 47 351) nil nil nil 0)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "intervalo_interno" nil) (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1295 141) (om-make-point 58 252) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 46 223) "untitled"))) (om-set-dialog-item-text rep "(6)
(7)
(1)
(5)
(-7)
(-5)
(6)
(-6)
(-6)
(1)
(-1)
(-1)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "X->DX 7" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 904 438) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX 15" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 962 446) (om-make-point 65 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 45 23) "(1 5 1)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 8" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 892 300) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE 7" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 789 383) (om-make-point 109 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 6 7)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 14" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 901 382) (om-make-point 81 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 61 23) "(0 1 6 7)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "X->DX 6" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 614 442) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX 12" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 601 501) (om-make-point 65 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 45 23) "(3 3 3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 7" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 510 356) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE 6" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 479 441) (om-make-point 109 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 6 9)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 11" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 580 380) (om-make-point 81 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 61 23) "(0 3 6 9)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 520 311) (om-make-point 53 32) (quote |4-28|) "|4-28|" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 795 184) (om-make-point 60 32) (quote :vector) ":vector" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 877 192) (om-make-point 46 32) (quote |4-9|) "|4-9|" nil) (om-load-editor-box1 "TEXT-BOX 13" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 788 319) (om-make-point 95 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 75 23) "(2 0 0 0 2 2)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 511 42) (om-make-point 64 32) (quote :integer) ":integer" nil) (om-load-boxcall (quote genfun) "PC-SET 6" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :vector) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 800 249) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX 5" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 410 433) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX 10" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 399 499) (om-make-point 65 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 45 23) "(2 4 2)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "X->DX 4" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 193 434) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX 9" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 183 492) (om-make-point 65 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 45 23) "(1 5 1)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "X->DX 3" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 633 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 198 164) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX 8" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 187 238) (om-make-point 65 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 45 23) "(1 1 1)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 410 186) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX 7" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 621 244) (om-make-point 81 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 61 23) "(1 4 1)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 6" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 399 260) (om-make-point 65 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 45 23) "(1 2 1)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 316 302) (om-make-point 53 32) (quote |4-25|) "|4-25|" nil) (om-load-editor-box1 "TEXT-BOX 5" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 376 371) (om-make-point 81 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 61 23) "(0 2 6 8)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "N-CERCLE 5" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 275 432) (om-make-point 109 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 6 8)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 5" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 306 347) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 117 303) (om-make-point 46 32) (quote |4-9|) "|4-9|" nil) (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 166 369) (om-make-point 81 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 61 23) "(0 1 6 7)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "N-CERCLE 4" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 65 430) (om-make-point 109 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 6 7)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 4" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 96 345) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 596 42) (om-make-point 46 32) (quote |4-8|) "|4-8|" nil) (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 604 120) (om-make-point 81 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 61 23) "(0 1 5 6)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "N-CERCLE 3" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 503 181) (om-make-point 109 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 5 6)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 3" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 534 96) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 386 114) (om-make-point 81 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 61 23) "(0 1 3 4)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 378 34) (om-make-point 46 32) (quote |4-3|) "|4-3|" nil) (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 285 175) (om-make-point 109 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 3 4)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 2" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 316 90) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 170 108) (om-make-point 81 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 61 23) "(0 1 2 3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 162 34) (om-make-point 46 32) (quote |4-1|) "|4-1|" nil) (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 69 169) (om-make-point 109 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 3)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 0 0) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 100 84) nil nil nil nil 1))) (quote ((8 0 5 0 nil 0) (5 0 6 1 nil 0) (8 0 7 0 nil 0) (13 0 8 1 nil 0) (15 0 9 0 nil 0) (11 0 10 1 nil 0) (18 0 11 0 nil 0) (13 0 12 0 nil 0) (15 0 13 0 nil 0) (16 0 15 0 nil 0) (18 0 15 1 nil 2) (14 0 16 0 nil 0) (18 0 17 0 nil 0) (19 0 18 0 nil 0) (24 0 19 0 nil 0) (18 0 20 0 nil 0) (20 0 21 0 nil 0) (26 0 22 0 nil 0) (22 0 23 0 nil 0) (34 0 24 1 nil 0) (24 0 25 2 nil 0) (24 0 26 0 nil 0) (31 0 27 0 nil 0) (27 0 28 0 nil 0) (32 0 29 1 nil 0) (29 0 30 2 nil 0) (29 0 31 0 nil 0) (37 0 35 0 nil 0) (33 0 37 0 nil 0) (34 0 37 1 nil 0) (49 0 38 0 nil 0) (38 0 39 0 nil 0) (53 0 40 0 nil 0) (40 0 41 0 nil 0) (57 0 42 0 nil 0) (64 0 43 0 nil 0) (43 0 44 0 nil 0) (60 0 45 0 nil 0) (42 0 46 0 nil 0) (45 0 47 0 nil 0) (51 0 49 0 nil 0) (51 0 50 2 nil 0) (48 0 51 1 nil 0) (55 0 53 0 nil 0) (55 0 54 2 nil 0) (52 0 55 1 nil 0) (59 0 57 0 nil 0) (59 0 58 2 nil 0) (36 0 59 0 nil 0) (56 0 59 1 nil 0) (63 0 60 0 nil 0) (63 0 62 2 nil 0) (61 0 63 1 nil 0) (67 0 64 0 nil 0) (67 0 66 2 nil 0) (65 0 67 1 nil 0))) nil 6.080003))