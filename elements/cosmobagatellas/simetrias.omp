; OM File Header - Saved 2015/03/05 0:59:44
; (6.080003 :patc (om-make-point 172 10) (om-make-point 0 31) (om-make-point 1364 585) "" 183 0 "2014/12/30 1:19:51" "2015/03/05 0:59:44")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "simetrias" (quote ((om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 623 631) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 125 491) (om-make-point 406 116) (let ((object (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 5200 7900) (4900 4100 4400) (5500 7100 5000) (6600 5800 7300) (4800 2800 6700) (4800 7600 4400) (7300 7700 4500) (3100 5900 6300) (4200 4600 5000) (6000 4000 6800) (6000 7500 6700) (4900 7600 6800) (6700 5800 3800) (5400 4500 3700) (2400 5100 6700) (2400 5100 6700) (5400 4500 3700) (6700 5800 3800) (4900 7600 6800) (6000 7500 6700))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10500)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (set-object-analysis object (list (if (find-class (quote pcset-analysis) nil) (make-instance (quote pcset-analysis) :analysis-segments (list (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 4 7)) :from-file t)) :color (om-make-color 0.30282342 0.84823585 0.08910906) :tb 0 :te 1000 :chord-ids (list 0) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 5 8)) :from-file t)) :color (om-make-color 0.26198864 0.40832877 0.7739315) :tb 500 :te 1500 :chord-ids (list 1) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 7 11)) :from-file t)) :color (om-make-color 0.17539227 0.5247954 0.48958814) :tb 1000 :te 2000 :chord-ids (list 2) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 6 10)) :from-file t)) :color (om-make-color 0.7709533 0.23569608 0.913241) :tb 1500 :te 2500 :chord-ids (list 3) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 4 7)) :from-file t)) :color (om-make-color 0.48856187 0.5744786 0.9357072) :tb 2000 :te 3000 :chord-ids (list 4) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 4 8)) :from-file t)) :color (om-make-color 0.28513575 0.87690056 0.5494878) :tb 2500 :te 3500 :chord-ids (list 5) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 5 9)) :from-file t)) :color (om-make-color 0.19969964 0.004743457 0.3802762) :tb 3000 :te 4000 :chord-ids (list 6) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 3 7 11)) :from-file t)) :color (om-make-color 0.22976315 0.6237484 0.45625877) :tb 3500 :te 4500 :chord-ids (list 7) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 6 10)) :from-file t)) :color (om-make-color 0.3526579 0.2114464 0.33401167) :tb 4000 :te 5000 :chord-ids (list 8) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 4 8)) :from-file t)) :color (om-make-color 0.4983846 0.5270815 0.04233086) :tb 4500 :te 5500 :chord-ids (list 9) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7)) :from-file t)) :color (om-make-color 0.4164518 0.82099307 0.65241576) :tb 5000 :te 6000 :chord-ids (list 10) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 4 8)) :from-file t)) :color (om-make-color 0.4132439 0.4366045 0.9375192) :tb 5500 :te 6500 :chord-ids (list 11) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 7 10)) :from-file t)) :color (om-make-color 0.35773218 0.89448917 0.15167308) :tb 6000 :te 7000 :chord-ids (list 12) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 6 9)) :from-file t)) :color (om-make-color 0.3665259 0.25444937 0.721974) :tb 6500 :te 7500 :chord-ids (list 13) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7)) :from-file t)) :color (om-make-color 0.13726914 0.37893093 0.6946651) :tb 7000 :te 8000 :chord-ids (list 14) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7)) :from-file t)) :color (om-make-color 0.9568434 0.5391587 0.51147104) :tb 7500 :te 8500 :chord-ids (list 15) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 6 9)) :from-file t)) :color (om-make-color 0.7822834 0.92786944 0.25976515) :tb 8000 :te 9000 :chord-ids (list 16) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 7 10)) :from-file t)) :color (om-make-color 0.6232984 0.58001984 0.95523775) :tb 8500 :te 9500 :chord-ids (list 17) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 4 8)) :from-file t)) :color (om-make-color 0.12381673 0.5006516 0.5023532) :tb 9000 :te 10000 :chord-ids (list 18) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7)) :from-file t)) :color (om-make-color 0.6985934 0.34584796 0.13166368) :tb 9500 :te 10500 :chord-ids (list 19) :from-file t))) :from-file t)))) object) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 3 (om-make-point 0 0) (om-make-point 1280 521) 0 1000 nil 261/100 (quote :jackmidi) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 770 392) (om-make-point 106 32) (list (list 5 4) (list 3 8) (list 5 8)) "((5 4)(3 8)(5 8))" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 581 352) (om-make-point 455 32) (list 1/8 1/16 1/8 1/4 1/8 1/8 1/8 1/16 1/8 3/4 1/8 1/8 1/16 1/8 1/16 1/8 1/16 1/8) "(1/8 1/16 1/8 1/4 1/8 1/8 1/8 1/16 1/8 3/4 1/8 1/8 1/16 1/8 1/16 1/8 1/16 1/8)" nil) (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/8 1/4 1/8 1/4 1/4 1/8 1/8 1/2)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 5 4)))) (om-make-point 572 428) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 271 407) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 300)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 732 90) (om-make-point 202 182) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2400 5100 6700) (5400 4500 3700) (6700 5800 3800) (4900 7600 6800) (6000 7500 6700))) :lonset (quote (0 300 600 900 1200 2200)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 467/100 nil 1000 0 (om-make-point 1278 368) (om-make-point 0 0) 3 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 511 90) (om-make-point 202 182) (let ((object (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 7500 6700) (4900 7600 6800) (6700 5800 3800) (5400 4500 3700) (2400 5100 6700))) :lonset (quote (0 500 1000 1500 2000 3000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (set-object-analysis object (list (if (find-class (quote pcset-analysis) nil) (make-instance (quote pcset-analysis) :analysis-segments (list (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7)) :from-file t)) :color (om-make-color 0.50442207 0.1223371 0.072023034) :tb 0 :te 1000 :chord-ids (list 0) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 4 8)) :from-file t)) :color (om-make-color 0.09005582 0.75315 0.86693836) :tb 500 :te 1500 :chord-ids (list 1) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 7 10)) :from-file t)) :color (om-make-color 0.89165617 0.33140492 0.8814622) :tb 1000 :te 2000 :chord-ids (list 2) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 6 9)) :from-file t)) :color (om-make-color 0.17754781 0.5233635 0.4489571) :tb 1500 :te 2500 :chord-ids (list 3) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7)) :from-file t)) :color (om-make-color 0.7832533 0.95878196 0.8665371) :tb 2000 :te 3000 :chord-ids (list 4) :from-file t))) :from-file t)))) object) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 467/100 nil 1000 0 (om-make-point 1364 539) (om-make-point 0 0) 3 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 285 86) (om-make-point 202 182) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 7600 4400) (7300 7700 4500) (3100 5900 6300) (4200 4600 5000) (6000 4000 6800))) :lonset (quote (0 500 1000 1500 2000 3000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 467/100 nil 1000 0 (om-make-point 1278 368) (om-make-point 0 0) 3 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 41 50) (om-make-point 202 182) (let ((object (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 5200 7900) (4900 4100 4400) (5500 7100 5000) (6600 5800 7300) (4800 2800 6700))) :lonset (quote (0 500 1000 1500 2000 3000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (set-object-analysis object (list (if (find-class (quote pcset-analysis) nil) (make-instance (quote pcset-analysis) :analysis-segments (list (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 4 7)) :from-file t)) :color (om-make-color 0.48962533 0.7049613 0.5222744) :tb 0 :te 1000 :chord-ids (list 0) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 5 8)) :from-file t)) :color (om-make-color 0.13252568 0.9986545 0.46490192) :tb 500 :te 1500 :chord-ids (list 1) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 7 11)) :from-file t)) :color (om-make-color 0.33309472 0.08289969 0.15881288) :tb 1000 :te 2000 :chord-ids (list 2) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 6 10)) :from-file t)) :color (om-make-color 0.570837 0.59385777 0.7613803) :tb 1500 :te 2500 :chord-ids (list 3) :from-file t)) (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 4 7)) :from-file t)) :color (om-make-color 0.09621692 0.53768874 0.53878594) :tb 2000 :te 3000 :chord-ids (list 4) :from-file t))) :from-file t)))) object) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 467/100 nil 1000 0 (om-make-point 1324 495) (om-make-point 0 0) 3 1 (quote :normal) (quote t) nil)) t nil nil nil))) (quote ((1 0 0 0 nil 0) (5 0 1 1 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (9 1 5 0 nil 0) (8 1 5 1 nil 0) (7 1 5 2 nil 0) (6 1 5 3 nil 0))) nil 6.080003))