; OM File Header - Saved 2014/12/17 16:21:51
; (6.010006 :patc (om-make-point 214 70) (om-make-point 377 11) (om-make-point 787 598) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("SOAL")))(setf *om-current-persistent* (om-load-patch1 "messiaen" (quote ((om-load-boxcomment "comment" (om-make-point 38 37) (quote "F0") nil (om-make-point 617 240) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 624 376) (om-make-point 120 92) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5502 6000 6386 6552) (6552 6702))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000))) :lvel (quote ((100 100 100 100) (100 100))) :loffset (quote ((0 0 0 0) (0 0))) :lchan (quote ((1 1 1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 535 323) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "nth-overtones" (om-load-patch-abs1 "nth-overtones" (quote ((om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 142 171) (om-make-point 80 35) nil nil nil 1) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 164 226) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 129 80) nil nil nil nil 1) (om-load-boxin "index" 1 (om-make-point 216 81) "no documentation" "index" nil nil) (om-load-boxout "output" 0 (om-make-point 160 311) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "fund" 0 (om-make-point 121 12) "no documentation" "fund" nil nil))) (quote ((2 0 0 0 nil 0) (3 0 0 1 nil 0) (0 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 4 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "fund" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 597 297) nil nil nil "nth-overtones") (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "VEL" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "DUR" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "CHAN" 1))) (om-make-point 559 219) (om-make-point 55 65) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 2400 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote ff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -11) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 727 343) (om-make-point 300 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 129 30) (quote "((6 8 10 11) (11 12))$") "" (om-make-point 403 330) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 67 30) (quote "(0.0 0.67)") "" (om-make-point 408 284) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 84 30) (quote "E-Deviation") "" (om-make-point 405 264) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 133 30) (quote "Coincident harmonics") "" (om-make-point 399 313) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 257 61) (quote "\"this succesion alternates the six-four chord with added augmented fourth and dominant seventh chord with added sixth\"") "" (om-make-point 411 96) nil (om-make-color 1.0 0.5019608 0.0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 294 232) (om-make-point 20 30) 2 "2" nil) (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 253 266) nil nil nil nil 1) (om-load-boxcall (quote genfun) "HARMONICITY" (quote harmonicity) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTES" (list (list 6000 6400 6700))) (om-load-inputfun (quote input-funbox) "a single integer, which informs the number of harmonics to be taken in account for the building of the paradigmatic harmonic spectrum the input file will be compared to. Recommended values: 10 to 16 (default)." "RANGE" 16) (om-load-inputfunmenu1 (quote input-funmenu) "if YES (1) (default),  the virtual fundamental detection algorithm is activated. If NO (0),  the fundamental will be considered to be the lowest pitch of the input file. " "USE-VIRTUAL-FUNDAMENTAL?" 1 (list (list "use" 1) (list "don't" 0))) (om-load-inputfun (quote input-funbox) "a pitch in midicents to be use as the fundamental. If different of 0 (default) all other fundamental options are bypassed." "USER-FUNDAMENTAL" 0) (om-load-inputfun (quote input-funbox) "a single value in midicents, used by the virtual fundamental algorithm; avoids transposing any pitch below this threshold, and other restrictions. Default (3500) well suited  for piano music." "THRESHOLD" 0) (om-load-inputfunmenu1 (quote input-funmenu) "if YES (1) (default), the paradigmatic harmonic object is chromatically rounded. If NO (0),  no." "ROUND-HARMONIC-OBJECT?" 1 (list (list "use" 1) (list "don't" 0))) (om-load-inputfunmenu1 (quote input-funmenu) "if YES (1) (default),  the e-deviation  algorithm transposes down the input pitches which are situated outside the user-defined harmonic range, in such a way there are also considered for harmonic quality evaluation. If NO (0), these pitches are not considered." "TRANSPOSE-PITCHES?" 1 (list (list "use" 1) (list "don't" 0))) (om-load-inputfunmenu1 (quote input-funmenu) "if YES (1) (default,  recommended), all duplicated input pitches are removed for analysis. If NO (0), they are not removed." "REMOVE-DUPLICATES?" 1 (list (list "use" 1) (list "don't" 0))))) (om-make-point 307 273) nil nil nil nil 5) (om-load-boxcomment "comment" (om-make-point 127 68) (quote "Technique de mon language musical, ex: 333") "" (om-make-point 486 498) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 121 54) (quote "Technique de mon language musical, ex: 317") "" (om-make-point 509 164) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "messiean-ex" (om-load-patch-abs1 "messiean-ex" (quote ((om-load-boxcall (quote abstraction) "sucessive-ch" (om-load-patch-abs1 "sucessive-ch" (quote ((om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 309 216) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 208 220) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 302 171) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 154 217) nil nil nil nil 1) (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 143 285) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 181 135) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 152 91) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 8) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 205 69) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 203 365) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "chords" 1 (om-make-point 141 29) "no documentation" "chords" nil nil) (om-load-boxin "gamme" 0 (om-make-point 81 128) "no documentation" "gamme" nil nil))) (quote ((2 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 1 1 nil 0) (5 0 2 0 nil 0) (10 0 3 0 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (6 0 5 0 nil 0) (7 0 5 1 nil 0) (9 0 6 0 nil 0) (4 0 8 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 157 363) nil nil nil "sucessive-ch") (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 250)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 100))) (om-make-point 66 214) (om-make-point 260 90) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (5700) (5800) (6000) (6100) (6300) (6400) (6600) (6700) (6900) (7000) (7200) (7300) (7500) (7600) (7800) (7900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 771 355) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "gamme" (om-load-patch-abs1 "gamme" (quote ((om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 177 237) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 240 186) nil nil nil nil 1) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "VEL" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "DUR" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "CHAN" 1))) (om-make-point 127 164) (om-make-point 55 65) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 5500 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote f) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -11) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 727 343) (om-make-point 300 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 237 123) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 8))) (om-make-point 228 62) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 173 313) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input1" 1 (om-make-point 167 2) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 132 101) "no documentation" nil nil nil))) (quote ((2 1 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (7 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (0 0 5 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 155 132) nil nil nil "gamme") (om-load-boxin "chord-conf" 2 (om-make-point 232 298) "no documentation" "chord-conf" nil nil) (om-load-boxout "output" 0 (om-make-point 171 437) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "structure" 1 (om-make-point 195 43) "no documentation" "structure" nil nil) (om-load-boxin "first-note" 0 (om-make-point 111 43) "no documentation" "first-note" nil nil))) (quote ((1 1 0 0 nil 0) (3 0 0 1 nil 0) (2 0 1 1 nil 0) (6 0 2 0 nil 0) (5 0 2 1 nil 0) (0 0 4 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil))) (om-make-point 125 403) nil nil nil "messiean-ex") (om-load-boxcall (quote abstraction) "messiean-ex" (om-load-patch-abs1 "messiean-ex" (quote ((om-load-boxcall (quote abstraction) "sucessive-ch" (om-load-patch-abs1 "sucessive-ch" (quote ((om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 309 216) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 208 220) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 302 171) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 154 217) nil nil nil nil 1) (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 143 285) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 181 135) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 152 91) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 8) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 205 69) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 203 365) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "chords" 1 (om-make-point 141 29) "no documentation" "chords" nil nil) (om-load-boxin "gamme" 0 (om-make-point 81 128) "no documentation" "gamme" nil nil))) (quote ((2 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 1 1 nil 0) (5 0 2 0 nil 0) (10 0 3 0 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (6 0 5 0 nil 0) (7 0 5 1 nil 0) (9 0 6 0 nil 0) (4 0 8 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 157 363) nil nil nil "sucessive-ch") (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 250)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 100))) (om-make-point 66 214) (om-make-point 260 90) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (5700) (5800) (6000) (6100) (6300) (6400) (6600) (6700) (6900) (7000) (7200) (7300) (7500) (7600) (7800) (7900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 771 355) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "gamme" (om-load-patch-abs1 "gamme" (quote ((om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 177 237) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 240 186) nil nil nil nil 1) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "VEL" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "DUR" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "CHAN" 1))) (om-make-point 127 164) (om-make-point 55 65) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 5500 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote f) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -11) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 727 343) (om-make-point 300 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 237 123) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 8))) (om-make-point 228 62) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 173 313) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input1" 1 (om-make-point 167 2) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 132 101) "no documentation" nil nil nil))) (quote ((2 1 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (7 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (0 0 5 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 155 132) nil nil nil "gamme") (om-load-boxin "chord-conf" 2 (om-make-point 232 298) "no documentation" "chord-conf" nil nil) (om-load-boxout "output" 0 (om-make-point 171 437) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "structure" 1 (om-make-point 195 43) "no documentation" "structure" nil nil) (om-load-boxin "first-note" 0 (om-make-point 111 43) "no documentation" "first-note" nil nil))) (quote ((1 1 0 0 nil 0) (3 0 0 1 nil 0) (2 0 1 1 nil 0) (6 0 2 0 nil 0) (5 0 2 1 nil 0) (0 0 4 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil))) (om-make-point 121 83) nil nil nil "messiean-ex") (om-load-boxcomment "comment" (om-make-point 132 53) (quote "3d mode of limited transpositions ") "" (om-make-point 335 420) nil (om-make-color 0.0 0.5019608 0.5019608) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 132 53) (quote "2d mode of limited transpositions ") "" (om-make-point 268 100) nil (om-make-color 0.0 0.5019608 0.5019608) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 800)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 100))) (om-make-point 79 471) (om-make-point 404 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5100 5400 5600 6000 6400) (5200 5500 5800 6200 6600) (5400 5600 5900 6300 6700) (5500 5800 6000 6400 6800) (5600 5900 6200 6600 7000) (5800 6000 6300 6700 7100) (5900 6200 6400 6800 7200) (6000 6300 6600 7000 7400) (6200 6400 6700 7100 7500) (6000 6300 6600 7000 7400) (5900 6200 6400 6800 7200) (5800 6000 6300 6700 7100) (5600 5900 6200 6600 7000) (5500 5800 6000 6400 6800) (5400 5600 5900 6300 6700) (5200 5500 5800 6200 6600) (5100 5400 5600 6000 6400))) :lonset (quote (0 800 1600 2400 3200 4000 4800 5600 6400 7200 8000 8800 9600 10400 11200 12000 12800 13600)) :ldur (quote ((800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800) (800 800 800 800 800))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -7) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 1082 301) (om-make-point 207 193) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "VEL" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "DUR" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "CHAN" 1))) (om-make-point 55 328) (om-make-point 55 65) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 5100 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote f) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -11) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 727 343) (om-make-point 300 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 181 38) (om-make-point 53 30) (list 0 3 6 7) "(0 3 6 7)" nil) (om-load-boxcall (quote bastype) "list4" (quote list) (quote nil) (om-make-point 186 365) (om-make-point 68 30) (list 0 2 4 7 10) "(0 2 4 7 10)" nil) (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 137 367) (om-make-point 44 30) (list 1 2 1) "(1 2 1)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 800)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 100))) (om-make-point 121 150) (om-make-point 386 82) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500 6000 6400 6600) (5700 6100 6600 6700) (5800 6300 6700 6900) (6000 6400 6900 7000) (6100 6600 7000 7200) (6300 6700 7200 7300) (6400 6900 7300 7500) (6600 7000 7500 7600) (6700 7200 7600 7800) (6600 7000 7500 7600) (6400 6900 7300 7500) (6300 6700 7200 7300) (6100 6600 7000 7200) (6000 6400 6900 7000) (5800 6300 6700 6900) (5700 6100 6600 6700) (5500 6000 6400 6600))) :lonset (quote (0 800 1600 2400 3200 4000 4800 5600 6400 7200 8000 8800 9600 10400 11200 12000 12800 13600)) :ldur (quote ((800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800) (800 800 800 800))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -10) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 1082 321) (om-make-point 228 44) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "VEL" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "DUR" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "CHAN" 1))) (om-make-point 66 10) (om-make-point 55 65) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 5500 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote f) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -11) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 727 343) (om-make-point 300 20) 0 0 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 137 36) (om-make-point 35 30) (list 2 1) "(2 1)" nil))) (quote ((2 0 1 1 nil 0) (3 1 2 0 nil 0) (11 4 2 1 nil 8) (23 1 10 0 nil 0) (9 0 10 1 nil 0) (10 0 11 0 nil 8) (3 1 11 3 nil 4) (19 1 14 0 nil 0) (22 0 14 1 nil 0) (21 0 14 2 nil 0) (24 1 15 0 nil 0) (25 0 15 1 nil 0) (20 0 15 2 nil 0) (14 0 18 1 nil 0) (15 0 23 1 nil 0))) nil 6.010006))
