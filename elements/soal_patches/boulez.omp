; OM File Header - Saved 2014/12/17 16:27:15
; (6.080003 :patc (om-make-point 10 10) (om-make-point 260 52) (om-make-point 862 527) "" 183 0 nil "2014/12/17 16:27:15")
; End File Header
(in-package :om)(load-lib-for (quote ("soal")))(setf *om-current-persistent* (om-load-patch1 "boulez" (quote ((om-load-boxcomment "comment" (om-make-point 249 71) (quote "with these objects you can know some of the piece caracteristics even without listen and reading the score (tape 'd' to see the documentation for each box)") "" (om-make-point 313 434) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 146 37) (quote "*most frequent intervals") "" (om-make-point 679 342) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SPATIAL-DENSITY" (quote spatial-density) (quote ((om-load-inputfun (quote input-funbox) "list of notes (midicents)" "NOTES" (list (list 6000 6400 6700))) (om-load-inputfunmenu1 (quote input-funmenu) "if YES (1) (default,  recommended), all duplicated input pitches are removed for analysis. If NO (0), they are not removed." "REMOVE-DUPLICATES?" 1 (list (list "use" 1) (list "don't" 0))))) (om-make-point 532 277) nil nil nil nil 1) (om-load-boxcall (quote genfun) "TIME-LINEARITY" (quote time-linearity) (quote ((om-load-inputfun (quote input-funbox) "list of onsets (ms)" "ONSETS" (list (list 0 1000 2000))) (om-load-inputfun (quote input-funbox) "the time unit to work with (ms)" "STEP" 1) (om-load-inputfun (quote input-funbox) "file-duration first output" "DURATION" (list 5000)))) (om-make-point 374 374) nil nil nil nil 2) (om-load-boxcall (quote genfun) "EVENTS-DENSITY" (quote events-density) (quote ((om-load-inputfun (quote input-funbox) "list of onsets (ms)" "ONSETS" (list (list 0 1000 2000))) (om-load-inputfun (quote input-funbox) "list of duration (ms)" "DURATION" (list (list 500 500 500))) (om-load-inputfun (quote input-funbox) "smaller impulse" "SMALLER" 3.0))) (om-make-point 29 303) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 89 195) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote list)) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 78 242) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RELATIVE-SPAN" (quote relative-span) (quote ((om-load-inputfun (quote input-funbox) "list of onsets (ms)" "ONSETS" (list (list 0 1000 2000))) (om-load-inputfun (quote input-funbox) "list of durations (ms)" "DURATIONS" (list (list 500 500 500))) (om-load-inputfun (quote input-funbox) "ref. duration (ms)" "DIVIDER" 0))) (om-make-point 127 303) nil nil nil nil 2) (om-load-boxcall (quote genfun) "VELOCITY-RATE" (quote velocity-rate) (quote ((om-load-inputfun (quote input-funbox) "velocity list" "VELOCITY" (list (list 69 69 69))) (om-load-inputfun (quote input-funbox) "paradigmatic value (divider)" "VELO-PARAG" 127) (om-load-inputfunmenu1 (quote input-funmenu) "output choice (mode or average)" "AVERAGE" 1 (list (list "mode" 1) (list "mean" 0))) (om-load-inputfun (quote input-funbox) "round" "ROUNDING" 2))) (om-make-point 617 277) nil nil nil nil 2) (om-load-boxcall (quote abstraction) "sort-intervals-by-occur" (om-load-patch-abs1 "sort-intervals-by-occur" (quote ((om-load-boxcall (quote genfun) "COGNITIVE-SONANCE" (quote cognitive-sonance) (quote ((om-load-inputfun (quote input-funbox) "midicents" "MIDICENTS" (list (list 6000 6400 6700))) (om-load-inputfun (quote input-funbox) "intervals" "INTERVALS" (list 12 7 5 4 9 8 3 6 10 2 11 1)))) (om-make-point 134 89) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" 0) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 79 208) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 72 251) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 97 147) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "mod" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 82 312) nil nil nil (list (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" 12))) (om-make-point 217 183) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 12))) (om-make-point 104 201) (om-make-point 55 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 129 249) (om-make-point 113 59) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 167 120) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 149 313) (om-make-point 69 59) nil nil nil 3) (om-load-boxin "input0" 0 (om-make-point 171 49) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 217 399) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 117 399) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (3 0 1 0 nil 0) (1 0 2 0 nil 0) (3 0 2 1 nil 0) (0 0 2 2 nil 0) (5 0 3 0 nil 0) (2 0 4 0 nil 0) (4 1 6 0 nil 0) (4 0 7 0 nil 0))) 1 "mod" nil) (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 78 376) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote >)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 120 454) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "count" (om-load-patch-abs1 "count" (quote ((om-load-boxcall (quote lispfun) "COUNT" (quote count) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 203 132) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 200 193) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input1" 1 (om-make-point 230 13) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 180 13) "no documentation" nil nil nil))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 154 370) nil nil "l" "count") (om-load-boxin "test" 1 (om-make-point 256 364) "no documentation" "test" nil nil) (om-load-boxout "output" 0 (om-make-point 115 531) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "lmidic" 0 (om-make-point 151 20) "no documentation" "lmidic" (quote >) nil))) (quote ((10 0 0 0 nil 0) (3 0 1 1 nil 0) (1 0 2 0 nil 0) (0 0 3 0 nil 0) (2 0 4 0 nil 0) (4 0 5 0 nil 0) (5 0 6 0 nil 0) (8 0 6 1 nil 0) (7 0 6 2 nil 0) (4 0 7 1 nil 0) (6 0 9 0 nil 0))) 6.080003 nil "" (om-make-point 0 0) (om-make-point 400 473)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lmidic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input" (quote >)))) (om-make-point 688 275) nil nil nil "sort-intervals-by-occur") (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 436 177) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 434 237) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "adjust-lonset" (om-load-patch-abs1 "adjust-lonset" (quote ((om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 210 157) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 229 102) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 97 201) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 114 247) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "onsets" nil) (om-load-inputfun (quote input-funbox) "no documentation" "lengths" nil))) (om-make-point 197 306) nil nil nil (list (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 236 397) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 238 328) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist1" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 226 107) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 140 255) (om-make-point 157 59) nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 152 183) (om-make-point 137 59) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 110) nil nil nil nil 1) (om-load-boxin "lengths" 1 (om-make-point 228 46) "no documentation" "lengths" nil nil) (om-load-boxin "onsets" 0 (om-make-point 183 46) "no documentation" "onsets" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 230 448) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 125 334) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (3 1 1 0 nil 0) (6 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (7 0 5 0 nil 0) (0 0 8 0 nil 0) (3 0 9 0 nil 0))) 1 "omloop1" nil) (om-load-boxcall (quote lispfun) "MAPCAR1" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 239 201) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 197 400) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "lonset" 1 (om-make-point 232 33) "no documentation" "lonset" nil nil) (om-load-boxin "lmidc" 0 (om-make-point 128 144) "no documentation" "lmidc" nil nil))) (quote ((7 0 1 0 nil 0) (2 0 3 0 nil 0) (8 0 3 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (0 0 5 0 nil 0) (1 0 5 1 nil 0) (4 0 6 0 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lmidc" nil) (om-load-inputfun (quote input-funbox) "no documentation" "lonset" nil))) (om-make-point 359 211) nil (list (list (list 0 0 450 1500 1500 1500 1622 1622 1800 2400 2400 2400 4575 4575 4725 5400 5400 5400 5550 5550 5550 5550 6900 6900 6900 8400 8400 8400 8400 10875 10875 11025 11025 11700 12900 14100 14400 14400 14400 14700 15000 15400 15800 15800 18019 18019 18019 18019 18019 18019 18019 18206 18206 18675 18675 18956 19425 19722 19984 20229 20904 21690 21690 22944 25459 25459 25608 26654 26654 26654 26654 26804 26804 26804 26804 26804 27054 27054 27054 27554 28754 28754 28904 28904 29054 31154 31154 31154 31154 31154 31154 32954 35320 35757 36041 36041 36807 36807 36807 36807 36965 37303 37303 39220 39220 39220 40490 40490 40789 41087 41087 41237 42656 42656 42806 42806 42806 42955 42955 43104 44972 44972 44972 44972 45171 45171 45370 45569 45569 45868 45868 45868 46167 46167 46366 47064 47363 47363 47363 47363 47363 47363 47363 47363 48460 48460 48585 48585 49960 49960 50085 50085 51328 51328 51459 51658 51658 51919 51919 51919 51919 52256 52256 52256 53451 53451 53451 53451 53600 53749 54945 54945 55094 55094 55243 57186 58829 58829 58978 59128 59128 59128 59651 59651 59763 59950 59950 60062 60062 60062 60622 60622 60821 61219 61219 61219))) nil "adjust-lonset") (om-load-boxcall (quote genfun) "SMALLER-IMPULSE" (quote smaller-impulse) (quote ((om-load-inputfun (quote input-funbox) "list of onsets (ms)" "ONSETS" (list (list 0 1000 2000))) (om-load-inputfun (quote input-funbox) "list of durations (ms)" "DURS" (list (list 500 500 500))))) (om-make-point 454 327) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FILE-DURATION" (quote file-duration) (quote ((om-load-inputfun (quote input-funbox) "list of onsets (ms)" "ONSETS" (list (list 0 1000 2000))) (om-load-inputfun (quote input-funbox) "list of durations (ms)" "DURATIONS" (list (list 500 500 500))))) (om-make-point 331 307) nil nil nil nil 2) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 230 255) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 232 195) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PIANO-SPATIAL-ANALYSIS" (quote piano-spatial-analysis) (quote ((om-load-inputfun (quote input-funbox) "the input object, a list of at least two pitches (in midicents), inside the piano range (2100-10700)." "NOTES" (list (list 6000 6400 6700))) (om-load-inputfunmenu1 (quote input-funmenu) "if YES (1) (default,  recommended), all duplicated input pitches are removed for analysis. If NO (0), they are not removed." "REMOVE-DUPLICATES?" 1 (list (list "use" 1) (list "don't" 0))))) (om-make-point 205 299) nil nil nil nil 10) (om-load-boxcomment "comment" (om-make-point 103 60) (quote "pierre boulez - 3eme sonate: texte") "" (om-make-point 121 42) nil (om-make-color 0 0 0) (om-make-font "Microsoft Sans Serif" 10 :family "Microsoft Sans Serif" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 226 15) (om-make-point 340 135) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8800 7400) (8500) (6300 6800 5300) (5700 5800) (7100) (10200 8400 7900) (8400 7300) (6200) (5600 7900 5100) (10100 9400 8400 7100) (6200 5100 3700) (7800 6400 4500 4300) (8200 5600) (6700 9300) (7700) (5400) (10600) (9200 8300 7300) (9600) (4500) (5000) (6300 4300) (10300 9400 9200 8900 6000 5900 4900) (7400 6600) (10800 9700) (7900) (9500) (8000) (6600) (10500) (9400) (6500 6300) (7600) (7600 8100) (8700) (9800 9700 9600 9100) (5200 4200 4400 4100 3900) (10500 9500 9400) (8000) (5800 6700) (8400 6900) (9800) (7500 6500 8300 6400 8500 5400) (4600) (6900) (5200) (10100 8300) (10300 9200 9000 7300) (6000) (6300 5000) (4400 4300 4200) (6100 9300) (8600) (7600 5100) (5900) (5400 8900) (9200 6900 4300) (8200 10900) (7200) (3700 8600 9900 10000) (4600 6900) (5600) (7800 7600) (8900 9800 10300) (11100 8300) (10800) (6800) (9300 8500 8300 8200 5500 5400 5300 5100) (9500 8600) (11200 9700) (5300 6200) (3600 5100) (6100 7800) (5500) (6800 7000) (11000 10500 8400 9500) (6500 6400 5100) (8700 7300 8400 8200) (6200) (5600) (7700 8800) (9000 8300) (10300) (4500) (8000 7000) (9300) (11100 10600 10000) (4100 6700) (5900) (6100 5100) (9600 8600 6700) (11400 9300) (10400) (11000 9700 9600))) :lonset (quote (0 450 1500 1622 1800 2400 4575 4725 5400 5550 6900 8400 10875 11025 11700 12900 14100 14400 14700 15000 15400 15800 18019 18206 18675 18956 19425 19722 19984 20229 20904 21690 22944 25459 25608 26654 26804 27054 27554 28754 28904 29054 31154 32954 35320 35757 36041 36807 36965 37303 39220 40490 40789 41087 41237 42656 42806 42955 43104 44972 45171 45370 45569 45868 46167 46366 47064 47363 48460 48585 49960 50085 51328 51459 51658 51919 52256 53451 53600 53749 54945 55094 55243 57186 58829 58978 59128 59651 59763 59950 60062 60622 60821 61219 61369)) :ldur (quote ((1800 400) (400) (75 75 900) (200 75) (300) (2175 2175 2175) (75 75) (75) (4125 75 75) (1350 1350 1350 1350) (1500 1500 1500) (1200 1200 1200 1200) (75 75) (3600 75) (1200) (1200) (900) (300 300 300) (150) (800) (800) (400 400) (94 94 94 94 93 93 93) (7159 94) (250 2597) (282) (375) (369) (368) (369) (184) (836 1733) (479) (75 74) (75) (200 200 200 200) (200 200 75 75 75) (200 200 200) (4800) (2325 2400) (2175 2250) (2100) (1200 1200 1200 1200 1200 1200) (3087) (437) (284) (608 608) (159 158 158 158) (2255) (796 796) (75 75 75) (74 75) (4183) (1121 1196) (1046) (2241 2316) (2092 2092 2166) (1942 2017) (1868) (522 75 75 75) (199 199) (199) (597 598) (299 298 299) (598 199) (199) (3896) (298 298 298 298 298 298 298 298) (1000 1000) (1000 1000) (500 500) (500 500) (598 3) (243) (112 598) (299 299 299 4) (298 298 298) (75 75 74 74) (3586) (1494) (75 74) (74 75) (1494) (74) (74 75) (75) (299 299 597) (897 74) (896) (598 74) (598 598 597) (597 199) (199) (75 75 75))) :lvel (quote ((69 59) (46) (62 59 69) (69 65) (59) (82 59 59) (35 46) (24) (59 75 69) (46 46 46 46) (35 35 35) (46 46 46 46) (46 35) (69 59) (46) (35) (104) (100 100 100) (93) (69) (46) (35 35) (69 69 69 69 93 93 93) (46 60) (35 35) (35) (35) (46) (59) (69) (46) (59 35) (46) (40 46) (35) (93 93 93 93) (100 100 98 98 98) (104 104 104) (110) (97 93) (105 101) (110) (69 69 69 69 69 69) (64) (46) (35) (75 75) (80 80 80 80) (59) (59 59) (24 24 24) (24 35) (82) (69 59) (69) (59 59) (69 69 64) (93 82) (93) (93 93 93 93) (98 98) (104) (110 110) (82 93 104) (46 46) (46) (120) (116 116 116 116 116 116 116 116) (116 116) (116 116) (116 120) (100 104) (69 69) (46) (93 87) (98 98 93 93) (104 104 104) (69 69 59 59) (50) (59) (59 59) (59 69) (50) (69) (50 69) (35) (104 104 104) (69 59) (69) (46 46) (30 35 40) (69 69) (82) (24 35 35))) :loffset (quote ((0 0) (0) (72 41 0) (28 0) (0) (0 0 0) (75 0) (0) (75 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (75 0) (75 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (93 93 93 93 0 0 0) (94 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (74 0) (0) (0 0 0 0) (50 50 0 0 0) (0 0 0) (0) (75 0) (75 0) (0) (75 75 38 38 0 0) (0) (0) (0) (0 0) (32 20 0 0) (0) (0 0) (0 0 0) (75 0) (0) (75 0) (0) (75 0) (74 74 0) (75 0) (0) (75 0 0 0) (0 0) (0) (38 0) (72 38 0) (0 0) (0) (0) (0 0 0 0 0 0 0 0) (62 0) (63 0) (62 0) (63 0) (31 0) (0) (50 0) (38 38 38 0) (0 0 0) (74 74 0 0) (0) (0) (74 0) (75 0) (0) (0) (75 0) (0) (0 0 0) (74 0) (0) (74 0) (74 37 0) (0 0) (0) (75 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1 1 1 1 1 1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1 1 1) (1 1 1 1 1) (1 1 1) (1) (1 1) (1 1) (1) (1 1 1 1 1 1) (1) (1) (1) (1 1) (1 1 1 1) (1) (1 1) (1 1 1) (1 1) (1) (1 1) (1) (1 1) (1 1 1) (1 1) (1) (1 1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1) (1) (1 1 1 1 1 1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0 0 0 0 0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0 0) (0) (0 0) (0) (0 0) (0 0 0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0) (0) (0 0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 319 128) (om-make-point 821 400) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (quote ((19 1 2 0 nil 12) (12 0 3 0 nil 12) (14 0 3 2 nil 12) (6 0 4 0 nil 0) (19 3 4 1 nil 12) (19 2 5 0 nil 12) (5 0 6 1 nil 0) (6 0 7 0 nil 0) (19 3 7 1 nil 12) (19 4 8 0 nil 3) (19 1 9 0 nil 12) (19 3 10 0 nil 12) (10 0 11 0 nil 0) (19 1 12 0 nil 12) (19 2 12 1 nil 12) (12 0 13 0 nil 12) (11 0 13 1 nil 3) (12 0 14 0 nil 12) (11 0 14 1 nil 3) (16 0 15 0 nil 0) (19 1 16 0 nil 12) (15 0 17 0 nil 0))) nil 6.080003))