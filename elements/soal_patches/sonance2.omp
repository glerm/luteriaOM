; OM File Header - Saved 2014/12/17 16:21:51
; (6.010006 :patc (om-make-point 305 10) (om-make-point 179 12) (om-make-point 1088 545) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("SOAL")))(setf *om-current-persistent* (om-load-patch1 "sonance2" (quote ((om-load-boxcomment "comment" (om-make-point 281 85) (quote "one can easily says that Boulez's piece is something like 'more dissonant' than the Gymnopédie... anyway, we can find here precise numbers with these objects.") "" (om-make-point 43 404) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "remove-chords2" (om-load-patch-abs1 "remove-chords2" (quote ((om-load-boxcall (quote abstraction) "sonance" (om-load-patch-abs1 "sonance" (quote ((om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 170 73) nil nil nil nil 1) (om-load-boxcall (quote genfun) "COGNITIVE-SONANCE" (quote cognitive-sonance) (quote ((om-load-inputfun (quote input-funbox) "midicents" "MIDICENTS" (list (list 6000 6400 6700))) (om-load-inputfun (quote input-funbox) "intervals" "INTERVALS" (list 12 7 5 4 9 8 3 6 10 2 11 1)))) (om-make-point 149 118) nil nil nil nil 3) (om-load-boxout "output" 0 (om-make-point 201 191) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 169 11) "no documentation" nil nil nil))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (1 2 2 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 249 153) nil nil "l" "sonance") (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 215 178) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 139 84) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 73 84) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil))) (om-make-point 114 132) nil nil nil (list (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 222 251) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist1" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 337 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 129 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 214 328) (om-make-point 69 59) nil nil nil 3) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 323 111) (om-make-point 130 65) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 117 111) (om-make-point 130 65) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil) (om-load-boxin "input1" 1 (om-make-point 321 47) "no documentation" nil nil nil) (om-load-boxin "input0" 0 (om-make-point 115 44) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 268 399) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 168 399) nil nil nil 0)) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (4 1 1 0 nil 0) (5 1 2 0 nil 0) (0 0 3 0 nil 0) (6 0 4 0 nil 0) (7 0 5 0 nil 0) (3 1 8 0 nil 0) (3 0 9 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote lispfun) "REMOVE-DUPLICATES" (quote remove-duplicates) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun (quote input-keyword) "Choose from this list (system::test system::test-not system::start system::from-end system::end system::key)" "Keyword input" (quote :test)) (om-load-inputfun (quote input-keyword) "Choose from this list (system::test system::test-not system::start system::from-end system::end system::key)" "Keyword input" (quote :key)))) (om-make-point 183 221) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 209 279) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 218 0) "no documentation" nil nil nil))) (quote ((7 0 2 0 nil 0) (7 0 3 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (4 0 5 0 nil 0) (1 0 5 1 nil 0) (0 0 5 2 nil 0) (5 0 6 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 904 208) nil nil nil "remove-chords2") (om-load-boxcall (quote abstraction) "remove-chords" (om-load-patch-abs1 "remove-chords" (quote ((om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 59 110) (om-make-point 130 65) (let ((newobj (when (find-class (quote chord-seq) nil) (let ((rep (make-instance (quote chord-seq) :lmidic (quote ((6000 6400 6900) (5900 6400 6700) (6000 6400 6900) (5900 6400 6700) (6000 6400 6900) (6000 6400 6900) (5800 6200 6700) (5700 6200 6500) (5700 6000 6400) (5500 5900 6400) (5000 5500 5900 6500 6900) (5700 6000 6500) (5500 5900 6500 6900) (5000 5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5700 6000 6500) (5800 6200 6700) (5700 6200 6500) (5700 6000 6400) (5700 6000 6400) (5700 6000 6500) (5500 5900 6400) (5700 6000 6500) (6000 6400 6900) (5700 6000 6400) (5700 6000 6500) (5900 6400 6700) (5700 6000 6500) (5700 6000 6400) (5700 6000 6500) (5700 6000 6500) (5900 6400 6700) (6000 6400 6900) (5900 6400 6700) (6000 6400 6900) (5900 6400 6700) (6000 6400 6900) (5900 6400 6700) (6000 6400 6900) (5900 6400 6700) (6000 6400 6900) (5900 6400 6700) (6000 6400 6900 7200))) :lonset (quote (1000 4000 7000 10000 13000 16000 19000 22000 25000 28000 31000 34000 37000 40000 43000 46000 49000 52000 55000 58000 61000 64000 67000 70000 73000 76000 79000 82000 85000 88000 91000 94000 97000 100000 103000 106000 109000 112000 115000 118000 121000 124000 127000 130000 133000 136000 139000 142000 145000 148000 151000 154000 157000 160000 163000 166000 169000 172000 174000 180000)) :ldur (quote ((2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000 2000 2000) (2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (2000 2000 2000) (6000 6000 6000 6000))) :lvel (quoteloffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1))) :legato 0))) (restore-tonalite rep (quote (((6 0) (make-instance (quote simple-tonalite) :tonnote (quote si) :tonalt (quote bemol) :mode (quote (0 200 400 500 700 900 1100)))) ((32 0) (make-instance (quote simple-tonalite) :tonnote (quote si) :tonalt (quote bemol) :mode (quote (0 200 400 500 700 900 1100))))))) rep)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -15) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) nil nil nil nil) (om-load-boxcall (quote abstraction) "sonance" (om-load-patch-abs1 "sonance" (quote ((om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 170 73) nil nil nil nil 1) (om-load-boxcall (quote genfun) "COGNITIVE-SONANCE" (quote cognitive-sonance) (quote ((om-load-inputfun (quote input-funbox) "midicents" "MIDICENTS" (list (list 6000 6400 6700))) (om-load-inputfun (quote input-funbox) "intervals" "INTERVALS" (list 12 7 5 4 9 8 3 6 10 2 11 1)))) (om-make-point 149 118) nil nil nil nil 3) (om-load-boxout "output" 0 (om-make-point 201 191) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 169 11) "no documentation" nil nil nil))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (1 2 2 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 236 149) nil nil "l" "sonance") (om-load-boxcall (quote lispfun) "REMOVE-DUPLICATES" (quote remove-duplicates) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun (quote input-keyword) "Choose from this list (system::test system::test-not system::start system::from-end system::end system::key)" "Keyword input" (quote :test)) (om-load-inputfun (quote input-keyword) "Choose from this list (system::test system::test-not system::start system::from-end system::end system::key)" "Keyword input" (quote :key)))) (om-make-point 170 217) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 202 164) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 185 61) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 196 280) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 193 0) "no documentation" nil nil nil))) (quote ((4 0 0 0 nil 0) (0 1 2 0 nil 0) (3 0 2 1 nil 0) (1 0 2 2 nil 0) (6 0 4 0 nil 0) (2 0 5 0 nil 0))) 6.010006 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 567 210) nil nil nil "remove-chords") (om-load-boxcomment "comment" (om-make-point 76 30) (quote "(0.28)") "" (om-make-point 971 486) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Microsoft Sans Serif" 10 :family "Microsoft Sans Serif" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 76 30) (quote "(0.53)") "" (om-make-point 76 366) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Microsoft Sans Serif" 10 :family "Microsoft Sans Serif" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 76 30) (quote "(0.33)") "" (om-make-point 573 480) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Microsoft Sans Serif" 10 :family "Microsoft Sans Serif" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 103 40) (quote "arithmetic mean") "" (om-make-point 127 315) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM-MEAN" (quote om-mean) (quote ((om-load-inputfun (quote input-funbox) "list of numbers" "SELF" (list 1)))) (om-make-point 974 429) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 988 362) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 591 364) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-MEAN" (quote om-mean) (quote ((om-load-inputfun (quote input-funbox) "list of numbers" "SELF" (list 1)))) (om-make-point 576 425) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-MEAN" (quote om-mean) (quote ((om-load-inputfun (quote input-funbox) "list of numbers" "SELF" (list 1)))) (om-make-point 78 309) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 93 248) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 183 46) (quote "same process with chords and bass line ------>") "" (om-make-point 745 216) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 183 46) (quote "remove chords which have the same sonance weight ----->") "" (om-make-point 397 213) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 10 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "COGNITIVE-SONANCE" (quote cognitive-sonance) (quote ((om-load-inputfun (quote input-funbox) "midicents" "MIDICENTS" (list (list 6000 6400 6700))) (om-load-inputfun (quote input-funbox) "intervals" "INTERVALS" (list 12 7 5 4 9 8 3 6 10 2 11 1)))) (om-make-point 930 299) nil nil nil nil 3) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 695 299) (om-make-point 227 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4300 5500 5900 6500 6900) (3800 5000 5700 6000 6500) (3600 5900 6400 6700) (3800 5700 6000 6400) (3100 5700 6000 6400) (3100 5700 6000 6500) (3600 6000 6400 6900) (4500 6000 6400 6900) (3800 5900 6400 6700) (3300 4000 4500 6000 6400 6900 7200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 765 397) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 -16) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gff) 24 4)) t nil nil nil) (om-load-boxcall (quote genfun) "COGNITIVE-SONANCE" (quote cognitive-sonance) (quote ((om-load-inputfun (quote input-funbox) "midicents" "MIDICENTS" (list (list 6000 6400 6700))) (om-load-inputfun (quote input-funbox) "intervals" "INTERVALS" (list 12 7 5 4 9 8 3 6 10 2 11 1)))) (om-make-point 533 300) nil nil nil nil 3) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 318 288) (om-make-point 207 95) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000 5500 5900 6500 6900) (5500 5900 6500 6900) (5000 5700 6000 6500) (5700 6000 6400) (6000 6400 6900) (5900 6400 6700) (6000 6400 6900 7200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 765 397) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 -12) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 142 50) (quote "3me Gymnopédie - Erik Satie") "" (om-make-point 895 65) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 11 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "VOICES" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 556 0) (om-make-point 336 187) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (45 (((3 4) (-3)) ((3 4) (-3)) ((3 4) (-3)) ((3 4) (-3)) ((3 4) (3)) ((3 4) (1 1 1)) ((3 4) (1 1 1)) ((3 4) (1 1 1)) ((3 4) (3)) ((3 4) (2 1)) ((3 4) (3)) ((3 4) (3.0)) ((3 4) (3.0)) ((3 4) (-1 1 1)) ((3 4) (2 1)) ((3 4) (1 1 1)) ((3 4) (1 1 1)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3.0)) ((3 4) (3)) ((3 4) (1 1 1)) ((3 4) (1 1 1)) ((3 4) (3.0)) ((3 4) (1.0 1 1)) ((3 4) (1 1 1)) ((3 4) (3)) ((3 4) (-3)) ((3 4) (-3)) ((3 4) (-3)) ((3 4) (3)) ((3 4) (1 1 1)) ((3 4) (1 1 1)) ((3 4) (1 1 1)) ((3 4) (3)) ((3 4) (2 1)) ((3 4) (1 1 1)) ((3 4) (2 1)) ((3 4) (3)) ((3 4) (3)) ((3 4) (-3)) ((3 4) (-3)) ((3 4) (2 1)) ((3 4) (1 1 1)) ((3 4) (1 1 1)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3.0)) ((3 4) (3)) ((3 4) (1 1 1)) ((3 4) (1 1 1)) ((3 4) (3.0)) ((3 4) (1.0 1 1)) ((3 4) (1 1 1)) ((3 4) (3)) ((3 4) (-3)) ((3 4) (-3)) ((3 4) (-3)) ((3 4) (-3)) ((3 4) (-3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (45 (((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (-1 2)) ((3 4) (3)) ((3 4) (3.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6200 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (restore-tonalite thechord (quote ((0 (make-instance (quote simple-tonalite) :tonnote (quote si) :tonalt (quote bemol) :mode (quote (0 200 400 500 700 900 1100))))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6200 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6400)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6400)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5500 5900 6500 6900)) :ldur (quote (2000 2000 2000 2000 2000)) :lvel (quote (80 80 80 80 80)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6500 6900)) :ldur (quote (2000 2000 2000 2000)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700 6000 6500)) :ldur (quote (2000 2000 2000 2000)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 6200 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (restore-tonalite thechord (quote ((0 (make-instance (quote simple-tonalite) :tonnote (quote si) :tonalt (quote bemol) :mode (quote (0 200 400 500 700 900 1100))))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6200 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6400)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6400)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 5900 6400)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6400)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6400)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6000 6500)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6400 6700)) :ldur (quote (2000 2000 2000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6900 7200)) :ldur (quote (3000 3000 3000 3000)) :lvel (quote (80 80 80 80)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (45 (((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3)) ((3 4) (3.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800)) :ldur (quote (3000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 4000 4500)) :ldur (quote (3000 3000 3000)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil "")) ((2) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (list (quote g) (quote g) (quote f)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 864 513) (om-make-point 431 44) 0 3 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "COGNITIVE-SONANCE" (quote cognitive-sonance) (quote ((om-load-inputfun (quote input-funbox) "midicents" "MIDICENTS" (list (list 6000 6400 6700))) (om-load-inputfun (quote input-funbox) "intervals" "INTERVALS" (list 12 7 5 4 9 8 3 6 10 2 11 1)))) (om-make-point 35 159) nil nil nil nil 3) (om-load-boxcomment "comment" (om-make-point 331 32) (quote "((0.36) (0.47) (0.74) (0.58) (0.5) (0.59))") "" (om-make-point 36 214) nil (om-make-color 0.0 0.2509804 0.5019608) (om-make-font "Microsoft Sans Serif" 10 :family "Microsoft Sans Serif" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 145 57) (quote "Dérive 1 - Piano harmonic material") "" (om-make-point 413 65) nil (om-make-color 0 0 0) (om-make-font "Times New Roman" 11 :family "Times New Roman" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 76 32) (om-make-point 336 124) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300 5700 7200 5900 7600 5000) (6300 7800 8900 7000 8000 5700) (6300 7400 5500 6500 6600 7200) (6300 6800 5400 5500 4900 6400) (5100 4900 3800 6800 3500 4600) (6300 5200 5800 4900 6000 4100))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil "")) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010006 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 765 397) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 9) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (quote ((20 1 1 0 nil 0) (20 1 2 0 nil 0) (8 0 7 0 nil 8) (15 2 8 0 nil 8) (17 2 9 0 nil 0) (9 0 10 0 nil 0) (12 0 11 0 nil 0) (21 2 12 0 nil 8) (1 0 15 0 nil 0) (1 0 16 1 nil 0) (2 0 17 0 nil 0) (2 0 18 1 nil 1) (24 1 21 0 nil 8))) nil 6.010006))
