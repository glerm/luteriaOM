; OM File Header - Saved 2014/06/23 18:02:01
; (6.080003 :patc (om-make-point 118 160) (om-make-point 0 0) (om-make-point 430 354) "" 183 0 "2014/04/26 23:02:02" "2014/06/23 18:02:01")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../../bartok/mikrokosmos/Mikrokosmos_101b.mid\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "mikro101" (quote ((om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 681 180) (om-make-point 367 88) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (16 (((2 4) (-1 1 (2 (1 1)))) ((2 4) (1 1)) ((2 4) (1 (3 (1 1 1)))) ((2 4) ((1 (1 1)) (1 (1 1)))) ((2 4) ((2 (1 1)) 1 -1)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2)) ((2 4) (-2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 48 (list (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 19/25 nil 1000 0 (om-make-point 996 451) (om-make-point 0 0) 0 5 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "dragged 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 327 521) (om-make-point 339 90) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (5700) (5900) (6000) (6200) (5700) (5700) (5700) (5900) (6000) (6200) (6100) (6200) (5900))) :lonset (quote (0 250 500 750 1000 1500 2000 2250 2500 2750 3000 3750 4000 4500 4749)) :ldur (quote ((249) (249) (249) (249) (499) (499) (249) (249) (249) (249) (749) (249) (499) (249))) :lvel (quote ((49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "dragged 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 32 509) (om-make-point 292 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6500) (6600) (7100) (6300) (6300) (6300) (6500) (6600) (6800) (6600) (6500) (6300) (6500) (6600) (6500) (6300) (6800) (6600) (6300))) :lonset (quote (0 250 500 750 1250 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5499)) :ldur (quote ((249) (249) (249) (499) (499) (249) (249) (249) (249) (249) (249) (249) (249) (249) (249) (249) (249) (249) (249) (249))) :lvel (quote ((49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 736 463) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "N-CERCLE 3" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 1115 549) (om-make-point 112 126) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 3 5 6 8 11)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 970 582) (om-make-point 111 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 91 23) "(3 5 6 8 11)" :font (om-make-font "DejaVu Sans" 11.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 888 521) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 851 460) (om-make-point 34 32) 12 "12" nil) (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 833 490) nil nil "l" nil 1) (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 1013 327) (om-make-point 243 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 223 23) "(C2 Eb2 E2 F2 F#2 G#2)" :font (om-make-font "DejaVu Sans" 11.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 1122 272) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 899 303) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 872 349) (om-make-point 66 36) nil nil nil 1) (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 773 658) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 740 585) nil nil nil nil 1) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 844 408) (om-make-point 138 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 118 23) "(63 65 66 68 71)" :font (om-make-font "DejaVu Sans" 11.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "FN-NAME" (quote |6-Z10|)))) (om-make-point 1131 164) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 577 645) nil nil nil nil 1) (om-load-editor-box1 "dragged" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 40 377) (om-make-point 277 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (5900) (6000) (6200) (5700) (5700) (5700) (5900) (6000) (6200) (6000) (5900) (5700) (6000) (5900) (5700))) :lonset (quote (0 250 500 750 1250 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4499)) :ldur (quote ((249) (249) (249) (499) (499) (249) (249) (249) (249) (249) (249) (249) (249) (249) (249) (249))) :lvel (quote ((49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "dragged 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 323 381) (om-make-point 289 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800) (5200) (5600) (5400) (5300) (5100) (5200) (5100) (5300) (5400) (5600) (5100))) :lonset (quote (0 1000 1250 1500 1750 2000 3000 3250 3500 3750 4000 4500 4749)) :ldur (quote ((999) (249) (249) (249) (249) (999) (249) (249) (249) (249) (499) (249))) :lvel (quote ((49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 51 140) (om-make-point 610 227) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (5900) (6000) (4800) (6200) (5700) (5200) (5600) (5400) (5300) (5700) (5700) (5900) (6000) (5100) (6200) (6000) (5900) (5700) (5200) (5100) (5300) (5400) (6000) (5900) (5700) (5600) (5100) (6300) (6500) (6600) (6200) (7100) (6300) (6200) (5700) (5900) (6000) (6300) (6300) (6500) (6600) (6200) (5700) (6800) (6600) (6500) (6300) (5700) (5700) (5900) (6000) (6500) (6600) (6500) (6300) (6200) (6100) (6800) (6600) (6300) (6200) (5900) (6100) (6000) (5700) (6000) (6200) (6300) (6100) (6600) (5500) (6100) (6300) (5500) (6000) (5700) (6000) (6100) (6600) (6100) (6400) (5500) (6000) (5500) (5800) (5700) (5400) (5700) (6200) (6300) (5800) (6000) (5200) (5700) (5800) (6000) (5400) (5700) (5200) (6300) (6000) (5800) (5400) (5700) (5600) (5400) (5300) (5700) (6200) (6000) (5900) (5100) (5700) (6200) (5200) (5600) (5400) (5300) (6200) (6000) (5900) (6000) (5100) (5600) (5400) (5700) (6200) (6000) (5300) (5400) (5100) (5900) (6000) (5700) (5600) (5400) (6500) (6400) (6100) (6200) (6500) (6800) (6700) (7000) (5900) (6400) (6500) (7000) (6700) (6100) (6200) (5900) (6300) (6500) (5900) (6200) (5900) (6100) (6800 6900) (6500) (6100) (5700) (6000) (6200) (6600) (6100) (6300) (5700) (5800) (5500) (5800) (6000) (5800) (5700) (5400) (5500) (6300) (5200) (5400) (5800) (6000) (5500) (4500) (5700) (5600) (5400) (5300) (5700) (5700) (5900) (6000) (5600) (5100) (6200) (5700) (5200) (5100) (5300) (5400) (5700) (5900) (6000) (6200) (5600) (5100) (6000) (5900) (5700) (5200) (5300) (5400) (5600) (6200) (6000) (5900) (5700) (5100) (5300) (5500) (6200) (6000) (6000) (5900) (5600) (5100) (5300) (5600) (6000) (5500) (5400) (5700) (5500) (4900) (5700) (5100))) :lonset (quote (250 500 750 1000 2000 2500 3000 3250 3500 3750 4000 4250 4500 4750 5000 6000 6250 6500 6750 7000 7250 7500 7750 8000 8250 8500 9000 9500 10250 10500 10750 11000 12000 12500 13000 13250 13500 13750 14000 14250 14500 14750 15000 15500 16000 16250 16500 16750 17000 17250 17500 17750 18000 18250 18500 18750 19000 19750 20000 20250 20500 21000 21500 22000 23250 23500 23750 24000 24250 24500 24750 25000 26000 26750 27000 27250 27500 27750 28000 28250 28500 28750 29000 29500 29750 30000 31250 31500 31750 32000 32250 32500 32750 33000 33750 34000 34750 35000 35250 35500 36250 36500 36750 37000 38000 39250 39500 39750 40000 40250 40500 40750 41000 42000 42500 43000 43250 43500 43750 44000 44250 44500 44750 45000 45500 45750 46000 46500 46750 47000 47250 47500 48000 48250 48500 49000 49500 50000 51250 51500 51750 52000 52250 52500 52750 53000 53750 54000 54500 54750 55000 55250 55500 56000 56750 57000 57250 57500 57750 58000 58250 58500 59000 59750 60000 60250 60500 60750 61000 61250 61500 62000 62500 62750 63250 63500 63750 64500 65000 65750 66000 66500 67000 67500 68000 69250 69500 69750 70000 70250 70500 70750 71000 71500 72000 72500 73000 73250 73500 73750 74000 74250 74500 74750 75000 75500 76000 76250 76500 77000 77250 77500 77750 78000 78250 78500 78750 79000 79500 79750 80000 80250 80500 80750 81000 81250 81500 81750 82000 82500 83000 84000 85000 85500 86000 87000 88000)) :ldur (quote ((250) (250) (250) (1000) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (1000) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (500) (250) (250) (250) (250) (1000) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (750) (250) (250) (250) (250) (500) (250) (1000) (250) (250) (250) (250) (250) (250) (250) (1000) (750) (250) (250) (250) (250) (250) (250) (250) (250) (250) (500) (250) (250) (1000) (250) (250) (250) (250) (250) (250) (250) (750) (250) (750) (250) (250) (250) (500) (250) (250) (250) (1000) (1000) (250) (250) (250) (250) (250) (250) (250) (1000) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (250) (250) (500) (250) (250) (250) (250) (500) (250) (250) (250) (500) (250) (1000) (250) (250) (250) (250) (250) (250) (250) (750) (250) (500) (250) (250) (250) (250) (500) (750) (250) (250) (250) (250) (250) (250 250) (250) (500) (750) (250) (250) (250) (250) (250) (250) (250) (500) (500) (250) (250) (250) (250) (250) (500) (750) (250) (500) (500) (500) (250) (1000) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (250) (250) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (1000) (1000) (500) (500) (1000) (1000))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 954 342) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil t) (om-load-boxcall (quote genfun) "SEPARATE-CHANNELS" (quote separate-channels) (quote ((om-load-inputfun (quote input-funbox) "an EventMIDI-seq object" "SELF" nil))) (om-make-point 760 83) nil nil nil nil 1) (om-load-editor-box1 "EVENTMIDI-SEQ" (quote eventmidi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of event types" "ltype" nil) (om-load-inputfun (quote input-funbox) "list of dates (ms)" "ldate" nil) (om-load-inputfun (quote input-funbox) "list of track numbers" "lref" nil) (om-load-inputfun (quote input-funbox) "list of output port numbers" "lport" nil) (om-load-inputfun (quote input-funbox) "list of MIDI channels (1-16)" "lchan" nil) (om-load-inputfun (quote input-funbox) "list of event data" "lfields" nil))) (om-make-point 1054 30) (om-make-point 80 70) (let ((newobj (when (find-class (quote eventmidi-seq) nil) (let ((rep (make-instance (quote eventmidi-seq) :ldate (quote (0 0 0 0 0 0 0 0 2 3 6 8 250 499 500 749 750 999 999 1000 1000 1249 1250 1499 1499 1500 1500 1749 1750 1999 1999 2000 2000 2249 2250 2499 2500 2749 2750 2999 2999 3000 3000 3249 3249 3250 3250 3499 3499 3500 3500 3749 3749 3750 3750 3999 3999 4000 4000 4249 4250 4499 4499 4500 4500 4749 4749 5000 5250 5499 5500 5749 5750 5999 5999 6000 6000 6249 6250 6499 6499 6500 6500 6749 6750 6999 6999 7000 7000 7249 7250 7499 7499 7500 7500 7749 7750 7999 7999 8000 8000 8249 8249 8250 8250 8499 8499 8500 8500 8749 8749 8750 8750 8999 8999 9000 9000 9249 9250 9499 9500 9749 9749 9750 9750 9999 9999 10000 10000 10249 10250 10499 10499 10500 10500 10749 10749 11000 11250 11499 11500 11749 11750 11999 11999 12000 12000 12249 12250 12499 12500 12749 12750 12999 12999 13000 13000 13249 13250 13499 13500 13749 13749 13750 13750 13999 13999 14000 14000 14249 14250 14499 14499 14500 14500 14749 14749 14750 14750 14999 14999 15000 15250 15499 15500 15749 15750 15999 15999 16000 16000 16249 16250 16499 16500 16749 16749 16750 16750 16999 16999 17000 17000 17249 17250 17499 17500 17749 17750 17999 17999 18000 18250 18499 18500 18749 18750 18999 18999 19000 19250 19499 19500 19749 19750 19999 19999 20000 20000 20249 20250 20499 20500 20749 20750 20999 20999 21000 21000 21249 21250 21499 21499 21500 21500 21749 21750 21999 21999 22000 22000 22249 22250 22499 22499 22500 22500 22749 22749 22750 22750 22999 22999 23000 23000 23249 23250 23499 23499 23500 23500 23749 23750 23999 23999 24000 24000 24249 24250 24499 24499 24500 24500 24749 24749 25000 25250 25499 25500 25749 25750 25999 25999 26000 26000 26249 26250 26499 26500 26749 26749 26750 26750 26999 26999 27000 27000 27249 27250 27499 27499 27500 27500 27749 27750 27999 27999 28000 28000 28249 28250 28499 28500 28749 28749 28750 28750 28999 28999 29000 29000 29249 29250 29499 29500 29749 29750 29999 29999 30000 30000 30249 30249 30250 30250 30499 30499 30500 30500 30749 30750 30999 30999 31000 31250 31499 31499 31500 31500 31749 31749 31750 31750 31999 31999 32000 32500 32749 32750 32999 32999 33000 33000 33499 33499 33500 33500 33749 33999 34000 34250 34499 34500 34749 34750 34999 34999 35000 35000 35249 35250 35499 35499 35500 35500 35749 35750 35999 35999 36000 36000 36249 36250 36499 36499 36500 36500 36749 36750 36999 36999 37000 37000 37249 37250 37499 37499 37500 37500 37749 37750 37999 37999 38000 38000 38249 38249 38250 38250 38499 38499 38500 38500 38749 38750 38999 38999 39000 39000 39249 39250 39499 39499 39500 39500 39749 39749 39750 39750 39999 39999 40000 40000 40249 40249 40250 40250 40499 40499 40500 40500 40749 40749 40750 40750 40999 40999 41000 41000 41499 41500 41999 41999 42000 42000 42499 42500 42999 42999 43000 43000 43999 43999)) :ltype (quote (:copyright |Unknown:CUE-POINT-MESSAGE| |Unknown:CUE-POINT-MESSAGE| :tempo :timesign :seqname :seqname :keyon :ctrlchange :ctrlchange :ctrlchange :ctrlchange :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyon :keyoff :keyoff :keyon :keyon :keyoff :keyoff)) :lchan (quote (0 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3)) :lref (quote (0 0 0 0 0 1 2 2 1 1 1 1 1 1 1 1 1 1 2 1 2 2 2 1 2 1 2 2 2 1 2 1 2 1 1 1 1 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1 2 2 1 1 1 1 1 1 2 1 2 2 2 1 2 1 2 2 2 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 1 1 1 1 1 1 2 1 2 2 2 2 2 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 1 1 1 1 2 1 2 1 2 1 2 2 2 2 2 1 1 1 2 2 1 1 1 1 1 1 2 1 2 2 2 2 2 1 2 1 2 1 1 1 1 1 1 1 2 1 2 2 2 1 2 1 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 2 2 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 2 1 2 2 2 2 2 1 2 1 2 1 1 1 1 1 2 1 2 1 2 1 2 2 2 1 2 1 2 1 1 1 2 1 2 2 2 2 2 1 2 1 2 1 2 1 2 1 1 1 1 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 2 1 2 2 1 2 1 2 1 2 1 2 2 1 1 2 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 2 2 1 2 1 2 2 2 1 2 1 2 1 1 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 2 1 2 2 2 1 2 1 2 1 2)) :lport (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)) :lfields (quote ((67 111 112 121 114 105 103 104 116 32 40 99 41 32 120 120 120 120 32 67 111 112 121 114 105 103 104 116 32 72 111 108 100 101 114) (67 114 101 97 116 101 100 32 98 121 32 82 111 115 101 103 97 114 100 101 110) (104 116 116 112 58 47 47 119 119 119 46 114 111 115 101 103 97 114 100 101 110 109 117 115 105 99 46 99 111 109 47) (120) (2 2 24 8) (73 109 112 111 114 116 101 100 32 77 73 68 73) (73 109 112 111 114 116 101 100 32 77 73 68 73) (48 49) (7 100) (10 64) (91 30) (93 30) (57 49) (57 127) (59 49) (59 127) (60 49) (60 127) (48 127) (62 49) (52 49) (52 127) (56 49) (62 127) (56 127) (57 49) (54 49) (54 127) (53 49) (57 127) (53 127) (57 49) (51 49) (57 127) (57 49) (57 127) (59 49) (59 127) (60 49) (60 127) (51 127) (62 49) (52 49) (62 127) (52 127) (60 49) (51 49) (60 127) (51 127) (59 49) (53 49) (59 127) (53 127) (57 49) (54 49) (57 127) (54 127) (60 49) (56 49) (60 127) (59 49) (59 127) (56 127) (57 49) (51 49) (57 127) (51 127) (62 49) (63 49) (63 127) (65 49) (65 127) (66 49) (66 127) (62 127) (71 49) (62 49) (62 127) (57 49) (71 127) (57 127) (63 49) (59 49) (59 127) (60 49) (63 127) (60 127) (63 49) (62 49) (63 127) (63 49) (63 127) (62 127) (65 49) (57 49) (65 127) (66 49) (66 127) (57 127) (68 49) (57 49) (68 127) (57 127) (66 49) (57 49) (66 127) (57 127) (65 49) (59 49) (65 127) (59 127) (63 49) (60 49) (63 127) (60 127) (65 49) (62 49) (65 127) (66 49) (66 127) (65 49) (65 127) (62 127) (63 49) (61 49) (63 127) (61 127) (68 49) (62 49) (68 127) (66 49) (66 127) (62 127) (63 49) (59 49) (63 127) (59 127) (61 64) (60 64) (60 127) (57 64) (57 127) (60 64) (61 127) (60 127) (62 64) (55 64) (62 127) (63 64) (63 127) (61 64) (61 127) (66 64) (66 127) (55 127) (61 64) (55 64) (55 127) (60 64) (60 127) (57 64) (61 127) (57 127) (63 64) (60 64) (63 127) (60 127) (61 64) (55 64) (61 127) (66 64) (66 127) (55 127) (61 64) (60 64) (61 127) (60 127) (64 64) (55 64) (64 127) (55 127) (58 64) (57 64) (57 127) (54 64) (54 127) (57 64) (58 127) (57 127) (62 64) (52 64) (62 127) (63 64) (63 127) (58 64) (58 127) (52 127) (60 64) (57 64) (60 127) (57 127) (58 64) (54 64) (54 127) (57 64) (57 127) (52 64) (58 127) (60 64) (60 127) (52 127) (54 64) (63 64) (63 127) (60 64) (60 127) (58 64) (58 127) (54 127) (57 64) (56 64) (56 127) (54 64) (54 127) (53 64) (57 127) (53 127) (57 64) (51 64) (57 127) (62 64) (62 127) (60 64) (60 127) (59 64) (59 127) (51 127) (57 64) (52 64) (52 127) (56 64) (57 127) (56 127) (62 64) (54 64) (54 127) (53 64) (62 127) (53 127) (62 64) (51 64) (62 127) (60 64) (60 127) (51 127) (59 64) (56 64) (59 127) (56 127) (60 64) (54 64) (60 127) (54 127) (57 64) (53 64) (53 127) (54 64) (57 127) (54 127) (62 64) (51 64) (62 127) (60 64) (60 127) (51 127) (59 64) (56 64) (59 127) (60 64) (60 127) (56 127) (57 64) (54 64) (57 127) (54 127) (65 64) (64 64) (64 127) (61 64) (61 127) (62 64) (65 127) (62 127) (65 64) (59 64) (65 127) (68 64) (68 127) (67 64) (67 127) (59 127) (70 64) (64 64) (70 127) (64 127) (65 64) (61 64) (61 127) (62 64) (65 127) (62 127) (70 64) (59 64) (70 127) (67 64) (67 127) (59 127) (63 64) (59 64) (59 127) (62 64) (62 127) (59 64) (63 127) (59 127) (65 64) (61 64) (65 127) (61 127) (68 64) (57 64) (68 127) (65 64) (65 127) (61 64) (57 127) (60 64) (61 127) (60 127) (62 64) (57 64) (62 127) (57 127) (66 64) (58 64) (66 127) (58 127) (61 64) (55 64) (61 127) (63 64) (63 127) (55 127) (58 64) (57 64) (58 127) (57 127) (60 64) (54 64) (60 127) (54 127) (58 64) (55 64) (58 127) (55 127) (52 64) (63 64) (52 127) (54 64) (63 127) (54 127) (58 64) (55 64) (58 127) (55 127) (60 64) (45 64) (45 127) (60 127) (57 64) (56 64) (56 127) (54 64) (54 127) (53 64) (57 127) (53 127) (57 64) (56 64) (57 127) (57 64) (57 127) (56 127) (59 64) (51 64) (59 127) (60 64) (60 127) (51 127) (62 64) (52 64) (52 127) (51 64) (62 127) (51 127) (57 64) (53 64) (53 127) (54 64) (57 127) (54 127) (57 64) (56 64) (57 127) (59 64) (59 127) (56 127) (60 64) (51 64) (60 127) (62 64) (62 127) (51 127) (60 64) (52 64) (60 127) (52 127) (59 64) (53 64) (59 127) (53 127) (57 64) (54 64) (54 127) (56 64) (57 127) (56 127) (62 64) (51 64) (62 127) (60 64) (60 127) (51 127) (59 64) (53 64) (59 127) (53 127) (57 64) (55 64) (57 127) (55 127) (62 64) (56 64) (62 127) (56 127) (60 64) (51 64) (60 127) (51 127) (60 64) (53 64) (60 127) (53 127) (59 64) (56 64) (59 127) (56 127) (60 64) (54 64) (60 127) (55 64) (55 127) (54 127) (57 64) (55 64) (55 127) (49 64) (57 127) (49 127) (57 64) (51 64) (57 127) (51 127)))))) (setf (name rep) "Midi Events sequence") rep)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player deltapict zoom obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems scale)) (list (quote :midishare-rt) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) (quote t) nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "IMPORT-MUSICXML" (quote import-musicxml) (quote nil) (om-make-point 658 46) nil nil nil nil 1) (om-load-editor-box1 "Mikrokosmos_101b.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 104 12) (om-make-point 491 98) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "glerm" "Estudos" "aula_analise2014" "bartok" "mikrokosmos")) :device nil :host nil :name "Mikrokosmos_101b" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Mikrokosmos_101b.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player outport)) (list nil (quote t) (om-make-point 0 0) (om-make-point 876 342) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :midishare-rt) 0)) t nil nil nil))) (quote ((22 0 0 0 nil 0) (4 0 3 2 nil 0) (5 0 4 0 nil 0) (7 0 5 0 nil 0) (14 0 5 1 nil 0) (6 0 7 1 nil 0) (9 0 8 0 nil 0) (12 0 9 0 nil 0) (12 0 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (16 0 13 0 nil 0) (11 0 14 0 nil 0) (2 1 16 0 nil 0) (20 0 21 0 nil 0))) nil 6.080003))
