; OM File Header - Saved 2015/03/05 10:45:05
; (6.080003 :patc (om-make-point 118 360) (om-make-point 50 50) (om-make-point 1022 615) "" 183 0 "2015/01/30 18:12:55" "2015/03/05 10:45:05")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "mikro109" (quote ((om-load-editor-box1 "dragged 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 241 174) (om-make-point 169 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7700) (7200) (7100) (7200) (7700) (7800))) :lonset (quote (0 250 500 750 1000 1250 1500 2999)) :ldur (quote ((249) (249) (249) (249) (249) (249) (1499))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((6) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 200)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100 -100 1000)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 208 325) (om-make-point 207 105) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 200 400 600 800 1000)) (quote (-1 -5 -1 1 5 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 0 490) (om-make-point 434 57) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 414 30) "(-1 -5 -1 1 5 1)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 109 419) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 69 438) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 155 348) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 36 366) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 200)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100 -100 1000)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 677 169) (om-make-point 207 105) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400)) (quote (-1 -5 -1 1 2 4 -4 1 5 1 -1 -5 3 -4 3 -5 -1 3 6 -5 -4 3 -2 5 -2 3 -4 3)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 421 334) (om-make-point 434 57) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 414 30) "(-1 -5 -1 1 2 4 -4 1 5 1 -1 -5 3 -4 3 -5 -1 3 6 -5 -4 3 -2 5 -2 3 -4 3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 578 263) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 538 282) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 624 192) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 505 210) nil nil nil nil 1) (om-load-editor-box1 "dragged" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 462 12) (om-make-point 441 124) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6200) (5700) (5600) (5700) (5900) (6300 5900) (6000) (6500) (6600) (6500) (6000) (6300 5900) (6200) (5700) (5600 5900) (6500) (6000) (5600 5900) (5700) (6200 6000) (6300) (5900) (6200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5500 5750 5999)) :ldur (quote ((249) (249) (249) (249) (249) (249) (1499 249) (249) (249) (249) (249) (249) (249 749) (249) (249) (749 249) (249) (249) (249 499) (249) (249 499) (499) (249) (249))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100 100) (100) (100) (100 100) (100) (100 100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 807 318) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 35 34) (om-make-point 380 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6200) (5700) (5600) (5700) (5900) (6300 5900) (6000) (6500) (6600) (6500) (6000) (6300 5900) (6200) (5700) (5600 5900) (6500) (6000) (5600 5900) (5700) (6200 6000) (6300) (5900) (6200) (7800) (7700) (7200) (7100) (7200) (7700) (5600 7800) (5700) (6200) (6300) (6200) (5700) (5600 7800) (7700) (7200) (5600 7200) (6200 7700) (5700) (5600 7700) (7200) (7100) (5600 7800) (5700 7200) (6200) (6300 7200) (7100) (6200 7200) (5600 7800) (5700 7700) (6300 7100) (6200 7200) (5600 7800) (5700 7700) (5700 7100) (6300) (7200) (6200 7200) (5700 7700) (5700 7700) (5900 8300) (6000 8400) (6500 8900) (6600 9000) (6600 9000) (6600 9000) (6500 8900) (6000 8400) (6600 8900) (6500 8900) (6000 8400) (6600 9000) (5900 8300) (6000 8400) (6500 8900) (6600 9000) (6700 9100) (6600 9000) (6500 8900) (6000 8400) (6600 9000) (6500 8900) (6000 8400) (5900 8300) (8000) (8100) (8600) (8700) (5900) (6000 8700) (6500) (6600 8700) (8600) (6600 8100) (8700) (6600 8600) (6500 8100) (6000 8700) (6600) (6500) (6000 7500) (6600 7400) (6900) (6800) (5900) (6000 6800) (6500) (6600 6800) (6900) (6600 7400) (7500) (6600 7400) (6500 6900) (6000 6800) (5900) (6000 6800) (6500 6900) (6600 7400) (6900) (6600 6800) (5900 7400) (6000 6900) (6500 6800) (6600 7400) (5900 6900) (6000 6800) (6500 7400) (6600 6900) (5900 6800) (6000 7400) (6500 6900) (6600 6800) (7400) (4500 5700) (4600 5800) (5000 6200) (5100 6300) (5100 6300) (5100 6300) (5000 6200) (4600 5800) (5100 6300) (5000 6200) (4600 5800) (5000 6200) (5100 6300) (5000 6200) (4600 5800) (5100 6300) (5000 6200) (4600 5800) (4500 5700) (3300 5700) (3400 5800) (3800 6200) (3900 6300) (3900 6300) (3800 6200) (3400 5800) (3900 6300) (3900 6300) (3400 5800) (3800 6200) (3900 6300) (3400 5800) (3800 6200) (3900 6300) (3800 6200) (3900 6300) (3400 5800) (3300 5700) (3400 5800) (3800 6200) (3800 6200) (3800 6200) (5700) (5600) (5700) (6200) (6300) (6200) (7200) (7100) (7200 5700) (7700) (7800) (7700 5700) (7200 5700) (5600) (7200 5700) (6200) (6300) (7200 6200) (6700) (6600) (6700 5700) (7200) (7300) (6200 7200 5700) (6700 5700) (5600) (5700 6700 5700) (5200) (5100) (5700 6500) (6200 6000) (6300) (6200 6000) (5700 6200) (6000) (5700 6500) (5600) (5700) (6200 6600) (6300) (6500) (5600 6300 7100 7800) (5700 6200 7200 7700) (4200 9200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5500 5750 6000 6250 6500 6750 7000 7250 7500 7750 8000 8250 8500 8750 9000 9250 9500 9750 10000 10250 10500 10750 11000 11250 11500 11750 12000 12250 12500 12750 13000 13250 13500 13750 14000 14250 14500 14750 15000 15500 15750 17750 18000 18250 18500 19000 19500 19750 20000 20250 20500 20750 21000 21750 22000 22250 22500 23000 23500 23750 24000 24250 24500 24750 25000 25750 26000 26250 26500 26750 27000 27250 27500 27750 28000 28250 28500 28750 29000 29250 29500 29750 30000 30250 30500 30750 31000 31250 31500 31750 32000 32250 32500 32750 33000 33250 33500 33750 34000 34250 34500 34750 35000 35250 35500 35750 36000 36250 36500 36750 37000 37250 37500 38000 39750 40000 40250 40500 41000 41500 42000 42250 42500 42750 43000 43500 43750 44000 44250 44500 44750 45000 45250 45750 46000 46250 46500 47000 47500 47750 48000 48500 48750 49000 49250 49500 49750 50000 50250 50750 51000 51250 51500 51750 52500 54500 54750 55000 55250 55500 55750 56000 56250 56500 56750 57000 57250 57500 57750 58000 58250 58500 58750 59000 59250 59500 59750 60000 60250 60500 60750 61000 61250 61500 61750 62000 62250 62500 62750 63000 63250 63500 63750 64000 64250 65000 65750 67250 68000 69500 72499)) :ldur (quote ((249) (249) (249) (249) (249) (249) (1499 249) (249) (249) (249) (249) (249) (249 749) (249) (249) (749 249) (249) (249) (249 499) (249) (249 499) (499) (249) (249) (249) (249) (249) (249) (249) (249) (249 1499) (249) (249) (249) (249) (249) (749 249) (249) (249) (249 249) (249 499) (249) (749 249) (249) (249) (249 249) (249 499) (249) (499 249) (249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 499) (499) (249) (499 499) (249 249) (749 749) (249 249) (249 249) (249 249) (499 499) (499 499) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (499 499) (249 249) (249 249) (249 249) (499 499) (499 499) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (499 499) (249) (249) (249) (499) (249) (249 499) (249) (499 249) (249) (499 249) (249) (249 249) (249 249) (249 499) (249) (249) (249 249) (499 249) (249) (499) (249) (249 499) (249) (499 249) (249) (499 249) (249) (249 249) (249 249) (249 499) (249) (249 249) (249 249) (499 249) (249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (749 499) (249) (249 249) (249 249) (249 249) (499 499) (499 499) (499 499) (249 249) (249 249) (249 249) (249 249) (499 499) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (499 499) (499 499) (249 249) (249 249) (499 499) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (249 249) (749 749) (1999 1999) (7499 5999) (249) (249) (249) (249) (249) (749) (249) (249) (249 749) (249) (249) (249 249) (499 249) (249) (749 249) (249) (249) (249 749) (249) (249) (249 749) (249) (249) (749 249 249) (499 249) (249) (749 749 249) (249) (249) (249 249) (249 499) (249) (249 249) (499 249) (249) (249 749) (249) (249) (749 1499) (1499) (749) (749 749 749 749) (4499 4499 4499 4499) (499 499))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1 1) (1 1) (1) (1 1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1 1 1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 20 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 718 429) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (quote ((4 0 1 2 nil 0) (4 0 2 0 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (0 1 5 0 nil 0) (5 0 6 0 nil 0) (10 0 7 2 nil 0) (10 0 8 0 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0) (13 1 11 0 nil 0) (11 0 12 0 nil 0))) nil 6.080003))