; OM File Header - Saved 2015/02/21 1:35:20
; (6.080003 :patc (om-make-point 242 409) (om-make-point 0 31) (om-make-point 1364 612) "" 183 0 "2015/02/20 22:19:47" "2015/02/21 1:35:20")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "todas_triades" (quote ((om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 736 471) (om-make-point 27 32) 3 "3" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 726 501) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1 5" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 768 476) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 6 15 11)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 335 275) (om-make-point 0 0))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 559 471) (om-make-point 27 32) 3 "3" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 549 501) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1 4" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 591 476) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 3 12 8)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 335 275) (om-make-point 0 0))) t nil nil nil) (om-load-editor-box1 "N-CERCLE1 3" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 419 466) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 9 5)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-boxcall (quote genfun) "INV" (quote inv) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "SET" (list 0 1 2 7)))) (om-make-point 377 471) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 154 461) (om-make-point 34 32) 10 "10" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 177 497) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 243 452) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-editor-box1 "TEXT-VIEW 5" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 682 219) (om-make-point 95 246) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 83 217) "untitled"))) (om-set-dialog-item-text rep "(1 1 10)
(1 2 9)
(1 3 8)
(1 4 7)
(1 5 6)
(2 2 8)
(2 3 7)
(2 4 6)
(2 5 5)
(3 3 6)
(3 4 5)
(4 4 4)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 496 86) (om-make-point 51 32) (quote :pitch) ":pitch" nil) (om-load-boxcall (quote genfun) "PC-SET 3" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :pitch) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 506 134) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 668 119) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 792 99) (om-make-point 34 32) 12 "12" nil) (om-load-boxcall (quote genfun) "N-STRUCTURE" (quote n-structure) (quote ((om-load-inputfun (quote input-funbox) "values" "L" (list 5 7 9)) (om-load-inputfun (quote input-funbox) "n" "N" 12))) (om-make-point 724 94) nil nil "l" nil 1) (om-load-editor-box1 "TEXT-VIEW 4" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 583 221) (om-make-point 95 241) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 83 212) "untitled"))) (om-set-dialog-item-text rep "(2 1 0 0 0 0)
(1 1 1 0 0 0)
(1 0 1 1 0 0)
(1 0 0 1 1 0)
(1 0 0 0 1 1)
(0 2 0 1 0 0)
(0 1 1 0 1 0)
(0 1 0 1 0 1)
(0 1 0 0 2 0)
(0 0 2 0 0 1)
(0 0 1 1 1 0)
(0 0 0 3 0 0)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 573 80) (om-make-point 60 32) (quote :vector) ":vector" nil) (om-load-editor-box1 "TEXT-VIEW 3" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 497 216) (om-make-point 84 245) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 72 216) "untitled"))) (om-set-dialog-item-text rep "(c c# d)
(c c# d#)
(c c# e)
(c c# f)
(c c# f#)
(c d e)
(c d f)
(c d f#)
(c d g)
(c d# f#)
(c d# g)
(c e g#)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 2" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :vector) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 594 143) nil nil nil nil 1) (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 429 219) (om-make-point 67 234) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 55 205) "untitled"))) (om-set-dialog-item-text rep "(0 1 2)
(0 1 3)
(0 1 4)
(0 1 5)
(0 1 6)
(0 2 4)
(0 2 5)
(0 2 6)
(0 2 7)
(0 3 6)
(0 3 7)
(0 4 8)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 101 196) (om-make-point 64 32) (quote :integer) ":integer" nil) (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 380 219) (om-make-point 47 236) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 35 207) "untitled"))) (om-set-dialog-item-text rep "3-1
3-2
3-3
3-4
3-5
3-6
3-7
3-8
3-9
3-10
3-11
3-12
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 224 100) (om-make-point 27 32) 3 "3" nil) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 150 314) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2) (list 0 1 3) (list 0 1 4) (list 0 1 5) (list 0 1 6) (list 0 2 4) (list 0 2 5) (list 0 2 6) (list 0 2 7) (list 0 3 6) (list 0 3 7) (list 0 4 8)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 183 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DN-ORBITES" (quote dn-orbites) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 3))) (om-make-point 158 83) nil nil nil nil 1))) (quote ((5 2 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 2 nil 0) (6 2 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 2 nil 0) (7 0 6 2 nil 0) (10 2 7 1 nil 0) (8 0 9 0 nil 0) (25 2 9 1 nil 0) (9 0 10 2 nil 0) (14 0 11 0 nil 0) (12 0 13 0 nil 3) (27 0 13 1 nil 3) (16 0 14 0 nil 0) (26 0 14 1 nil 0) (15 0 16 1 nil 0) (20 0 17 0 nil 5) (13 0 19 0 nil 3) (18 0 20 0 nil 5) (27 0 20 1 nil 5) (26 0 21 0 ((om-make-point 202 306) (om-make-point 405 208) (om-make-point 414 138) (om-make-point 508 136) (om-make-point 463 219)) 1) (27 0 23 0 nil 2) (26 0 25 2 nil 0) (22 0 26 0 nil 0) (27 0 26 1 nil 0) (24 0 27 0 nil 0))) nil 6.080003))