; OM File Header - Saved 2014/12/11 0:03:58
; (6.080003 :patc (om-make-point 118 160) (om-make-point 336 31) (om-make-point 935 635) "" 183 0 "2014/11/05 19:20:16" "2014/12/11 0:03:58")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "nomenclaturas" (quote ((om-load-boxcall (quote abstraction) "base_C4" (om-load-patch-abs1 "base_C4" (quote ((om-load-boxout "output" 0 (om-make-point 23 170) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 124 91) (om-make-point 48 32) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 63 124) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 90 52) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 36 108) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0))) 6.080003 nil "" (om-make-point 0 31) (om-make-point 500 346)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 174 257) nil (list (list (list 6400 7200 7900))) nil "base_C4") (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 380 178) (om-make-point 459 77) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 439 50) "((0 3 7) (3 12 19) (3 7 12)(0 4 7) (4 12 19) (4 7 12))" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "MULTI-ITEM-LIST" (quote multi-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres" "cuatro")))) (om-make-point 233 22) (om-make-point 83 233) (let ((rep (om-make-dialog-item (quote multi-item-list) (om-make-point 1 1) (om-make-point 67 200) "untitled" :range (quote ("(0 3 7)" "(3 12 19)" "(3 7 12)" "(0 4 7)" "(4 12 19)" "(4 7 12)"))))) (om-set-selected-item-index rep (quote (4))) (setf (di-data rep) (quote ((0 3 7) (3 12 19) (3 7 12) (0 4 7) (4 12 19) (4 7 12)))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 264 461) (om-make-point 237 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400 7200 7900))) :lonset (quote (0 1000)) :ldur (quote ((1000 1000 1000))) :lvel (quote ((100 100 100))) :loffset (quote ((0 0 0))) :lchan (quote ((1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (0 0 3 1 nil 0))) nil 6.080003))