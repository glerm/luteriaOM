; OM File Header - Saved 2014/12/14 11:29:15
; (6.080003 :patc (om-make-point 172 10) (om-make-point 50 50) (om-make-point 809 575) "" 183 0 "2014/12/14 11:17:15" "2014/12/14 11:29:15")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 215 463) nil nil nil nil 1) (om-load-boxcall (quote genfun) "N->MC" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "STRS" (list "C3")))) (om-make-point 279 129) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 143 24) (om-make-point 2464 32) (list (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b5) (quote b3) (quote c0) (quote a1) (quote a2) (quote c0) (quote b1) (quote b3) (quote b3) (quote a2) (quote a1) (quote c0) (quote c0) (quote b2) (quote b1) (quote c0)) "( B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B5 B3 C0 A1 A2 C0 B1 B3 B3 A2 A1 C0 C0 B2 B1 C0 )" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 108 234) (om-make-point 1339 207) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (9500) (7100) (2400) (4500) (5700) (2400) (4700) (7100) (7100) (5700) (4500) (2400) (2400) (5900) (4700) (2400))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15000 15200 15400 15600 15800 16000 16200 16400 16600 16800 17000 17200 17400 17600 17800 18000 18200 18400 18600 18800 19000 19200 19400 19600 19800 20000 20200 20400 20600 20800 21000 21200 21400 21600 21800 22000 22200 22400 22600 22800 23000 23200 23400 23600 23800 24000 24200 24400 24600 24800 25000 25200 25400 26400)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 719 469) 0 1000 nil 1 (quote :jackmidi) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil))) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (1 0 3 1 nil 0))) nil 6.080003))