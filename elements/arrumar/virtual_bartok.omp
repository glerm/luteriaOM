; OM File Header - Saved 2015/02/28 17:47:09
; (6.080003 :patc (om-make-point 74 150) (om-make-point 0 31) (om-make-point 1364 585) "No documentation " 183 0 "2015/02/21 13:23:09" "2015/02/28 17:47:09")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../mestrado_glerm/mikrokosmos/midi/mikro117.mid\""))
(in-package :om)(load-lib-for (quote ("LZ")))(setf *om-current-persistent* (om-load-patch1 "virtual_bartok" (quote ((om-load-editor-box1 "CHORD-SEQ 9" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 552 289) (om-make-point 187 95) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800 6300) (6400) (6100 7300) (5600) (6100 7600) (6200 7400) (6900 6600) (7100 6800))) :lonset (quote (0 242 462 909 1378 1825 2303 2537 2757)) :ldur (quote ((909 462) (667) (916 1363) (916) (447 925) (932 932) (234 454) (220 220))) :lvel (quote ((71 81) (125) (125 125) (125) (125 125) (125 125) (120 112) (125 125))) :loffset (quote ((0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode player cursor-mode)) (list nil nil (quote t) (om-make-point 0 0) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 1 (quote :midishare) (quote :normal))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "no comment") "" (om-make-point 361 157) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "dragged" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1142 36) (om-make-point 135 129) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8500 7300 5700 4500) (5000) (7900 6700 5600 4400) (8100 6900 5700 4500) (7000 5000) (7100) (8400 7200 5600 4400) (5000))) :lonset (quote (0 144 288 432 576 648 720 864 2304)) :ldur (quote ((288 288 144 144) (144) (144 144 144 144) (144 144 144 144) (72 144) (72) (1584 1584 144 144) (144))) :lvel (quote ((94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (94 85) (94) (94 94 85 85) (85))) :loffset (quote ((0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0))) :lchan (quote ((1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :jackmidi) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 8" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 508 55) (om-make-point 148 64) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800 5200) (6400 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6900) (6800 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6900) (6800 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6900) (6800 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6900) (6800 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6900) (6800 5900) (6600))) :lonset (quote (0 433 648 863 1296 1511 1726 2159 2374 2589 2804 3237 3452 3667 4100 4315 4530 4963 5178 5393 5608 6041 6256 6471 6904 7119 7334 7767 7982 8197 8412 8845 9060 9275 9708 9923 10138 10571 10786 11001 11216 11649 11864 12079 12512 12727 12942 13375 13590 13805 14020)) :ldur (quote ((433 433) (215 430) (215) (433 433) (215 430) (215) (433 648) (215) (215 430) (215) (433 433) (215 430) (215) (433 433) (215 430) (215) (433 648) (215) (215 430) (215) (433 433) (215 430) (215) (433 433) (215 430) (215) (433 648) (215) (215 430) (215) (433 433) (215 430) (215) (433 433) (215 430) (215) (433 648) (215) (215 430) (215) (433 433) (215 430) (215) (433 433) (215 430) (215) (433 648) (215) (215 430) (215))) :lvel (quote ((80 80) (62 62) (80) (62 62) (62 62) (62) (62 62) (66) (80 80) (80) (62 62) (80 80) (62) (80 80) (62 62) (62) (80 80) (66) (62 62) (62) (62 62) (62 62) (62) (62 62) (62 62) (66) (80 80) (66) (62 62) (62) (62 62) (62 62) (62) (80 80) (62 62) (66) (80 80) (66) (80 80) (62) (80 80) (62 62) (80) (62 62) (62 62) (66) (62 62) (66) (86 86) (62))) :loffset (quote ((0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0))) :lchan (quote ((1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems player)) (list nil nil 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) (quote :midishare))) nil nil nil t) (om-load-editor-box1 "CHORD-SEQ 7" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 987 365) (om-make-point 124 156) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (7600 6400 5600 4400) (5000) (8100 6900 5700 4500) (5000) (8300 7100 5600 4400) (8500 7300 5700 4500) (5000) (7900 6700 5600 4400) (8100 6900 5700 4500) (7000 5000) (7100) (8400 7200 5600 4400) (5000) (5700 4500) (5000) (5600 4400) (5700 4500) (5000) (7600 6400 5600 4400) (5000) (8100 6900 5700 4500) (5000) (8300 7100 5600 4400) (8500 7300 5700 4500) (5000) (7900 6700 5600 4400) (8100 6900 5700 4500) (7000 5000) (7100) (8400 7200 5600 4400) (5000))) :lonset (quote (0 145 289 433 577 722 866 1010 1154 1298 1442 1515 1587 1731 1875 2019 2164 2308 2453 2597 2742 2886 3030 3175 3320 3464 3608 3752 3896 3969 4041 4185 4329)) :ldur (quote ((145) (288 288 144 144) (144) (289 289 144 144) (145) (144 144 144 144) (144 144 144 144) (144) (144 144 144 144) (144 144 144 144) (73 145) (72) (866 866 144 144) (144) (144 144) (145) (144 144) (145 145) (144) (289 289 145 145) (144) (289 289 144 144) (145) (145 145 145 145) (144 144 144 144) (144) (144 144 144 144) (144 144 144 144) (73 145) (72) (288 288 144 144) (144))) :lvel (quote ((56) (94 94 85 85) (85) (94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (94 85) (94) (94 94 85 85) (85) (85 85) (85) (85 85) (85 85) (85) (94 94 85 85) (85) (94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (94 85) (94) (94 94 85 85) (85))) :loffset (quote ((0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0))) :lchan (quote ((1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode player)) (list nil nil (quote t) 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 (om-make-point 500 280) (om-make-point 0 0) 0 0 (quote :midishare))) nil nil nil nil) (om-load-editor-box1 "CHORD-SEQ 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 728 425) (om-make-point 194 81) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100 5200) (6900) (6800 5900) (6600) (6800 5200) (6400 5900) (6600) (6800 5200) (6400 5900) (7100 5200) (6900) (6800 5900) (6600) (6800 5200) (6400 5900) (6600))) :lonset (quote (0 217 435 653 870 1304 1522 1739 2174 2608 2826 3044 3261 3479 3914 4127 4345)) :ldur (quote ((217 870) (218) (218 435) (217) (434 869) (218 435) (217) (435 869) (434 434) (218 871) (218) (217 435) (218) (435 866) (213 431) (218))) :lvel (quote ((62 62) (62) (80 80) (80) (62 62) (62 62) (62) (62 62) (62 62) (80 80) (62) (62 62) (62) (62 62) (62 62) (80))) :loffset (quote ((0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0))) :lchan (quote ((1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode player cursor-mode)) (list nil nil (quote t) (om-make-point 0 0) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 0 (quote :midishare) (quote :normal))) nil nil nil t) (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 768 343) (om-make-point 133 74) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7100 5200) (7300) (7400 5900) (7300) (7100 5200) (7300) (7100 5900) (6900) (6800 5200) (6600) (6800 5900) (6400 5200) (6600) (6800 5900) (6600))) :lonset (quote (0 204 639 856 1074 1291 1726 1943 2161 2378 2578 2778 3170 3362 3555 3744 3961)) :ldur (quote ((204) (435 1087) (217) (218 435) (217) (435 1087) (217) (218 435) (217) (200 792) (200) (392 392) (192 791) (193) (189 406) (217))) :lvel (quote ((70) (80 80) (80) (80 80) (80) (80 80) (80) (80 80) (80) (70 70) (74) (74 74) (78 78) (78) (78 78) (80))) :loffset (quote ((0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0))) :lchan (quote ((1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode player cursor-mode)) (list nil nil (quote t) (om-make-point 0 0) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 0 (quote :midishare) (quote :normal))) nil nil nil t) (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 772 222) (om-make-point 201 84) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900 6500) (6600 7400) (6900) (6800) (7400 5900) (6000 6900) (6500 6800) (7400 6600) (6900 5900) (6800 6000) (6500 7400) (6900 6600) (5900 6800) (7400 6000) (6500 6900) (6800 6600))) :lonset (quote (0 183 383 570 758 925 1112 1291 1462 1645 1825 2008 2179 2354 2533 2725 3154)) :ldur (quote ((183 183) (575 387) (187) (188) (354 167) (187 366) (179 179) (354 171) (183 183) (180 180) (183 183) (346 171) (175 175) (179 179) (621 192) (429 429))) :lvel (quote ((85 80) (101 79) (79) (75) (74 59) (57 69) (71 86) (81 95) (82 66) (92 80) (77 78) (82 102) (79 99) (91 81) (83 82) (103 103))) :loffset (quote ((0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode player cursor-mode)) (list nil nil (quote t) (om-make-point 0 0) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 0 (quote :midishare) (quote :normal))) nil nil nil t) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 759 73) (om-make-point 245 115) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900 6400 6000) (4800 4500 4000) (5000 4700 4100) (6700 6200 5900 5200 4800 4300) (6900 6400 6000) (4800 4500 4000) (5000 4700 4100) (6700 6200 5900 5200 4800 4300) (6900 6400 6000) (6900 6400 6000 4800 4500 4000) (6900 6400 6000 5000 4700 4100) (6700 6200 5900 5200 4800 4300) (6900 6400 6000) (4800 4500 4000) (5000 4700 4100) (6700 6200 5900 5200 4800 4300))) :lonset (quote (0 228 455 682 909 1137 1365 1592 1819 2047 2274 2510 2737 2965 3193 3420 3647)) :ldur (quote ((682 682 682) (227 227 227) (227 227 227) (227 227 227 227 227 227) (683 683 683) (228 228 228) (227 227 227) (227 227 227 227 227 227) (228 228 228) (227 227 227 227 227 227) (236 236 236 236 236 236) (227 227 227 227 227 227) (683 683 683) (228 228 228) (227 227 227) (227 227 227 227 227 227))) :lvel (quote ((78 78 78) (78 78 78) (78 78 78) (78 78 78 78 78 78) (78 78 78) (78 78 78) (78 78 78) (78 78 78 78 78 78) (78 78 78) (78 78 78 78 78 78) (78 78 78 78 78 78) (78 78 78 78 78 78) (78 78 78) (78 78 78) (78 78 78) (78 78 78 78 78 78))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode player cursor-mode)) (list nil nil (quote t) (om-make-point 0 0) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 0 (quote :midishare) (quote :normal))) nil nil nil t) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 551 176) (om-make-point 166 100) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700 6200 5900 5200 4800 4300) (7400 6900 6500) (7200 6700 6400 5500 5200 4700) (7400 6900 6500 5700 5300 4800) (7600 7100 6700 5900 5500 5000) (6000 5700 5200) (7600 7100 6700 5900 5500 5000) (7700 7200 6900 6000 5700 5200) (7900 7400 7100 6200 5900 5300) (8100 7600 7200) (7900 7400 7100 6200 5900 5300) (6400 6000 5500) (7900 7400 7100 6200 5900 5300) (7700 7200 6900) (7900 7400 7100 6200 5900 5300) (6000 5700 5200))) :lonset (quote (0 227 483 710 937 1164 1392 1619 1846 2073 2301 2528 2755 2983 3210 3437 3664)) :ldur (quote ((227 227 227 227 227 227) (256 256 256) (227 227 227 227 227 227) (227 227 227 227 227 227) (227 227 227 227 227 227) (228 228 228) (227 227 227 227 227 227) (227 227 227 227 227 227) (227 227 227 227 227 227) (228 228 228) (227 227 227 227 227 227) (227 227 227) (228 228 228 228 228 228) (227 227 227) (227 227 227 227 227 227) (227 227 227))) :lvel (quote ((78 78 78 78 78 78) (78 78 78) (78 78 78 78 78 78) (78 78 78 78 78 78) (78 78 78 78 78 78) (78 78 78) (78 78 78 78 78 78) (78 78 78 78 78 78) (78 78 78 78 78 78) (78 78 78) (78 78 78 78 78 78) (78 78 78) (78 78 78 78 78 78) (78 78 78) (78 78 78 78 78 78) (78 78 78))) :loffset (quote ((0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode player cursor-mode)) (list nil nil (quote t) (om-make-point 0 0) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 0 (quote :midishare) (quote :normal))) nil nil nil t) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" 10) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 0))) (om-make-point 43 117) nil nil nil nil 1) (om-load-editor-box1 "mikro117.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 180 9) (om-make-point 127 84) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "lucida" "mestrado_glerm" "mikrokosmos" "midi")) :device nil :host nil :name "mikro117" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "mikro117.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode player)) (list nil nil (quote t) (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 0 (quote :midishare))) t nil nil t) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 220 200) (om-make-point 27 32) 8 "8" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 271 204) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 251 173) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 131 159) (om-make-point 34 32) 10 "10" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 109 437) (om-make-point 548 112) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800 6300) (6400) (6100 7300) (5600) (6100 7600) (6200 7400) (6900 6600) (7100 6800))) :lonset (quote (0 242 462 909 1378 1825 2303 2537 2757)) :ldur (quote ((909 462) (667) (916 1363) (916) (447 925) (932 932) (234 454) (220 220))) :lvel (quote ((71 81) (125) (125 125) (125) (125 125) (125 125) (120 112) (125 125))) :loffset (quote ((0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode player cursor-mode)) (list nil nil (quote t) (om-make-point 0 0) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 1 (quote :midishare) (quote :normal))) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil))) (om-make-point 196 305) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINCOMPLEX" 0))) (om-make-point 214 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote newpitch_durationoldpitchvelocity_last) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 87 189) nil nil nil nil 2))) (quote ((11 0 10 0 nil 0) (17 0 16 0 nil 0) (18 0 17 0 nil 0) (19 0 18 0 nil 0) (12 0 18 2 nil 0) (14 0 18 4 nil 0) (13 0 18 5 nil 0) (10 0 19 0 nil 0) (15 0 19 1 nil 0))) nil 6.080003))