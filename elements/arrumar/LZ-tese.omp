; OM File Header - Saved 2015/03/09 11:59:42
; (6.080003 :patc (om-make-point 229 25) (om-make-point 50 50) (om-make-point 849 541) "No documentation " 183 0 "2015/03/05 16:41:54" "2015/03/09 11:59:42")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../mestrado_glerm/mikrokosmos/midi/mikro113.mid\""))
(in-package :om)(load-lib-for (quote ("LZ")))(setf *om-current-persistent* (om-load-patch1 "LZ-tese" (quote ((om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 868 24) (om-make-point 190 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (5700) (5000) (5600) (6500 5700) (5000) (6400 5600) (5000) (6900 5700) (5000) (7100 5600) (6900 5700) (5000) (7400 5600))) :lonset (quote (0 144 289 434 578 722 867 1011 1155 1299 1443 1588 1733 1877 2021)) :ldur (quote ((144) (145) (145) (144) (289 144) (145) (288 144) (144) (288 144) (144) (145 145) (145 145) (144) (144 144))) :lvel (quote ((100) (100) (100) (100) (100 100) (100) (100 100) (100) (100 100) (100) (100 100) (100 100) (100) (100 100))) :loffset (quote ((0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0))) :lchan (quote ((1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems player)) (list nil nil 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) (quote :midishare))) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 654 9) (om-make-point 190 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (6900 5700) (5000) (6400 5600) (6500 5700) (5000) (6200 5600) (5000) (5700) (5000) (5600) (5700) (5000) (5600))) :lonset (quote (0 144 289 433 577 721 866 1010 1154 1298 1442 1586 1730 1874 2019)) :ldur (quote ((144) (289 145) (144) (144 144) (144 144) (145) (1153 144) (144) (144) (144) (144) (144) (144) (145))) :lvel (quote ((100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems player)) (list nil nil 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 86 233) (om-make-point 34 32) 18 "18" nil) (om-load-boxcomment "comment" (om-make-point 484 46) (quote "<<<<<< If you try severa generation from a same LZ analysis, you can lock this box.$But please note that SAVING OR COPYING A LOCKED LZIFY BOX WILL REQUIRE A LOT OF TIME.") "" (om-make-point 703 281) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 324 77) (quote "Here is the minimum desired complexity.$Higher is this number, less repetitive is the generated sequence.$Try several numbers.") "" (om-make-point 743 359) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 155 277) (om-make-point 34 32) 12 "12" nil) (om-load-boxcomment "comment" (om-make-point 201 46) (quote "Minimum past (see previous example).") "" (om-make-point 726 318) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 127 233) (om-make-point 20 28) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 331 47) (quote "If you want the generated sequence to look more like the original, you can try to increase the number of iterations.") "" (om-make-point 747 233) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 245 114) (om-make-point 34 32) 12 "12" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 8 475) (om-make-point 190 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900 5700) (5000) (7100 5600) (7300 5700) (5000) (7100 5600) (5000) (6900 5700) (5000) (6400 5600) (6500 5700) (5000) (6200 5600) (5000) (5700) (5000) (5600) (5700))) :lonset (quote (0 144 288 433 577 721 865 1010 1154 1298 1442 1586 1731 1875 2019 2163 2307 2452 2596)) :ldur (quote ((288 144) (144) (145 145) (144 144) (144) (289 144) (145) (288 144) (144) (144 144) (144 144) (145) (865 144) (144) (144) (144) (145) (144))) :lvel (quote ((82 68) (56) (82 56) (82 68) (56) (82 68) (56) (82 68) (56) (82 56) (82 68) (56) (82 68) (56) (68) (56) (56) (68))) :loffset (quote ((0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0))) :lchan (quote ((1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems player)) (list nil nil 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet$$sequence" "CROSS" nil))) (om-make-point 37 400) (om-make-point 95 60) nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINCOMPLEX" 0))) (om-make-point 71 300) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitchduration_velocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 178 179) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" nil) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 0))) (om-make-point 107 83) nil nil nil nil 1) (om-load-editor-box1 "mikro113.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 208 8) (om-make-point 131 74) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "lucida" "mestrado_glerm" "mikrokosmos" "midi")) :device nil :host nil :name "mikro113" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "mikro113.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos show-stems player)) (list nil nil 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 (om-make-point 500 280) (om-make-point -4 80) (quote t) (quote :midishare))) t nil nil nil))) (quote ((11 0 10 0 nil 1) (12 0 11 0 nil 1) (13 0 12 0 nil 1) (2 0 12 2 nil 0) (5 0 12 5 nil 0) (14 0 13 0 nil 1) (9 0 13 1 nil 0) (15 0 14 0 nil 0))) nil 6.080003))