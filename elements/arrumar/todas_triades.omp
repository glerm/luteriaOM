; OM File Header - Saved 2015/02/22 17:18:32
; (6.080003 :patc (om-make-point 242 409) (om-make-point 0 31) (om-make-point 1364 612) "" 183 0 "2015/02/20 22:19:47" "2015/02/22 17:18:32")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "todas_triades" (quote ((om-load-boxcomment "comment 5" (om-make-point 52 58) (quote "E)") nil (om-make-point 887 333) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 37.33203125D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 52 58) (quote "C)") nil (om-make-point 365 275) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 37.33203125D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 52 58) (quote "D)") nil (om-make-point 242 515) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 37.33203125D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 52 58) (quote "B)") nil (om-make-point 104 261) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 37.33203125D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 52 58) (quote "A)") nil (om-make-point 103 31) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 37.33203125D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 400)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 807 472) (om-make-point 153 89) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6300 6700) (6000 6900 6500) (6000 6400 6700))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :jackmidi) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "C2CHORD-SEQ" (quote c2chord-seq) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 809 389) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 720 503) nil nil nil nil 1) (om-load-boxcall (quote genfun) "P-FORM" (quote p-form) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "SET" (list 3 9 6 5 0)))) (om-make-point 459 427) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1 5" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 513 426) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 4 7)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-editor-box1 "N-CERCLE1 4" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 830 202) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7) (list 0 9 5) (list 0 4 7)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-editor-box1 "N-CERCLE1 3" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 320 430) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 9 5)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-boxcall (quote genfun) "INV" (quote inv) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "SET" (list 0 1 2 7)))) (om-make-point 251 438) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 106 348) (om-make-point 34 32) 10 "10" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 129 384) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 116 442) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 7)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-editor-box1 "TEXT-VIEW 5" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 728 174) (om-make-point 67 239) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 55 210) "untitled"))) (om-set-dialog-item-text rep "(1 1 10)
(1 2 9)
(1 3 8)
(1 4 7)
(1 5 6)
(2 2 8)
(2 3 7)
(2 4 6)
(2 5 5)
(3 3 6)
(3 4 5)
(4 4 4)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 452 78) (om-make-point 51 32) (quote :pitch) ":pitch" nil) (om-load-boxcall (quote genfun) "PC-SET 3" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :pitch) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 513 73) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 644 58) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 750 26) (om-make-point 34 32) 12 "12" nil) (om-load-boxcall (quote genfun) "N-STRUCTURE" (quote n-structure) (quote ((om-load-inputfun (quote input-funbox) "values" "L" (list 5 7 9)) (om-load-inputfun (quote input-funbox) "n" "N" 12))) (om-make-point 689 40) nil nil "l" nil 1) (om-load-editor-box1 "TEXT-VIEW 4" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 629 174) (om-make-point 95 241) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 83 212) "untitled"))) (om-set-dialog-item-text rep "(2 1 0 0 0 0)
(1 1 1 0 0 0)
(1 0 1 1 0 0)
(1 0 0 1 1 0)
(1 0 0 0 1 1)
(0 2 0 1 0 0)
(0 1 1 0 1 0)
(0 1 0 1 0 1)
(0 1 0 0 2 0)
(0 0 2 0 0 1)
(0 0 1 1 1 0)
(0 0 0 3 0 0)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 560 49) (om-make-point 60 32) (quote :vector) ":vector" nil) (om-load-editor-box1 "TEXT-VIEW 3" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 543 173) (om-make-point 84 240) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 72 211) "untitled"))) (om-set-dialog-item-text rep "(c c# d)
(c c# d#)
(c c# e)
(c c# f)
(c c# f#)
(c d e)
(c d f)
(c d f#)
(c d g)
(c d# f#)
(c d# g)
(c e g#)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET 2" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :vector) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 601 82) nil nil nil nil 1) (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 475 173) (om-make-point 67 234) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 55 205) "untitled"))) (om-set-dialog-item-text rep "(0 1 2)
(0 1 3)
(0 1 4)
(0 1 5)
(0 1 6)
(0 2 4)
(0 2 5)
(0 2 6)
(0 2 7)
(0 3 6)
(0 3 7)
(0 4 8)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 108 135) (om-make-point 64 32) (quote :integer) ":integer" nil) (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 426 173) (om-make-point 47 236) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 35 207) "untitled"))) (om-set-dialog-item-text rep "3-1
3-2
3-3
3-4
3-5
3-6
3-7
3-8
3-9
3-10
3-11
3-12
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 198 38) (om-make-point 27 32) 3 "3" nil) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 157 253) (om-make-point 120 131) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2) (list 0 1 3) (list 0 1 4) (list 0 1 5) (list 0 1 6) (list 0 2 4) (list 0 2 5) (list 0 2 6) (list 0 2 7) (list 0 3 6) (list 0 3 7) (list 0 4 8)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 190 179) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DN-ORBITES" (quote dn-orbites) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 3))) (om-make-point 147 45) nil nil nil nil 1))) (quote ((6 0 5 0 nil 0) (10 0 6 0 nil 0) (15 2 7 0 ((om-make-point 204 571) (om-make-point 248 577) (om-make-point 661 575) (om-make-point 690 517) (om-make-point 735 503)) 2) (11 2 7 1 ((om-make-point 408 559) (om-make-point 688 563) (om-make-point 716 478) (om-make-point 750 498) (om-make-point 750 503)) 3) (9 2 7 2 ((om-make-point 601 555) (om-make-point 658 552) (om-make-point 716 462) (om-make-point 765 498) (om-make-point 765 503)) 4) (11 2 8 1 nil 3) (8 0 9 2 ((om-make-point 480 493) (om-make-point 504 493) (om-make-point 504 426) (om-make-point 606 426) (om-make-point 603 426)) 4) (7 0 10 2 ((om-make-point 748 561) (om-make-point 791 560) (om-make-point 808 197) (om-make-point 920 197) (om-make-point 920 202)) 0) (12 0 11 2 ((om-make-point 265 504) (om-make-point 290 504) (om-make-point 290 424) (om-make-point 410 423) (om-make-point 410 430)) 3) (15 2 12 1 nil 2) (13 0 14 0 nil 0) (30 2 14 1 nil 0) (14 0 15 2 nil 0) (19 0 16 0 nil 14) (17 0 18 0 nil 3) (32 0 18 1 nil 3) (21 0 19 0 nil 0) (31 0 19 1 ((om-make-point 209 245) (om-make-point 256 221) (om-make-point 479 28) (om-make-point 657 27) (om-make-point 678 58)) 14) (20 0 21 1 nil 0) (25 0 22 0 nil 5) (18 0 24 0 nil 3) (23 0 25 0 nil 5) (32 0 25 1 ((om-make-point 178 111) (om-make-point 359 38) (om-make-point 628 38) (om-make-point 629 77) (om-make-point 629 82)) 5) (31 0 26 0 ((om-make-point 209 245) (om-make-point 405 208) (om-make-point 414 138) (om-make-point 508 136) (om-make-point 509 173)) 1) (32 0 28 0 nil 2) (31 0 30 2 nil 0) (27 0 31 0 nil 0) (32 0 31 1 nil 0) (29 0 32 0 nil 0))) nil 6.080003))