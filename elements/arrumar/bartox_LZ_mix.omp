; OM File Header - Saved 2015/03/10 17:00:51
; (6.080003 :patc (om-make-point 295 27) (om-make-point 0 0) (om-make-point 723 502) "No documentation " 183 0 "2015/02/21 14:25:38" "2015/03/10 17:00:51")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../mestrado_glerm/mikrokosmos/midi/mikro113.mid\"" "#P\"../../../mestrado_glerm/mikrokosmos/midi/mikro040.mid\""))
(in-package :om)(load-lib-for (quote ("LZ")))(setf *om-current-persistent* (om-load-patch1 "bartox_LZ_mix" (quote ((om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 152 254) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 268 236) (om-make-point 34 32) 32 "32" nil) (om-load-boxcomment "comment" (om-make-point 352 80) (quote "It is possible to analyze a set of several midi files.$This creates a stylistic mixture.") "" (om-make-point 267 5) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "mikro113.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 211 7) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "lucida" "mestrado_glerm" "mikrokosmos" "midi")) :device nil :host nil :name "mikro113" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "mikro113.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode player)) (list nil nil (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 218 97) nil nil nil "list" 1) (om-load-boxcall (quote genfun) "LISTMIDI->CROSS" (quote listmidi->cross) (quote ((om-load-inputfun (quote input-funbox) "A$$list of Outputs of midi-info boxes" "MIDIFILES" (list nil)))) (om-make-point 152 136) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 346 281) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 323 239) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 165) (om-make-point 34 32) 10 "10" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 24 449) (om-make-point 307 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (7600 6400 5600 4400) (5000) (8100 6900 5700 4500) (5000) (8300 7100 5600 4400) (8500 7300 5700 4500) (5000) (7900 6700 5600 4400) (8100 6900 5700 4500) (7000 5000) (7100) (8400 7200 5600 4400) (5000) (5700 4500) (5000) (5600 4400) (5700 4500) (5000) (7600 6400 5600 4400) (5000) (8100 6900 5700 4500) (5000) (8300 7100 5600 4400) (8500 7300 5700 4500) (5000) (7900 6700 5600 4400) (8100 6900 5700 4500) (7000 5000) (7100) (8400 7200 5600 4400) (5000))) :lonset (quote (0 145 289 433 577 722 866 1010 1154 1298 1442 1515 1587 1731 1875 2019 2164 2308 2453 2597 2742 2886 3030 3175 3320 3464 3608 3752 3896 3969 4041 4185 4329)) :ldur (quote ((145) (288 288 144 144) (144) (289 289 144 144) (145) (144 144 144 144) (144 144 144 144) (144) (144 144 144 144) (144 144 144 144) (73 145) (72) (866 866 144 144) (144) (144 144) (145) (144 144) (145 145) (144) (289 289 145 145) (144) (289 289 144 144) (145) (145 145 145 145) (144 144 144 144) (144) (144 144 144 144) (144 144 144 144) (73 145) (72) (288 288 144 144) (144))) :lvel (quote ((56) (94 94 85 85) (85) (94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (94 85) (94) (94 94 85 85) (85) (85 85) (85) (85 85) (85 85) (85) (94 94 85 85) (85) (94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (85) (94 94 85 85) (94 94 85 85) (94 85) (94) (94 94 85 85) (85))) :loffset (quote ((0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0))) :lchan (quote ((1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode player)) (list nil nil (quote t) 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 (om-make-point 500 280) (om-make-point 0 0) 0 0 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil))) (om-make-point 184 376) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ$$continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An$$integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An$$integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil$$(optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An$$integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An$$integer (optional)" "MINCOMPLEX" 0))) (om-make-point 201 311) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote newpitch_durationoldpitchvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 212 201) nil nil nil nil 2) (om-load-editor-box1 "mikro040.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 150 7) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "lucida" "mestrado_glerm" "mikrokosmos" "midi")) :device nil :host nil :name "mikro040" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "mikro040.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode player)) (list nil nil (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote :midishare))) t nil nil nil))) (quote ((13 0 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 0 nil 0) (10 0 9 0 nil 0) (11 0 10 0 nil 0) (12 0 11 0 nil 0) (0 0 11 1 nil 0) (1 0 11 2 nil 0) (7 0 11 4 nil 0) (6 0 11 5 nil 0) (5 0 12 0 nil 0) (8 0 12 1 nil 0))) nil 6.080003))
