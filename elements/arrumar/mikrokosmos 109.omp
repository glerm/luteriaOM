; OM File Header - Saved 2015/03/10 17:00:52
; (6.080003 :patc (om-make-point 418 332) (om-make-point 0 0) (om-make-point 830 515) "" 183 0 "2015/02/23 18:25:32" "2015/03/10 17:00:52")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../mestrado_glerm/mikrokosmos/midi/mikro109.mid\""))
(in-package :om)(load-lib-for (quote ("LZ")))(setf *om-current-persistent* (om-load-patch1 "mikrokosmos 109" (quote ((om-load-editor-box1 "mikro109.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 172 30) (om-make-point 115 68) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "lucida" "mestrado_glerm" "mikrokosmos" "midi")) :device nil :host nil :name "mikro109" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "mikro109.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" nil) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 0))) (om-make-point 142 111) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote newpitchduration_oldpitch) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 185 179) nil nil nil nil 2) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0))) (om-make-point 205 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A$$cross-alphabet sequence" "CROSS" nil))) (om-make-point 165 313) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 44 386) (om-make-point 531 115) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6600 7400) (7500) (6600 7400) (7500) (6600 7400) (7500) (6600 7400) (5900 6900) (6000 6800) (6500 7400) (6600 6900) (5900 6800) (6000 7400) (6500 6900) (6000 6800) (5900) (6300 5900) (6000) (5700 6500) (5600) (5700) (5900) (6300 5900) (6000) (6300 5900) (6200) (6300) (6200) (7800) (7700) (7200) (7100) (7200 5700) (7700) (7800) (7700 5700) (7200 5700) (6200) (6300) (7200 6200) (6700) (6600) (6700 5700) (7200) (7300) (6200 7200 5700) (6700 5700) (5600) (5700 6700 5700))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 20500 21000 21500 22000 22500 23000 23500 24000 24500 25000)) :ldur (quote ((500) (1000 500) (500) (1000 500) (500) (1000 500) (500) (500 500) (500 500) (500 500) (500 500) (500 500) (500 500) (500 500) (500 500) (500 1000) (500) (1000 500) (500) (500 1500) (500) (500) (500) (1000 500) (500) (500 1000) (500) (500) (500) (500) (500) (500) (500) (500 1500) (500) (500) (500 500) (1000 500) (500) (500) (500 1500) (500) (500) (500 1500) (500) (500) (1500 500 500) (1000 500) (500) (500 500 500))) :lvel (quote ((100) (100 100) (100) (100 100) (100) (100 100) (100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100) (100) (100 100) (100) (100) (100) (100 100) (100) (100 100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100) (100 100) (100 100) (100) (100) (100 100) (100) (100) (100 100) (100) (100) (100 100 100) (100 100) (100) (100 100 100))) :loffset (quote ((0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0))) :lchan (quote ((1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2) (2 1) (1) (2 1) (2) (2) (2) (2 1) (1) (2 1) (2) (2) (2) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (2 1 1) (1 1) (1) (2 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 18350450 2621450 (quote t) nil nil)) t nil nil nil) (om-load-boxcomment "comment 2" (om-make-point 365 39) (quote "We can also prevent stylistic discontinuity by constraining the last (1) generated symbol to belong to the LZ tree of the LZ analysis.") "" (om-make-point 337 203) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 241 142) (om-make-point 20 28) 5 "5" nil) (om-load-boxcomment "comment" (om-make-point 340 24) (quote "Let's iterate 5 times the LZ analysis of the original text.") "" (om-make-point 275 142) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 307 208) (om-make-point 27 32) 1 "1" nil))) (quote ((0 0 1 0 nil 0) (1 0 2 0 nil 0) (7 0 2 1 nil 0) (2 0 3 0 nil 0) (9 0 3 4 nil 0) (3 0 4 0 nil 0) (4 0 5 0 nil 0))) nil 6.080003))
