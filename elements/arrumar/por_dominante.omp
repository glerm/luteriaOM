; OM File Header - Saved 2015/03/10 17:00:52
; (6.080003 :patc (om-make-point 180 385) (om-make-point 0 0) (om-make-point 1364 612) "" 183 0 "2015/02/10 17:50:19" "2015/02/20 21:12:57")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "por_dominante" (quote ((om-load-boxcomment "comment 8" (om-make-point 109 53) (quote "C#maj") "" (om-make-point 853 523) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 75 54) (quote "G#7") "" (om-make-point 907 335) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 109 53) (quote "Bbmaj") "" (om-make-point 618 525) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 58 51) (quote "F7") "" (om-make-point 689 338) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 109 53) (quote "Gmaj") "" (om-make-point 392 512) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 58 51) (quote "D7") "" (om-make-point 456 341) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 78 52) (quote "Emaj") "" (om-make-point 175 512) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 78 52) (quote "B7") "" (om-make-point 227 414) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 480 128) (quote "A coleção é cíclica, portanto qualquer nota pode ser$transformada em 5ª justa de um acorde final, tornando-se $antes sua dominante com 7ª.$$Para isso, subtrai-se um semitom da nota que vai servir para a modulação.") "" (om-make-point 194 68) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 15.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "7dom_de04" (om-load-patch-abs1 "7dom_de04" (quote ((om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 89 303) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 277 222) (om-make-point 27 32) 3 "3" nil) (om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 317 336) nil nil nil nil 1) (om-load-boxout "output 3" 2 (om-make-point 306 407) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 2" 1 (om-make-point 196 395) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SUBS-POSN" (quote subs-posn) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "a list of indices" "POSN" 1) (om-load-inputfun (quote input-funbox) "a list or value" "VAL" (list (quote a) (quote b))))) (om-make-point 238 311) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 63 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 109 173) "" nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 149 319) (om-make-point 45 32) -100 "-100" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 124 352) nil nil nil nil 1))) (quote ((7 0 0 0 nil 0) (5 0 2 0 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (7 0 5 0 nil 0) (1 0 5 1 nil 0) (9 0 5 2 nil 0) (9 0 6 0 nil 0) (0 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.080003 nil "" (om-make-point 0 0) (om-make-point 500 373)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 770 235) nil (list 6800 (list 6000 6300 6600 6800) (list "C3" "Eb3" "F#3" "G#3")) nil "7dom_de04") (om-load-boxcall (quote abstraction) "resolve_EM 4" (om-load-patch-abs1 "resolve_EM" (quote ((om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 107 422) nil nil nil nil 1) (om-load-boxout "output 2" 1 (om-make-point 107 484) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 24 388) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 61 316) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 179 162) (om-make-point 41 32) 500 "500" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 164 211) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 125 159) (om-make-point 45 32) -300 "-300" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 77 203) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 3 0 nil 0) (7 0 3 1 nil 0) (5 0 3 2 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 763 321) nil (list (list 6800 6500 7300) (list "G#3" "F3" "C#4")) nil "resolve_EM") (om-load-editor-box1 "CHORD 9" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 766 498) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6500 7300)) :ldur (quote (1000 1000 1000)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 8" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 797 434) (om-make-point 105 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 85 23) "(G#3 F3 C#4)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "CHORD 8" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 861 233) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6300 6600 6800)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 7" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 851 385) (om-make-point 121 52) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 101 25) "(C3 Eb3 F#3 G#3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote abstraction) "7dom_de03" (om-load-patch-abs1 "7dom_de03" (quote ((om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 79 298) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 277 222) (om-make-point 27 32) 2 "2" nil) (om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 317 336) nil nil nil nil 1) (om-load-boxout "output 3" 2 (om-make-point 306 407) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 2" 1 (om-make-point 196 395) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SUBS-POSN" (quote subs-posn) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "a list of indices" "POSN" 1) (om-load-inputfun (quote input-funbox) "a list or value" "VAL" (list (quote a) (quote b))))) (om-make-point 238 311) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 63 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 109 173) "" nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 149 319) (om-make-point 45 32) -100 "-100" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 124 352) nil nil nil nil 1))) (quote ((7 0 0 0 nil 0) (5 0 2 0 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (7 0 5 0 nil 0) (1 0 5 1 nil 0) (9 0 5 2 nil 0) (9 0 6 0 nil 0) (0 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.080003 nil "" (om-make-point 0 0) (om-make-point 609 396)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 528 235) nil (list 6500 (list 6000 6300 6500 6900) (list "C3" "Eb3" "F3" "A3")) nil "7dom_de03") (om-load-boxcall (quote abstraction) "resolve_EM 3" (om-load-patch-abs1 "resolve_EM" (quote ((om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 107 422) nil nil nil nil 1) (om-load-boxout "output 2" 1 (om-make-point 107 484) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 24 388) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 61 316) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 179 162) (om-make-point 41 32) 500 "500" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 164 211) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 125 159) (om-make-point 45 32) -300 "-300" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 77 203) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 3 0 nil 0) (7 0 3 1 nil 0) (5 0 3 2 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 532 317) nil (list (list 6500 6200 7000) (list "F3" "D3" "Bb3")) nil "resolve_EM") (om-load-editor-box1 "CHORD 7" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 535 500) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 6200 7000)) :ldur (quote (1000 1000 1000)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 6" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 566 430) (om-make-point 105 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 85 23) "(F3 D3 Bb3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "CHORD 5" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 616 231) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6300 6500 6900)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 48 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 409 362) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 5" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 626 387) (om-make-point 117 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 97 23) "(C3 Eb3 F3 A3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote abstraction) "resolve_EM 2" (om-load-patch-abs1 "resolve_EM" (quote ((om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 107 422) nil nil nil nil 1) (om-load-boxout "output 2" 1 (om-make-point 107 484) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 24 388) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 61 316) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 179 162) (om-make-point 41 32) 500 "500" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 164 211) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 125 159) (om-make-point 45 32) -300 "-300" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 77 203) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 3 0 nil 0) (7 0 3 1 nil 0) (5 0 3 2 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 299 331) nil (list (list 6200 5900 6700) (list "D3" "B2" "G3")) nil "resolve_EM") (om-load-editor-box1 "CHORD 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 302 503) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5900 6700)) :ldur (quote (1000 1000 1000)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "dom7_de02" (om-load-patch-abs1 "dom7_de02" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 277 222) (om-make-point 27 32) 1 "1" nil) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 66 292) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 317 336) nil nil nil nil 1) (om-load-boxout "output 3" 2 (om-make-point 306 407) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 2" 1 (om-make-point 196 395) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SUBS-POSN" (quote subs-posn) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "a list of indices" "POSN" 1) (om-load-inputfun (quote input-funbox) "a list or value" "VAL" (list (quote a) (quote b))))) (om-make-point 238 311) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 63 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 109 173) "" nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 149 319) (om-make-point 45 32) -100 "-100" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 124 352) nil nil nil nil 1))) (quote ((7 0 1 0 nil 0) (5 0 2 0 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (7 0 5 0 nil 0) (0 0 5 1 nil 0) (9 0 5 2 nil 0) (9 0 6 0 nil 0) (1 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.080003 nil "" (om-make-point 0 0) (om-make-point 500 319)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 306 245) nil (list 6200 (list 6000 6200 6600 6900) (list "C3" "D3" "F#3" "A3")) nil "dom7_de02") (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 333 444) (om-make-point 105 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 85 23) "(D3 B2 G3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "CHORD 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 408 234) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6600 6900)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 397 388) (om-make-point 110 52) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 90 25) "(C3 D3 F#3 A3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 172 378) (om-make-point 123 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 103 23) "(B2 Eb3 F#3 A3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "CHORD 6" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 188 240) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6300 6600 6900)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 114 434) (om-make-point 105 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 85 23) "(B2 G#2 E3)" :font (om-make-font "DejaVu Sans" 10.998697916666666D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote abstraction) "dom7_de01" (om-load-patch-abs1 "dom7_de01" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 266 217) (om-make-point 27 32) 0 "0" nil) (om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 317 336) nil nil nil nil 1) (om-load-boxout "output 3" 2 (om-make-point 306 407) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 2" 1 (om-make-point 196 395) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SUBS-POSN" (quote subs-posn) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "a list of indices" "POSN" 0) (om-load-inputfun (quote input-funbox) "a list or value" "VAL" (list (quote a) (quote b))))) (om-make-point 238 311) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 63 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 109 173) "" nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 149 319) (om-make-point 45 32) -100 "-100" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 124 352) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 125 265) nil nil nil nil 1))) (quote ((4 0 1 0 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (0 0 4 1 nil 0) (8 0 4 2 nil 0) (8 0 5 0 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (6 0 9 0 nil 0))) 6.080003 nil "" (om-make-point 0 0) (om-make-point 414 384)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 87 235) nil (list 5900 (list 5900 6300 6600 6900) (list "B2" "Eb3" "F#3" "A3")) nil "dom7_de01") (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 83 497) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5600 6400)) :ldur (quote (1000 1000 1000)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 171 7) (om-make-point 113 32) (list (quote c3) (quote eb3) (quote f\#3) (quote a3)) "(C3 Eb3 F#3 A3)" nil) (om-load-boxcall (quote genfun) "N->MC" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "STRS" (list "C3")))) (om-make-point 140 40) nil nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 104 102) (om-make-point 88 100) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6300 6600 6900)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "resolve_EM" (om-load-patch-abs1 "resolve_EM" (quote ((om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 107 422) nil nil nil nil 1) (om-load-boxout "output 2" 1 (om-make-point 107 484) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 24 388) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 61 316) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 179 162) (om-make-point 41 32) 500 "500" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 164 211) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 125 159) (om-make-point 45 32) -300 "-300" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 77 203) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 3 0 nil 0) (7 0 3 1 nil 0) (5 0 3 2 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0))) 6.080003 nil "" (om-make-point 0 0) (om-make-point 1364 477)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 80 321) nil (list (list 5900 5600 6400) (list "B2" "G#2" "E3")) nil "resolve_EM"))) (quote ((34 1 9 0 nil 0) (9 0 10 0 nil 0) (10 0 11 1 nil 0) (10 1 12 0 nil 0) (9 1 13 1 nil 0) (9 2 14 0 nil 0) (34 1 15 0 nil 0) (15 0 16 0 nil 0) (16 0 17 1 nil 0) (16 1 18 0 nil 0) (15 1 19 1 nil 0) (15 2 20 0 nil 0) (23 0 21 0 nil 0) (21 0 22 1 nil 0) (34 1 23 0 nil 0) (21 1 24 0 nil 0) (23 1 25 1 nil 0) (23 2 26 0 nil 0) (30 2 27 0 nil 0) (30 1 28 1 nil 0) (35 1 29 0 nil 0) (34 1 30 0 nil 0) (35 0 31 1 nil 0) (32 0 33 0 nil 0) (33 0 34 1 nil 0) (30 0 35 0 nil 0))) nil 6.080003))
