; OM File Header - Saved 2015/02/21 18:55:19
; (6.080003 :patc (om-make-point 229 25) (om-make-point 0 31) (om-make-point 849 568) "No documentation " 183 0 nil "2015/02/21 18:55:19")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../mestrado_glerm/mikrokosmos/midi/mikro097.mid\""))
(in-package :om)(load-lib-for (quote ("LZ")))(setf *om-current-persistent* (om-load-patch1 "example3" (quote ((om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 217 230) (om-make-point 34 32) 14 "14" nil) (om-load-boxcomment "comment" (om-make-point 484 46) (quote "<<<<<< If you try severa generation from a same LZ analysis, you can lock this box.$But please note that SAVING OR COPYING A LOCKED LZIFY BOX WILL REQUIRE A LOT OF TIME.") "" (om-make-point 275 166) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 324 77) (quote "Here is the minimum desired complexity.$Higher is this number, less repetitive is the generated sequence.$Try several numbers.") "" (om-make-point 315 244) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 275 237) (om-make-point 34 32) 10 "10" nil) (om-load-boxcomment "comment" (om-make-point 201 46) (quote "Minimum past (see previous example).") "" (om-make-point 298 203) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 257 215) (om-make-point 20 28) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 331 47) (quote "If you want the generated sequence to look more like the original, you can try to increase the number of iterations.") "" (om-make-point 319 118) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 273 127) (om-make-point 34 32) 12 "12" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 27 401) (om-make-point 651 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6900) (6500 6800) (7400 6600) (6900 5900) (6800 6000) (6500 7400) (6900 6600) (5900 6800) (7400 6000) (6500 6900) (6800 6600) (7400) (4500 5700) (4600 5800))) :lonset (quote (0 187 366 537 720 900 1083 1254 1429 1608 1800 2229 3691 3845 4041)) :ldur (quote ((187 187) (179 179) (171 171) (183 183) (180 180) (183 183) (171 171) (175 175) (179 179) (192 192) (429 429) (1462) (154 154) (196 196))) :lvel (quote ((57 69) (71 86) (81 95) (82 66) (92 80) (77 78) (82 102) (79 99) (91 81) (83 82) (103 103) (96) (89 98) (99 103))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 0 nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet$$sequence" "CROSS" nil))) (om-make-point 184 329) (om-make-point 95 53) nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINCOMPLEX" 0))) (om-make-point 201 264) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 174 157) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" nil) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 0))) (om-make-point 107 83) nil nil nil nil 1) (om-load-editor-box1 "mikro097.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 208 8) (om-make-point 131 74) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "lucida" "mestrado_glerm" "mikrokosmos" "midi")) :device nil :host nil :name "mikro097" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "mikro097.mid") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) (om-make-point -4 80) (om-make-point 500 280) 0 1000 nil 1 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 nil nil)) t nil nil nil))) (quote ((9 0 8 0 nil 0) (10 0 9 0 nil 0) (11 0 10 0 nil 0) (0 0 10 2 nil 0) (5 0 10 4 nil 0) (3 0 10 5 nil 0) (12 0 11 0 nil 0) (7 0 11 1 nil 0) (13 0 12 0 nil 0))) nil 6.080003))