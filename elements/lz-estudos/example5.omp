; OM File Header - Saved 2015/02/21 14:24:54
; (6.080003 :patc (om-make-point 83 83) (om-make-point 50 50) (om-make-point 813 592) "No documentation " 183 0 nil "2015/02/21 14:24:54")
; End File Header
(in-package :om)(load-lib-for (quote ("LZ")))(setf *om-current-persistent* (om-load-patch1 "example5" (quote ((om-load-boxcomment "comment" (om-make-point 128 76) (quote "The analysis / synthesis information.") "" (om-make-point 0 63) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 445 191) (quote "The 3rd inlet of lzify is dedicated to the choice of the analysis and the synthesis information.$Clicking on this inlet will unroll a menu.$pitch_duration : the LZ analysis is performed on the pitches, and the duration are taken into account only in the synthesis phase.$pitch_durationvelocity : the LZ analysis is performed on the pitches, and the duration and the velocity are taken into account only in the synthesis phase.$pitchduration_nothing : the LZ analysis is performed on the pitches and the durations, there is no synthesis phase.$newpitch_durationoldpitch : the LZ analysis is performed on the new pitches (not the sustained ones), etc.$pitch_duration_last : as pitch_duration, but the reconstruction of the durations will depend on the context (tempo adapted).$etc.") "" (om-make-point 263 52) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 270 28) (quote "Minimum complexity (see previous example).") "" (om-make-point 335 300) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 309 300) (om-make-point 26 28) 50 "50" nil) (om-load-boxcomment "comment" (om-make-point 197 43) (quote "Minimum past (see previous example).") "" (om-make-point 252 243) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 226 245) (om-make-point 20 28) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 130 22) (quote "Number of iterations.$") "" (om-make-point 262 30) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 224 35) (om-make-point 26 28) 10 "10" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 103 415) (om-make-point 651 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7000) (6900) (7000) (6800 3800) (6500) (6700) (5600 6800 5300 6200) (7000) (6800) (6700) (6500) (6800 5300 6200 5600) (7000) (7200) (7400) (7200) (7400) (7200) (7400) (4300 7000) (7200) (6700 6200 5800) (6500 6000 5700 6900) (7000) (6900) (7000) (6900) (7000) (6800 6200 5300 5600) (7000) (6800 3800) (6500) (5300 5600 6200) (5300 5600 6200) (5300 5600 6200) (3800))) :lonset (quote (0 172 310 448 620 1079 1678 1879 2051 2189 2327 2465 2576 2748 2886 3058 3196 3334 3506 3678 3850 4236 4622 5638 5893 6094 6266 6438 6576 6795 6954 7092 7551 8150 9682 9996 10562 10881)) :ldur (quote ((172) (138) (138) (172) (459 459) (599) (201) (172 172 172 586) (138) (138) (138) (92) (172 620 620 620) (138) (172) (138) (138) (172) (172) (172) (386 386) (1402) (479 465 459) (255 255 456 255) (201) (172) (172) (138) (219) (159 138 138 138) (138) (459 459) (2997) (1146 1146 1118) (138 142 138) (166 166 138) (319))) :lvel (quote ((100) (100) (100) (100) (100 100) (100) (100) (100 100 100 100) (100) (100) (100) (100) (100 100 100 100) (100) (100) (100) (100) (100) (100) (100) (100 100) (100) (100 100 100) (100 100 100 100) (100) (100) (100) (100) (100) (100 100 100 100) (100) (100 100) (100) (100 100 100) (100 100 100) (100 100 100) (100))) :loffset (quote ((0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0) (0 0 0) (0 0 0) (0))) :lchan (quote ((1) (1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1 1) (1) (1 1 1) (1 1 1) (1 1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0) (0 0 0) (0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode player)) (list nil nil (quote t) 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 18350450 2621450 0 0 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A$$cross-alphabet sequence" "CROSS" nil))) (om-make-point 184 352) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINCOMPLEX" 0))) (om-make-point 181 294) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_duration) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 190 186) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a$$midi-info box" "MIDI-INFO" nil))) (om-make-point 136 107) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 128 27) (om-make-point 67 79) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode player)) (list nil nil (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote :midishare))) t nil nil nil))) (quote ((9 0 8 0 nil 0) (10 0 9 0 nil 0) (11 0 10 0 nil 0) (5 0 10 4 nil 0) (3 0 10 5 nil 0) (12 0 11 0 nil 0) (7 0 11 1 nil 0) (13 0 12 0 nil 0))) nil 6.080003))