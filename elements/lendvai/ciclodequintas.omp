; OM File Header - Saved 2015/03/10 16:35:22
; (6.080003 :patc (om-make-point 172 10) (om-make-point 50 50) (om-make-point 1364 585) "" 183 0 "2015/03/10 15:59:59" "2015/03/10 15:59:59")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "ciclodequintas" (quote ((om-load-boxcomment "comment 15" (om-make-point 88 38) (quote "Tônica") "" (om-make-point 594 55) nil (om-make-color 0.0S0 0.0S0 0.0S0) (om-make-font "DejaVu Sans" 18.666666666666665D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 137 40) (quote "dominante") "" (om-make-point 848 132) nil (om-make-color 0.0S0 0.0S0 0.0S0) (om-make-font "DejaVu Sans" 18.666666666666665D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 154 36) (quote "subdominante") "" (om-make-point 254 130) nil (om-make-color 0.0S0 0.0S0 0.0S0) (om-make-font "DejaVu Sans" 18.666666666666665D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 57 55) (quote "Ab") "" (om-make-point 268 315) nil (om-make-color 1.0S0 0.7640343S0 0.0S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 47 49) (quote "D") "" (om-make-point 456 184) nil (om-make-color 1.0S0 0.7640343S0 0.0S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 33 50) (quote "B") "" (om-make-point 428 336) nil (om-make-color 1.0S0 0.7640343S0 0.0S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 50 55) (quote "Bb") "" (om-make-point 775 190) nil (om-make-color 1.0S0 0.0S0 0.7255192S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 51 55) (quote "C#") "" (om-make-point 786 351) nil (om-make-color 1.0S0 0.0S0 0.7255192S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 33 55) (quote "E") "" (om-make-point 965 323) nil (om-make-color 1.0S0 0.0S0 0.7255192S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 34 52) (quote "A") "" (om-make-point 727 210) nil (om-make-color 1.0S0 0.0S0 0.0S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 51 52) (quote "F#") "" (om-make-point 614 351) nil (om-make-color 1.0S0 0.0S0 0.0S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 51 52) (quote "Eb") "" (om-make-point 497 209) nil (om-make-color 1.0S0 0.0S0 0.0S0) (om-make-font "DejaVu Sans" 29.333333333333332D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 47 89) (quote "G") "" (om-make-point 975 84) nil (om-make-color 1.0S0 0.0S0 0.7255192S0) (om-make-font "DejaVu Sans" 53.33203125D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 47 89) (quote "F") "" (om-make-point 288 159) nil (om-make-color 1.0S0 0.7640343S0 0.0S0) (om-make-font "DejaVu Sans" 53.33203125D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 436 80) (om-make-point 27 32) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 405 126) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 47 89) (quote "C") "" (om-make-point 612 63) nil (om-make-color 1.0S0 0.0S0 0.0S0) (om-make-font "DejaVu Sans" 53.33203125D0 :family "DejaVu Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 823 101) (om-make-point 27 32) 1 "1" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 815 137) nil nil nil nil 1) (om-load-editor-box1 "CHORD 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 405 442) (om-make-point 68 116) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6200 6500 6800)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 72 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 449 488) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote genfun) "C2CHORD 3" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the n-cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 259 425) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE 3" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 1 3 5 7)))) (om-make-point 275 169) (om-make-point 218 217) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list -1 2 5 8)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 0 0))) t nil nil nil) (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 604 406) (om-make-point 68 116) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6300 6600 6900)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (restore-tonalite thechord (quote ((1 (make-instance (quote simple-tonalite) :tonnote (quote mi) :tonalt (quote bemol) :mode (quote (0 200 400 500 700 900 1100))))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 72 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 367 395) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote genfun) "C2CHORD 2" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the n-cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 525 422) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 1 3 5 7)))) (om-make-point 528 131) (om-make-point 218 217) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 6 9)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 0 0))) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 920 415) (om-make-point 68 116) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6400 6700 7000)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 72 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 367 395) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the n-cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 759 421) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 1 3 5 7)))) (om-make-point 775 183) (om-make-point 218 217) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 4 7 10)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 0 0))) t nil nil nil))) (quote ((24 2 15 0 ((om-make-point 688 346) (om-make-point 487 369) (om-make-point 487 123) (om-make-point 449 141) (om-make-point 412 126)) 4) (14 0 15 1 nil 0) (24 2 18 0 ((om-make-point 688 346) (om-make-point 749 375) (om-make-point 765 182) (om-make-point 822 132) (om-make-point 822 137)) 4) (17 0 18 1 nil 0) (20 0 19 0 nil 0) (21 0 20 0 nil 0) (15 0 21 2 nil 4) (23 0 22 0 nil 0) (24 0 23 0 nil 0) (26 0 25 0 nil 0) (27 0 26 0 nil 0) (18 0 27 2 nil 4))) nil 6.080003))
