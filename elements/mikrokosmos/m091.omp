; OM File Header - Saved 2015/03/10 17:00:52
; (6.080003 :patc (om-make-point 118 60) (om-make-point 0 0) (om-make-point 1174 573) "" 183 0 "2014/11/15 18:52:32" "2015/03/10 17:00:52")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../mestrado_glerm/mikrokosmos/midi/mikro097.mid\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "m091" (quote ((om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 433 513) (om-make-point 248 57) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 236 28) "untitled"))) (om-set-dialog-item-text rep "0
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 115 407) (om-make-point 114 32) "segment-begin" "\"segment-begin\"" nil) (om-load-boxcall (quote lispfun) "ANALYSIS-SEGMENTS" (quote analysis-segments) (quote ((om-load-inputfun (quote input-funbox) "ABSTRACT-ANALYSIS" "ABSTRACT-ANALYSIS" nil))) (om-make-point 260 438) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 429 416) (om-make-point 27 32) 0 "0" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 480 460) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "ANALYSIS" (quote analysis) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 565 428) nil nil nil nil 1) (om-load-editor-box1 "dragged" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 578 221) (om-make-point 324 179) (let ((object (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6200) (5700) (5600) (5700) (6200) (5900 6300))) :lonset (quote (0 567 1013 1450 1892 2321 2821 5887)) :ldur (quote ((608) (458) (466) (450) (466) (541) (667 3066))) :lvel (quote ((53) (53) (51) (62) (66) (61) (59 68))) :loffset (quote ((0) (0) (0) (0) (0) (0) (4 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (set-object-analysis object (list (if (find-class (quote pcset-analysis) nil) (make-instance (quote pcset-analysis) :analysis-segments (list (if (find-class (quote chord-segment) nil) (make-instance (quote chord-segment) :segment-data (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 3 8 9 11)) :from-file t)) :color (om-make-color 0.44524682 0.42008007 0.69713414) :tb 0 :te 5887 :chord-ids (list 0 1 2 3 4 5 6) :from-file t))) :from-file t)))) object) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 757 461) (om-make-point 0 0) 3 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 434 310) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6200) (5700) (5600) (5700) (6200) (5900 6300) (6000) (6500) (6600) (6500) (6000) (5900) (6200) (5700) (5600) (6500) (6000) (5900) (5700) (6200 6000) (6300) (5900) (6200) (7800) (7700) (7200) (7100) (7200) (7700) (7800 5600) (5700) (6200) (6300) (6200) (5700) (5600) (7700) (7200) (7700) (6200) (5700) (5600) (7200) (7100) (7800) (5700 7200) (6200) (6300) (7100) (7200 6200) (5600 7800) (7700 5700) (6300 7100) (7200 6200) (5600 7800) (5700 7700) (7100) (6300) (7200) (6200) (5700 7700) (8300 5900) (8400 6000) (8900 6500) (9000 6600) (6600 9000) (6600 9000) (8900 6500) (8400 6000) (9000 6600) (8900 6500) (8400 6000) (6600 9000) (8300 5900) (8400 6000) (6500 8900) (9000 6600) (9300 6900) (6600 9000) (8900 6500) (8400 6000) (6600 9000) (8900 6500) (8400 6000) (8300 5900) (8000) (8100) (8600) (8700) (5900) (8700 6000) (6500) (6600 8700) (8600) (8100 6600) (8700) (6600 8600) (8100 6500) (6000 8700) (6600) (6500) (7500 6000) (7400 6600) (6900) (6800) (5900) (6800 6000) (6500) (6600) (6900) (7400 6600) (7500) (7400) (6900 6500) (6000 6800) (5900) (6000) (6500 6900) (7400 6600) (6900) (6800) (7400 5900) (6900 6000) (6800 6500) (6600 7400) (5900 6900) (6000 6800) (7400 6500) (6600 6900) (6800 5900) (6000 7400) (6900 6500) (6600 6800) (7400) (5700 4500) (5800 4600) (5000 6200) (5100 6300) (6300 5100) (6300 5100) (6200 5000) (5800 4600) (5100 6300) (5000 6200) (5800 4600) (6200 5000) (5100 6300) (5000 6200) (5800 4600) (5100 6300) (6200 5000) (5800 4600) (4500 5700) (5700 3300) (5800 3400) (6200 3800) (3900 6300) (6300 3900) (6200 3800) (5800 3400) (3900 6300) (5800 3400) (6200 3800) (6300 3900) (5800 3400) (6200 3800) (6300 3900) (3800 6200) (6300 3900) (3400 5800) (5700 3300) (5800 3400) (6200 3800) (5700) (5600) (5700) (6200) (6300) (6200) (7200) (7100) (5700) (7200) (7700) (7800) (7700) (7200 5700) (5600) (5700) (6200) (6300) (6200) (6700) (6600) (6700 5700) (7200) (7300) (7200) (5700 6700) (5600) (5700) (6200) (6300) (6200) (6000) (5900) (5700) (6000) (6500) (6600) (6500) (6000 6200) (6300) (6200) (5900 5700) (6000) (6500) (5600) (5700) (6200 6600) (6300) (6500) (5600 7100 6300 7800) (5700 6200 7200 7700) (9200 3000) (10800))) :lonset (quote (4125 4692 5138 5575 6017 6446 6946 7596 8021 8433 8883 9283 9783 10371 10821 11279 11821 12308 12725 13154 13625 14162 14742 15425 16421 16975 17404 17812 18262 18654 19100 19629 20042 20425 20825 21258 21733 22317 22771 23200 23704 24117 24567 25046 25488 25921 26450 26912 27337 27787 28233 28737 29196 29633 30137 30654 31158 31658 32225 32833 33508 35179 40233 40425 40600 40779 41158 41512 41696 41879 42058 42238 42412 42592 43200 43371 43558 43721 44100 44483 44654 44833 45008 45188 45362 45546 46142 46321 46508 46700 46875 47042 47208 47388 47579 47754 47942 48125 48283 48475 48650 48838 49000 49183 49362 49554 49733 49900 50104 50275 50471 50654 50838 51025 51200 51392 51562 51750 51917 52100 52300 52487 52675 52842 53029 53208 53379 53562 53742 53925 54096 54271 54450 54642 55071 56533 56687 56883 57079 57479 57858 58258 58442 58633 58821 59004 59371 59571 59746 59929 60112 60296 60467 60654 61071 61262 61429 61621 62004 62375 62554 62737 63287 63483 63683 63858 64021 64233 64433 64921 65171 65383 65617 65892 70338 71021 71512 71979 72433 72975 73575 74004 74400 74517 75021 75446 75946 76467 77088 77496 77917 78346 78812 79312 79729 80171 80779 81192 81675 82267 82738 83133 83571 84000 84500 85029 85475 85888 86004 86508 86962 87471 88071 88692 89150 89675 90292 90800 91346 91888 92604 94354 96017 99862 101562 105079 114317 114817)) :ldur (quote ((608) (458) (466) (450) (466) (541) (667 3066) (454) (429) (488) (421) (513) (1625) (512) (487) (1767) (517) (425) (925) (492) (554 1158) (1325) (1004) (387) (604) (463) (438) (463) (413) (500) (2813 617) (554) (429) (450) (500) (525) (1788) (466) (458) (1575) (421) (487) (1700) (450) (341) (566) (450 1204) (463) (971) (467) (600 371) (433 500) (450 483) (529 521) (575 584) (521 546) (787 359) (1192) (1354) (2442) (1759) (2241 2238) (208 213) (205 183) (167 158) (229 254) (209 184) (204 296) (150 175) (137 175) (134 134) (192 174) (150 155) (300 333) (179 179) (166 175) (138 146) (117 179) (96 92) (138 175) (150 167) (158 184) (95 117) (183 120) (137 126) (167 154) (179) (200) (163) (233) (154) (175 179) (142) (208 179) (159) (179 179) (154) (192 187) (171 205) (204 150) (96) (170) (176 188) (187 209) (188) (217) (171) (442 221) (154) (263) (183) (142 567) (174) (208) (166 237) (150 516) (105) (196) (158 170) (225 450) (154) (134) (192 167) (192 191) (75 167) (91 192) (171 188) (179 80) (187 179) (79 187) (83 166) (163 171) (92 208) (637 383) (271) (142 163) (192 234) (125 125) (233 242) (154 175) (179 184) (166 154) (100 116) (175 175) (117 129) (241 279) (146 200) (137 141) (141 137) (138 138) (129 150) (129 121) (113 100) (104 267) (196 225) (180 205) (117 150) (221 200) (217 263) (184 208) (130 138) (425 434) (233 221) (205 175) (134 159) (108 121) (158 200) (150 184) (246 221) (321 308) (150 171) (234 205) (225 204) (4883 4941) (724) (521) (1642) (496) (542) (208) (433) (554) (1508) (529) (429) (146) (662) (2758 650) (416) (2237) (462) (496) (1263) (413) (550) (1680 1758) (392) (520) (608) (496 2404) (424) (2105) (454) (529) (279) (446) (537) (1758) (558) (459) (705) (708) (1162 646) (491) (550) (624 1725) (554) (1833) (592) (787) (1791 3513) (2508) (921) (463 563 521 667) (3000 2999 3000 3000) (142 154) (500))) :lvel (quote ((53) (53) (51) (62) (66) (61) (59 68) (61) (61) (72) (62) (55) (55) (52) (59) (69) (67) (64) (69) (65) (54 66) (61) (52) (41) (53) (56) (50) (59) (64) (71) (76 59) (59) (61) (70) (67) (55) (70) (67) (63) (73) (57) (57) (54) (64) (62) (63) (48 64) (64) (74) (68) (69 54) (57 70) (62 61) (60 59) (62 53) (53 57) (49 58) (61) (53) (50) (45) (36 43) (80 78) (82 72) (76 78) (89 94) (91 76) (103 72) (77 78) (61 63) (73 83) (72 74) (79 75) (98 84) (67 48) (74 61) (69 80) (88 91) (88 94) (105 84) (73 59) (86 67) (86 77) (79 79) (82 79) (92 90) (76) (80) (72) (85) (73) (81 65) (84) (94 69) (69) (79 90) (80) (91 74) (79 71) (69 84) (84) (84) (82 74) (83 88) (79) (90) (65) (87 67) (77) (96) (89) (82 104) (86) (77) (75 77) (70 93) (74) (80) (80 85) (79 101) (79) (75) (74 59) (69 57) (86 71) (95 81) (66 82) (80 92) (78 77) (102 82) (99 79) (81 91) (82 83) (103 103) (96) (98 89) (103 99) (100 89) (127 117) (117 127) (119 127) (100 114) (97 93) (126 117) (97 89) (114 101) (109 118) (108 97) (81 82) (92 95) (122 101) (92 82) (95 92) (120 104) (109 120) (108 91) (96 96) (124 119) (116 126) (106 107) (98 92) (124 103) (120 99) (81 80) (105 105) (111 90) (103 97) (108 107) (92 97) (101 114) (83 107) (106 84) (110 91) (107 116) (52) (68) (58) (59) (66) (64) (62) (69) (54) (70) (66) (78) (74) (73 64) (76) (72) (64) (80) (64) (61) (70) (70 59) (69) (70) (66) (64 59) (76) (75) (66) (70) (65) (66) (74) (68) (77) (64) (66) (61) (68 70) (74) (70) (72 59) (64) (62) (59) (58) (49 63) (47) (43) (40 31 33 50) (38 35 31 46) (30 30) (1))) :loffset (quote ((0) (0) (0) (0) (0) (0) (4 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (17 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (25 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (25 0) (0) (0) (0) (13 0) (30 0) (4 0) (13 0) (9 0) (29 0) (17 0) (0) (0) (0) (0) (9 0) (13 0) (8 0) (8 0) (17 0) (4 0) (13 0) (12 0) (17 0) (0 0) (8 0) (9 0) (16 0) (17 0) (17 0) (4 0) (8 0) (8 0) (0 0) (8 0) (17 0) (9 0) (4 0) (9 0) (8 0) (0) (0) (0) (0) (0) (8 0) (0) (12 0) (0) (13 0) (0) (4 0) (25 0) (4 0) (0) (0) (12 0) (9 0) (0) (0) (0) (29 0) (0) (0) (0) (8 0) (0) (0) (17 0) (16 0) (0) (0) (8 0) (8 0) (0) (0) (0 0) (20 0) (21 0) (9 0) (21 0) (5 0) (4 0) (4 0) (4 0) (8 0) (4 0) (0 0) (0) (21 0) (25 0) (9 0) (0 0) (4 0) (9 0) (9 0) (4 0) (4 0) (16 0) (13 0) (8 0) (21 0) (21 0) (4 0) (13 0) (4 0) (12 0) (13 0) (8 0) (0 0) (8 0) (0 0) (4 0) (8 0) (8 0) (9 0) (13 0) (29 0) (4 0) (21 0) (21 0) (9 0) (0 0) (4 0) (4 0) (0 0) (4 0) (8 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (100 0) (0) (0) (0) (0) (0) (0) (0) (91 0) (0) (0) (0) (8 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (100 0) (0) (0) (13 0) (0) (0) (0) (0) (17 0) (0) (0) (46 42 34 0) (30 26 9 0) (29 0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :jackmidi) 1 nil 1000 0 (om-make-point 909 357) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "mikro097.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 206 87) (om-make-point 520 84) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "lucida" "mestrado_glerm" "mikrokosmos" "midi")) :device nil :host nil :name "mikro097" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "mikro097.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems mode grillestep notechancolor? cmnpref obj-mode zoom deltapict winsize winpos player outport)) (list nil (quote t) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (om-make-point 1363 626) (om-make-point 0 0) (quote :midishare-rt) 0)) t nil nil nil))) (quote ((4 0 2 0 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (8 0 7 0 nil 0))) nil 6.080003))
