; OM File Header - Saved 2015/01/26 19:21:27
; (6.080003 :patc (om-make-point 172 10) (om-make-point 446 92) (om-make-point 783 538) "" 183 0 "2015/01/21 23:02:17" "2015/01/26 19:21:27")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Sieves" (quote ((om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 662 552) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 628 509) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 735 444) (om-make-point 48 32) 1200 "1200" nil) (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 702 495) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 681 411) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "base_C4" (om-load-patch-abs1 "base_C4" (quote ((om-load-boxout "output" 0 (om-make-point 23 170) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 124 91) (om-make-point 48 32) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 63 124) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 90 52) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 36 108) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 454 436) nil (list (list 6300 7100 6700 6300 7100 6700 6300 7100 6700 6300 7100 6700 6300)) nil "base_C4") (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 462 528) (om-make-point 126 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (7500) (6300) (6300) (8300) (7900) (7900) (8300) (6700) (6300) (8300) (7500) (7900) (7900) (6700) (7100) (6700) (8300) (7100) (7500) (7100) (6300) (7500) (7500) (6700) (7100))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 652 430) 0 1000 nil 1 (quote :jackmidi) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "pclass" (om-load-patch-abs1 "pclass" (quote ((om-load-boxout "output" 0 (om-make-point 102 390) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 170 286) (om-make-point 34 32) 12 "12" nil) (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 1))) (om-make-point 92 326) nil nil nil nil 2) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 183 152) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 137 240) nil nil nil nil 1))) (quote ((3 1 0 0 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 5 0 nil 0) (4 0 5 1 nil 0))) 6.080003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 514 250) nil (list (list 9 1 5 9 1 5 9 1 5 9 1 5 9)) nil "pclass") (om-load-boxcall (quote genfun) "INV" (quote inv) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "" "SET" (list 0 1 2 7)))) (om-make-point 524 321) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REVEL-CRIBLE 5" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 494 117) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE 7" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 570 283) (om-make-point 89 100) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 3 11 7 3 11 7 3 11 7 3 11 7 3)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "C-COMPLEMENT 2" (quote c-complement) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 472 25) nil nil nil nil 1) (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 277 120) (om-make-point 57 272) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 45 243) "untitled"))) (om-set-dialog-item-text rep "A0
Bb1
B2
C4
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "MC->N" (quote mc->n) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDIC" (list 6000)))) (om-make-point 207 337) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 60 30) (quote "OCT2,3") "" (om-make-point 1154 459) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1128 400) (om-make-point 27 32) 1 "1" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1116 465) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE 6" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 1081 514) (om-make-point 89 100) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 3 5 6 8 9 11 12 14)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 2" (om-make-point 60 30) (quote "OCT1,2") "" (om-make-point 983 467) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "N-CERCLE 5" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 959 521) (om-make-point 89 100) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 2 4 5 7 8 10 11 13)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 940 393) (om-make-point 27 32) 1 "1" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 928 458) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 60 30) (quote "OCT0,1") "" (om-make-point 819 461) nil (om-make-color 0 0 0) (om-make-font "Bitstream Vera Sans" 12 :family "Bitstream Vera Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "C-COMPLEMENT" (quote c-complement) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 1137 300) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REVEL-CRIBLE 4" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 859 386) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE 4" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 827 491) (om-make-point 89 100) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 3 4 6 7 9 10 12)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 954 56) (om-make-point 64 32) (list 3 1 12) "(3 1 12)" nil) (om-load-editor-box1 "N-CERCLE 3" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 986 333) (om-make-point 89 100) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 1 4 7 10)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "CRIBLE 3" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 902 113) (om-make-point 84 75) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 3 1 12) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 1018 212) nil nil nil nil 1) (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 873 288) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 734 329) (om-make-point 89 100) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 3 6 9 12)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 767 54) (om-make-point 64 32) (list 3 0 12) "(3 0 12)" nil) (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 715 111) (om-make-point 84 75) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 3 0 12) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 705 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 601 44) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 39 412) (om-make-point 214 132) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3300) (3700) (4100) (4500) (4900) (5300) (5700) (6100) (6500) (6900) (7300) (7700) (8100))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 3400)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 478 310) 0 1000 nil 1 (quote :jackmidi) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 140 288) (om-make-point 41 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 144 377) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 95 48) (om-make-point 71 32) (list 4 33 84) "(4 33 84)" nil) (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 220 76) (om-make-point 41 253) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 29 224) "untitled"))) (om-set-dialog-item-text rep "33
46
59
72
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 19 304) (om-make-point 89 100) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 33 37 41 45 49 53 57 61 65 69 73 77 81)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 43 105) (om-make-point 84 75) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 4 33 84) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 88 211) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (3 0 1 1 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (10 2 4 0 nil 0) (4 0 5 0 nil 0) (0 0 6 1 nil 0) (38 0 7 0 nil 0) (7 0 8 1 nil 0) (11 0 9 0 nil 0) (8 0 10 2 nil 0) (13 0 12 0 nil 0) (38 0 13 0 nil 0) (19 2 16 0 nil 0) (15 0 16 1 nil 0) (16 0 17 2 nil 0) (21 0 19 2 nil 0) (24 0 21 0 nil 0) (20 0 21 1 nil 0) (30 0 24 0 nil 0) (24 0 25 2 nil 0) (29 0 27 2 nil 0) (26 0 28 1 nil 0) (28 0 29 0 nil 0) (33 0 30 0 nil 0) (28 0 30 1 nil 0) (34 0 31 2 nil 0) (32 0 33 1 nil 0) (33 0 34 0 nil 0) (38 0 36 1 nil 0) (43 0 38 0 nil 0) (37 0 38 1 nil 0) (43 0 40 0 nil 0) (43 0 41 2 nil 0) (39 0 42 1 nil 0) (42 0 43 0 nil 0))) nil 6.080003))