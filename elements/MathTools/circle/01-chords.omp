; OM File Header - Saved 2014/04/26 5:39:38
; (6.04 :patc (om-make-point 20 15) (om-make-point 145 84) (om-make-point 1077 700) "non documentation" 183 0 nil "2014/04/26 5:39:38")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "01-chords" '((om-load-boxcomment "comment1" (om-make-point 241 78) '"In this case there is no way to go back to the original circle, since the scale is non-octaviant!" "" (om-make-point 735 565) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux10" 't 'nil (om-make-point 661 399) (om-make-point 12 22) 4 "4" nil) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 24) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 469 480) (om-make-point 141 122) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 24 :puntos (list (list 0 2 3 5 6 8 9 11 12 14 15 17 18 20 21 23)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) t nil nil) (om-load-boxcall 'genfun "CHORD2C1" 'chord2c '((om-load-inputfun 'input-funbox "the chord" "SELF" nil) (om-load-inputfun 'input-funbox "approx" "APPROX" 4)) (om-make-point 583 413) nil nil nil nil 1) (om-load-boxcall 'bastype "aux9" 't 'nil (om-make-point 875 294) (om-make-point 19 22) 50 "50" nil) (om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 354 297) (om-make-point 12 22) 2 "2" nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 152 323) (om-make-point 26 22) 100 "100" nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 130 291) (om-make-point 33 22) 6000 "6000" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 121 253) (om-make-point 12 22) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 817 48) '"From the circular representation to the chord object...and backwards" "" (om-make-point 105 6) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 837 79) (om-make-point 26 22) 143 "143" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 516 88) (om-make-point 19 22) 24 "24" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 84 81) (om-make-point 19 22) 12 "12" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 510 272) (om-make-point 26 22) 50 "50" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 24) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 471 116) (om-make-point 153 141) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 24 :puntos (list (list 0 2 3 5 6 8 9 11 12 14 15 17 18 20 21 23)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 508 70) (om-make-point 91 20) (list 0 2 3 5 6 8 9 11 12 14 15 17 18 20 21 23) "(0 2 3 5 6 8 9 11 12 14 15 17 18 20 21 23)" nil) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 456 287) nil nil nil nil 1) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 602 270) (om-make-point 110 113) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6100 6150 6250 6300 6400 6450 6550 6600 6700 6750 6850 6900 7000 7050 7150) :lvel (list 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 12) (om-make-color 0 0 0)) (list (list 13) (om-make-color 0 0 0)) (list (list 14) (om-make-color 0 0 0)) (list (list 15) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 4))) t nil nil) (om-load-editor-box1 "CHORD1" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 783 426) (om-make-point 113 135) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6050 6100 6300 6450 6650 6700 6950 7100 7200 7300 7350 7600 7750 7950 8000 8250 8600 8650 8900 9050 9250 9300 9550 9900 9950 10200 10350 10500 10550 10600 10850 11000 11050 11200 11250 11500 11600 11650 11850 11900 12150 12300 12500 12550 12700 12800 12950 13150) :lvel (list 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 12) (om-make-color 0 0 0)) (list (list 13) (om-make-color 0 0 0)) (list (list 14) (om-make-color 0 0 0)) (list (list 15) (om-make-color 0 0 0)) (list (list 16) (om-make-color 0 0 0)) (list (list 17) (om-make-color 0 0 0)) (list (list 18) (om-make-color 0 0 0)) (list (list 19) (om-make-color 0 0 0)) (list (list 20) (om-make-color 0 0 0)) (list (list 21) (om-make-color 0 0 0)) (list (list 22) (om-make-color 0 0 0)) (list (list 23) (om-make-color 0 0 0)) (list (list 24) (om-make-color 0 0 0)) (list (list 25) (om-make-color 0 0 0)) (list (list 26) (om-make-color 0 0 0)) (list (list 27) (om-make-color 0 0 0)) (list (list 28) (om-make-color 0 0 0)) (list (list 29) (om-make-color 0 0 0)) (list (list 30) (om-make-color 0 0 0)) (list (list 31) (om-make-color 0 0 0)) (list (list 32) (om-make-color 0 0 0)) (list (list 33) (om-make-color 0 0 0)) (list (list 34) (om-make-color 0 0 0)) (list (list 35) (om-make-color 0 0 0)) (list (list 36) (om-make-color 0 0 0)) (list (list 37) (om-make-color 0 0 0)) (list (list 38) (om-make-color 0 0 0)) (list (list 39) (om-make-color 0 0 0)) (list (list 40) (om-make-color 0 0 0)) (list (list 41) (om-make-color 0 0 0)) (list (list 42) (om-make-color 0 0 0)) (list (list 43) (om-make-color 0 0 0)) (list (list 44) (om-make-color 0 0 0)) (list (list 45) (om-make-color 0 0 0)) (list (list 46) (om-make-color 0 0 0)) (list (list 47) (om-make-color 0 0 0)) (list (list 48) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 -51) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 5) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'gg 24 2))) t nil nil) (om-load-boxcall 'genfun "C2CHORD1" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 50)) (om-make-point 820 314) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 143) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 1 2 6 9 13 14 19 22 24 26 27 32 35 39 40 45 52 53 58 61 65 66 71 78 79 84 87 90 91 92 97 100 101 104 105 110 112 113 117 118 123 126 130 131 134 136 139 143))) (om-make-point 745 117) (om-make-point 175 153) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 143 :puntos (list (list 0 1 2 6 9 13 14 19 22 24 26 27 32 35 39 40 45 52 53 58 61 65 66 71 78 79 84 87 90 91 92 97 100 101 104 105 110 112 113 117 118 123 126 130 131 134 136 139 143)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 269 105) (om-make-point 122 95) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6200 6300 6500 6600 6800 6900 7100) :lvel (list 100 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 273 455) (om-make-point 119 107) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 3 5 6 8 9 11)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) t nil nil) (om-load-boxcall 'genfun "CHORD2C" 'chord2c '((om-load-inputfun 'input-funbox "the chord" "SELF" nil) (om-load-inputfun 'input-funbox "approx" "APPROX" 2)) (om-make-point 317 357) nil nil nil "chord2c" 1) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 66 463) (om-make-point 122 95) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6200 6300 6500 6600 6800 6900 7100) :lvel (list 100 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 109 357) nil nil nil "c2chord" 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 74 60) (om-make-point 91 20) (list 0 2 3 5 6 8 9 11) "(0 2 3 5 6 8 9 11)" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 37 106) (om-make-point 153 141) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 3 5 6 8 9 11)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) t nil nil)) '((3 0 2 0 nil 0) (17 0 3 0 nil 0) (1 0 3 1 nil 0) (11 0 14 1 nil 0) (15 0 14 2 nil 0) (14 0 16 0 nil 0) (13 0 16 3 nil 0) (16 0 17 0 nil 0) (19 0 18 0 nil 0) (20 0 19 0 nil 0) (4 0 19 3 nil 0) (10 0 20 1 nil 0) (23 0 22 0 nil 0) (21 0 23 0 nil 0) (5 0 23 1 nil 0) (25 0 24 0 nil 0) (27 0 25 0 nil 0) (8 0 25 1 nil 0) (7 0 25 2 nil 0) (6 0 25 3 nil 0) (12 0 27 1 nil 0) (26 0 27 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 715 30)) (setf (pict-size newpict) (om-make-point 253 577)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 441 31)) (setf (pict-size newpict) (om-make-point 253 578)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 25 33)) (setf (pict-size newpict) (om-make-point 398 570)) newpict)) 5.0))
