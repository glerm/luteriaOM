; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 207 14) (om-make-point 34 73) (om-make-point 1132 757) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "04-sievenomos" '((om-load-boxcomment "comment1" (om-make-point 349 30) '"The sieve L(11,13) of Nomos Alpha" "" (om-make-point 696 489) nil (om-make-color 191/255 8/51 2/51) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) (om-make-point 207 592) (om-make-point 338 95) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(429/32 (((143 32) (1 1 4 3 4 1 4 1.0 3 2 2 1 4 1.0 3 4 1 4 1.0 7 1 4 1.0 3 4 1 4 1.0 7 1 4 1.0 3 3 1 1 4 1.0 3 1 3 1 4 1.0 2 1 4 1 4 1.0 3 4 1 3 2 3 4)) ((143 32) (1 1 4 3 4 1 4 1.0 3 2 2 1 4 1.0 3 4 1 4 1.0 7 1 4 1.0 3 4 1 4 1.0 7 1 4 1.0 3 3 1 1 4 1.0 3 1 3 1 4 1.0 2 1 4 1 4 1.0 3 4 1 3 2 3 4)) ((143 32) (1 1 4 3 4 1 4 1.0 3 2 2 1 4 1.0 3 4 1 4 1.0 7 1 4 1.0 3 4 1 4 1.0 7 1 4 1.0 3 3 1 1 4 1.0 3 1 3 1 4 1.0 2 1 4 1 4 1.0 3 4 1 3 2 3 4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 875) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 875) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 875) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 875) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 875) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 875) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 125) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 375) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 0 28) (om-make-color 0 0 0)) (list (list 0 28 0) (om-make-color 0 0 0)) (list (list 0 29) (om-make-color 0 0 0)) (list (list 0 29 0) (om-make-color 0 0 0)) (list (list 0 30) (om-make-color 0 0 0)) (list (list 0 30 0) (om-make-color 0 0 0)) (list (list 0 31) (om-make-color 0 0 0)) (list (list 0 31 0) (om-make-color 0 0 0)) (list (list 0 32) (om-make-color 0 0 0)) (list (list 0 32 0) (om-make-color 0 0 0)) (list (list 0 33) (om-make-color 0 0 0)) (list (list 0 33 0) (om-make-color 0 0 0)) (list (list 0 34) (om-make-color 0 0 0)) (list (list 0 34 0) (om-make-color 0 0 0)) (list (list 0 35) (om-make-color 0 0 0)) (list (list 0 35 0) (om-make-color 0 0 0)) (list (list 0 36) (om-make-color 0 0 0)) (list (list 0 36 0) (om-make-color 0 0 0)) (list (list 0 37) (om-make-color 0 0 0)) (list (list 0 37 0) (om-make-color 0 0 0)) (list (list 0 38) (om-make-color 0 0 0)) (list (list 0 38 0) (om-make-color 0 0 0)) (list (list 0 39) (om-make-color 0 0 0)) (list (list 0 39 0) (om-make-color 0 0 0)) (list (list 0 40) (om-make-color 0 0 0)) (list (list 0 40 0) (om-make-color 0 0 0)) (list (list 0 41) (om-make-color 0 0 0)) (list (list 0 41 0) (om-make-color 0 0 0)) (list (list 0 42) (om-make-color 0 0 0)) (list (list 0 42 0) (om-make-color 0 0 0)) (list (list 0 43) (om-make-color 0 0 0)) (list (list 0 43 0) (om-make-color 0 0 0)) (list (list 0 44) (om-make-color 0 0 0)) (list (list 0 44 0) (om-make-color 0 0 0)) (list (list 0 45) (om-make-color 0 0 0)) (list (list 0 45 0) (om-make-color 0 0 0)) (list (list 0 46) (om-make-color 0 0 0)) (list (list 0 46 0) (om-make-color 0 0 0)) (list (list 0 47) (om-make-color 0 0 0)) (list (list 0 47 0) (om-make-color 0 0 0)) (list (list 0 48) (om-make-color 0 0 0)) (list (list 0 48 0) (om-make-color 0 0 0)) (list (list 0 49) (om-make-color 0 0 0)) (list (list 0 49 0) (om-make-color 0 0 0)) (list (list 0 50) (om-make-color 0 0 0)) (list (list 0 50 0) (om-make-color 0 0 0)) (list (list 0 51) (om-make-color 0 0 0)) (list (list 0 51 0) (om-make-color 0 0 0)) (list (list 0 52) (om-make-color 0 0 0)) (list (list 0 52 0) (om-make-color 0 0 0)) (list (list 0 53) (om-make-color 0 0 0)) (list (list 0 53 0) (om-make-color 0 0 0)) (list (list 0 54) (om-make-color 0 0 0)) (list (list 0 54 0) (om-make-color 0 0 0)) (list (list 0 55) (om-make-color 0 0 0)) (list (list 0 55 0) (om-make-color 0 0 0)) (list (list 0 56) (om-make-color 0 0 0)) (list (list 0 56 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 1 29) (om-make-color 0 0 0)) (list (list 1 29 0) (om-make-color 0 0 0)) (list (list 1 30) (om-make-color 0 0 0)) (list (list 1 30 0) (om-make-color 0 0 0)) (list (list 1 31) (om-make-color 0 0 0)) (list (list 1 31 0) (om-make-color 0 0 0)) (list (list 1 32) (om-make-color 0 0 0)) (list (list 1 32 0) (om-make-color 0 0 0)) (list (list 1 33) (om-make-color 0 0 0)) (list (list 1 33 0) (om-make-color 0 0 0)) (list (list 1 34) (om-make-color 0 0 0)) (list (list 1 34 0) (om-make-color 0 0 0)) (list (list 1 35) (om-make-color 0 0 0)) (list (list 1 35 0) (om-make-color 0 0 0)) (list (list 1 36) (om-make-color 0 0 0)) (list (list 1 36 0) (om-make-color 0 0 0)) (list (list 1 37) (om-make-color 0 0 0)) (list (list 1 37 0) (om-make-color 0 0 0)) (list (list 1 38) (om-make-color 0 0 0)) (list (list 1 38 0) (om-make-color 0 0 0)) (list (list 1 39) (om-make-color 0 0 0)) (list (list 1 39 0) (om-make-color 0 0 0)) (list (list 1 40) (om-make-color 0 0 0)) (list (list 1 40 0) (om-make-color 0 0 0)) (list (list 1 41) (om-make-color 0 0 0)) (list (list 1 41 0) (om-make-color 0 0 0)) (list (list 1 42) (om-make-color 0 0 0)) (list (list 1 42 0) (om-make-color 0 0 0)) (list (list 1 43) (om-make-color 0 0 0)) (list (list 1 43 0) (om-make-color 0 0 0)) (list (list 1 44) (om-make-color 0 0 0)) (list (list 1 44 0) (om-make-color 0 0 0)) (list (list 1 45) (om-make-color 0 0 0)) (list (list 1 45 0) (om-make-color 0 0 0)) (list (list 1 46) (om-make-color 0 0 0)) (list (list 1 46 0) (om-make-color 0 0 0)) (list (list 1 47) (om-make-color 0 0 0)) (list (list 1 47 0) (om-make-color 0 0 0)) (list (list 1 48) (om-make-color 0 0 0)) (list (list 1 48 0) (om-make-color 0 0 0)) (list (list 1 49) (om-make-color 0 0 0)) (list (list 1 49 0) (om-make-color 0 0 0)) (list (list 1 50) (om-make-color 0 0 0)) (list (list 1 50 0) (om-make-color 0 0 0)) (list (list 1 51) (om-make-color 0 0 0)) (list (list 1 51 0) (om-make-color 0 0 0)) (list (list 1 52) (om-make-color 0 0 0)) (list (list 1 52 0) (om-make-color 0 0 0)) (list (list 1 53) (om-make-color 0 0 0)) (list (list 1 53 0) (om-make-color 0 0 0)) (list (list 1 54) (om-make-color 0 0 0)) (list (list 1 54 0) (om-make-color 0 0 0)) (list (list 1 55) (om-make-color 0 0 0)) (list (list 1 55 0) (om-make-color 0 0 0)) (list (list 1 56) (om-make-color 0 0 0)) (list (list 1 56 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 2 30) (om-make-color 0 0 0)) (list (list 2 30 0) (om-make-color 0 0 0)) (list (list 2 31) (om-make-color 0 0 0)) (list (list 2 31 0) (om-make-color 0 0 0)) (list (list 2 32) (om-make-color 0 0 0)) (list (list 2 32 0) (om-make-color 0 0 0)) (list (list 2 33) (om-make-color 0 0 0)) (list (list 2 33 0) (om-make-color 0 0 0)) (list (list 2 34) (om-make-color 0 0 0)) (list (list 2 34 0) (om-make-color 0 0 0)) (list (list 2 35) (om-make-color 0 0 0)) (list (list 2 35 0) (om-make-color 0 0 0)) (list (list 2 36) (om-make-color 0 0 0)) (list (list 2 36 0) (om-make-color 0 0 0)) (list (list 2 37) (om-make-color 0 0 0)) (list (list 2 37 0) (om-make-color 0 0 0)) (list (list 2 38) (om-make-color 0 0 0)) (list (list 2 38 0) (om-make-color 0 0 0)) (list (list 2 39) (om-make-color 0 0 0)) (list (list 2 39 0) (om-make-color 0 0 0)) (list (list 2 40) (om-make-color 0 0 0)) (list (list 2 40 0) (om-make-color 0 0 0)) (list (list 2 41) (om-make-color 0 0 0)) (list (list 2 41 0) (om-make-color 0 0 0)) (list (list 2 42) (om-make-color 0 0 0)) (list (list 2 42 0) (om-make-color 0 0 0)) (list (list 2 43) (om-make-color 0 0 0)) (list (list 2 43 0) (om-make-color 0 0 0)) (list (list 2 44) (om-make-color 0 0 0)) (list (list 2 44 0) (om-make-color 0 0 0)) (list (list 2 45) (om-make-color 0 0 0)) (list (list 2 45 0) (om-make-color 0 0 0)) (list (list 2 46) (om-make-color 0 0 0)) (list (list 2 46 0) (om-make-color 0 0 0)) (list (list 2 47) (om-make-color 0 0 0)) (list (list 2 47 0) (om-make-color 0 0 0)) (list (list 2 48) (om-make-color 0 0 0)) (list (list 2 48 0) (om-make-color 0 0 0)) (list (list 2 49) (om-make-color 0 0 0)) (list (list 2 49 0) (om-make-color 0 0 0)) (list (list 2 50) (om-make-color 0 0 0)) (list (list 2 50 0) (om-make-color 0 0 0)) (list (list 2 51) (om-make-color 0 0 0)) (list (list 2 51 0) (om-make-color 0 0 0)) (list (list 2 52) (om-make-color 0 0 0)) (list (list 2 52 0) (om-make-color 0 0 0)) (list (list 2 53) (om-make-color 0 0 0)) (list (list 2 53 0) (om-make-color 0 0 0)) (list (list 2 54) (om-make-color 0 0 0)) (list (list 2 54 0) (om-make-color 0 0 0)) (list (list 2 55) (om-make-color 0 0 0)) (list (list 2 55 0) (om-make-color 0 0 0)) (list (list 2 56) (om-make-color 0 0 0)) (list (list 2 56 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 3/2 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 28 2))) t nil nil) (om-load-boxcall 'genfun "C2RHYTHM" 'c2rhythm '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "signature" "SIGNATURE" (list 143 32)) (om-load-inputfun 'input-funbox "times" "TIMES" 3)) (om-make-point 316 531) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 949 34) '"1 1 4 3 4 1 5 3 2 2 1 5 3 4 1 5 7 1 5 3 4 1 5 7 1 5 3 3 1 1 5 3 1 3 1 5 2 1 4 1 5 3 4 1 3 2 3 4 " "" (om-make-point 22 695) nil (om-make-color 122/255 8/85 1/17) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcall 'lispfun "FIRST" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 516 509) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 672 541) (om-make-point 36 20) 143 "143" nil) (om-load-boxcall 'genfun "N-STRUCTURE" 'n-structure '((om-load-inputfun 'input-funbox "values" "L" (list 5 7 9)) (om-load-inputfun 'input-funbox "n" "N" 12)) (om-make-point 608 601) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 579 54) '"Sieves and non-octaviant scales" "" (om-make-point 502 2) nil (om-make-color 191/255 8/51 2/51) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 19 590) (om-make-point 87 97) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6050 6100 6300 6450 6650 6700 6950 7100 7200 7300 7350 7600 7750 7950 8000 8250 8600 8650 8900 9050 9250 9300 9550 9900 9950 10200 10350 10500 10550 10600 10850 11000 11050 11200 11250 11500 11600 11650 11850 11900 12150 12300 12500 12550 12700 12800 12950 13150) :lvel (list 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 12) (om-make-color 0 0 0)) (list (list 13) (om-make-color 0 0 0)) (list (list 14) (om-make-color 0 0 0)) (list (list 15) (om-make-color 0 0 0)) (list (list 16) (om-make-color 0 0 0)) (list (list 17) (om-make-color 0 0 0)) (list (list 18) (om-make-color 0 0 0)) (list (list 19) (om-make-color 0 0 0)) (list (list 20) (om-make-color 0 0 0)) (list (list 21) (om-make-color 0 0 0)) (list (list 22) (om-make-color 0 0 0)) (list (list 23) (om-make-color 0 0 0)) (list (list 24) (om-make-color 0 0 0)) (list (list 25) (om-make-color 0 0 0)) (list (list 26) (om-make-color 0 0 0)) (list (list 27) (om-make-color 0 0 0)) (list (list 28) (om-make-color 0 0 0)) (list (list 29) (om-make-color 0 0 0)) (list (list 30) (om-make-color 0 0 0)) (list (list 31) (om-make-color 0 0 0)) (list (list 32) (om-make-color 0 0 0)) (list (list 33) (om-make-color 0 0 0)) (list (list 34) (om-make-color 0 0 0)) (list (list 35) (om-make-color 0 0 0)) (list (list 36) (om-make-color 0 0 0)) (list (list 37) (om-make-color 0 0 0)) (list (list 38) (om-make-color 0 0 0)) (list (list 39) (om-make-color 0 0 0)) (list (list 40) (om-make-color 0 0 0)) (list (list 41) (om-make-color 0 0 0)) (list (list 42) (om-make-color 0 0 0)) (list (list 43) (om-make-color 0 0 0)) (list (list 44) (om-make-color 0 0 0)) (list (list 45) (om-make-color 0 0 0)) (list (list 46) (om-make-color 0 0 0)) (list (list 47) (om-make-color 0 0 0)) (list (list 48) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 1 1000 nil 2/5 1 1 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'ggff 24 4))) t nil nil) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 50)) (om-make-point 191 521) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 143) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 44 480) (om-make-point 92 86) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 143 :puntos (list (list 0 1 6 13 14 19 26 27 32 39 40 45 52 53 58 65 66 71 78 79 84 91 92 97 104 105 110 117 118 123 130 131 136 143)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcomment "comment" (om-make-point 57 29) '"13-9" "" (om-make-point 381 88) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"11-8" "" (om-make-point 514 78) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"11-4" "" (om-make-point 452 77) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"13-6" "" (om-make-point 145 329) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"13-1" "" (om-make-point 83 328) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"13-0" "" (om-make-point 8 329) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"11-2" "" (om-make-point 209 142) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"13-9" "" (om-make-point 329 41) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"13-7" "" (om-make-point 256 35) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"13-5" "" (om-make-point 185 17) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 57 29) '"13-3" "" (om-make-point 81 1) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 143) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 427 418) (om-make-point 92 86) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 143 :puntos (list (list 0 1 2 6 9 13 14 19 22 24 26 27 32 35 39 40 45 52 53 58 61 65 66 71 78 79 84 87 90 91 92 97 100 101 104 105 110 112 113 117 118 123 126 130 131 134 136 139 143)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'genfun "C-UNION1" 'c-union '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil) (om-load-inputfun 'input-funbox "no documentation" "REST" nil)) (om-make-point 261 436) (om-make-point 134 61) nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 143) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 392 254) (om-make-point 92 86) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 143 :puntos (list (list 9 22 35 61 87 100 113 126 139)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 13 9 143))) (om-make-point 384 114) (om-make-point 62 39) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 13 9 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-boxcall 'genfun "C-INTERSECTION" 'c-intersection '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil)) (om-make-point 455 332) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 143) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 288 255) (om-make-point 92 86) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 143 :puntos (list (list 2 13 24 79 90 101 112 123 134)) :from-file t)) nil nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 143) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 278 141) (om-make-point 92 86) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 143 :puntos (list (list 2 13 24 35 46 57 68 79 90 101 112 123 134)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 11 2 143))) (om-make-point 203 174) (om-make-point 67 42) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 11 2 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-boxcall 'genfun "C-INTERSECTION" 'c-intersection '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil)) (om-make-point 182 275) nil nil nil nil 1) (om-load-boxcall 'genfun "C-UNION1" 'c-union '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil) (om-load-inputfun 'input-funbox "no documentation" "REST" nil)) (om-make-point 47 413) (om-make-point 134 61) nil nil nil 1) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 13 6 143))) (om-make-point 142 357) (om-make-point 63 43) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 13 6 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 13 1 143))) (om-make-point 76 355) (om-make-point 63 45) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 13 1 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 13 0 143))) (om-make-point 5 355) (om-make-point 65 42) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 13 0 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-boxcall 'genfun "C-COMPLEMENT1" 'c-complement '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil)) (om-make-point 496 239) nil nil nil nil 1) (om-load-boxcall 'genfun "C-UNION1" 'c-union '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil)) (om-make-point 454 167) (om-make-point 107 61) nil nil nil 1) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 11 8 143))) (om-make-point 510 104) (om-make-point 57 44) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 11 8 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 11 4 143))) (om-make-point 451 105) (om-make-point 57 44) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 11 4 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 13 9 143))) (om-make-point 321 69) (om-make-point 59 40) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 13 9 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 13 7 143))) (om-make-point 247 62) (om-make-point 61 38) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 13 7 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 13 5 143))) (om-make-point 175 45) (om-make-point 66 43) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 13 5 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 143) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 86 30) (om-make-point 79 80) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 143 :puntos (list (list 3 16 29 42 55 68 81 94 107 120 133)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 13 3 143))) (om-make-point 10 42) (om-make-point 65 47) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 13 3 143) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-boxcall 'genfun "C-UNION1" 'c-union '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil) (om-load-inputfun 'input-funbox "no documentation" "REST" nil) (om-load-inputfun 'input-funbox "no documentation" "REST" nil)) (om-make-point 39 155) (om-make-point 105 61) nil nil nil 1) (om-load-boxcall 'genfun "C-COMPLEMENT1" 'c-complement '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil)) (om-make-point 78 222) nil nil nil nil 1)) '((2 0 1 0 nil 0) (22 0 2 0 nil 0) (22 2 4 0 nil 0) (4 0 6 0 nil 0) (5 0 6 1 nil 0) (9 0 8 0 nil 0) (22 0 9 0 nil 0) (31 0 23 0 nil 0) (30 0 23 1 nil 0) (26 0 23 2 nil 0) (25 0 26 0 nil 0) (35 0 26 1 nil 0) (45 0 30 0 nil 0) (29 0 30 1 nil 0) (34 0 31 0 nil 0) (33 0 31 1 nil 0) (32 0 31 2 nil 0) (36 0 35 0 nil 0) (38 0 36 0 nil 0) (37 0 36 1 nil 0) (43 0 44 0 nil 0) (41 0 44 1 nil 0) (40 0 44 2 nil 0) (39 0 44 3 nil 0) (44 0 45 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-sieves3|))) (setf (thepict newpict) (om-get-picture '|USER-sieves3|)) (setf (name newpict) '|USER-sieves3|) (setf (pict-pos newpict) (om-make-point 569 67)) (setf (pict-size newpict) (om-make-point 459 415)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 12 488)) (setf (pict-size newpict) (om-make-point 1029 181)) newpict)) 5.0))
