; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 153 16) (om-make-point 298 248) (om-make-point 1031 686) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "03-sievetl" '((om-load-editor-box1 "CHORD2" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 780 358) (om-make-point 78 157) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100 6300 6400 6500 6700 6900 7000 7100) :lvel (list 100 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 1 1 nil 1000 1 18350450 2621450 0 0))) t nil nil) (om-load-editor-box1 "CHORD1" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 779 192) (om-make-point 76 113) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6300 6600 6900) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 1 1 nil 1000 0 18350450 2621450 0 0))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 780 72) (om-make-point 72 113) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6400 6800) :lvel (list 100 100 100) :loffset (list 0 0 0) :ldur (list 1000 1000 1000) :lchan (list 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 1 1 nil 1000 0 18350450 2621450 0 0))) t nil nil) (om-load-boxcomment "comment" (om-make-point 120 35) '"Mode #6" "" (om-make-point 457 420) nil (om-make-color 52/85 28/255 22/85) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 44 26) '"3-0" "" (om-make-point 731 275) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 44 26) '"4-0" "" (om-make-point 733 74) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 44 26) '"4-2" "" (om-make-point 520 184) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 44 26) '"4-0" "" (om-make-point 412 183) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 44 26) '"3-1" "" (om-make-point 343 132) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 44 26) '"4-3" "" (om-make-point 274 58) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 44 26) '"4-1" "" (om-make-point 152 59) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 600 69) (om-make-point 131 118) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 4 8)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcomment "comment" (om-make-point 44 26) '"3-0" "" (om-make-point 37 61) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 604 187) (om-make-point 125 121) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 3 6 9)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 596 357) (om-make-point 153 162) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 1 3 4 5 7 9 10 11)) :from-file t)) nil nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'genfun "REVEL-CRIBLE" 'revel-crible '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil)) (om-make-point 426 344) nil nil nil nil 1) (om-load-boxcall 'genfun "C-COMPLEMENT1" 'c-complement '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil)) (om-make-point 251 415) nil nil nil nil 1) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 4 0 12))) (om-make-point 403 209) (om-make-point 66 43) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 4 0 12) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 4 2 12))) (om-make-point 509 209) (om-make-point 66 43) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 4 2 12) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-boxcall 'genfun "C-UNION1" 'c-union '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil)) (om-make-point 459 256) nil nil nil nil 1) (om-load-boxcall 'genfun "C-INTERSECTION" 'c-intersection '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil)) (om-make-point 286 315) nil nil nil "c-intersection" 1) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 3 1 12))) (om-make-point 328 159) (om-make-point 66 43) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 3 1 12) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-boxcall 'genfun "C-COMPLEMENT1" 'c-complement '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil)) (om-make-point 287 215) nil nil nil nil 1) (om-load-boxcall 'genfun "C-UNION1" 'c-union '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil)) (om-make-point 193 283) nil nil nil nil 1) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 4 3 12))) (om-make-point 258 84) (om-make-point 66 43) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 4 3 12) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 4 1 12))) (om-make-point 138 84) (om-make-point 66 43) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 4 1 12) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-boxcall 'genfun "C-COMPLEMENT1" 'c-complement '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil)) (om-make-point 66 138) nil nil nil nil 1) (om-load-boxcall 'genfun "C-UNION1" 'c-union '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil)) (om-make-point 213 160) nil nil nil "c-union" 1) (om-load-editor-box1 "CRIBLE" 'crible '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CR-EXP" (list 3 0 12))) (om-make-point 34 83) (om-make-point 66 43) (if (find-class 'crible nil) (make-instance 'crible :cr-exp (list 3 0 12) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) nil nil nil) (om-load-boxcall 'genfun "C-INTERSECTION" 'c-intersection '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CRIBLE" nil)) (om-make-point 91 221) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 751 54) '"Sieves and transposition limited modes" "" (om-make-point 95 2) nil (om-make-color 52/85 28/255 22/85) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((15 0 14 2 nil 0) (16 0 15 0 nil 0) (20 0 16 0 nil 0) (17 0 19 0 nil 0) (18 0 19 1 nil 0) (23 0 20 0 nil 0) (19 0 20 1 nil 0) (21 0 22 0 nil 0) (29 0 23 0 nil 0) (22 0 23 1 nil 0) (28 0 26 0 nil 0) (25 0 27 0 nil 0) (24 0 27 1 nil 0) (26 0 29 0 nil 0) (27 0 29 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 479 71)) (setf (pict-size newpict) (om-make-point 482 563)) newpict)) 5.0))
