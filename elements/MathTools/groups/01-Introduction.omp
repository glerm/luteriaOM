; OM File Header - Saved 2014/04/26 5:42:25
; (6.080003 :patc (om-make-point 165 16) (om-make-point 16 0) (om-make-point 1057 719) "non documentation" 183 0 nil "2014/04/26 5:42:25")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/ciel\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "01-Introduction" (quote ((om-load-boxcall (quote genfun) "ALLCLASSES1" (quote allclasses) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "N" nil) (om-load-inputfun (quote input-funbox) "no documentation" "K" nil))) (om-make-point 764 161) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 96 28) (quote "34 solutions") "" (om-make-point 925 393) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 124 106) (quote "Affine $group") "" (om-make-point 910 247) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family "Georgia" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 707 377) (om-make-point 207 253) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 4 5 6) (list 0 1 2 3 4 6) (list 0 1 2 4 6 7) (list 0 1 2 3 4 5) (list 0 1 3 4 5 7) (list 0 1 2 3 5 7) (list 0 1 3 4 7 8) (list 0 1 2 3 6 7) (list 0 1 3 4 6 9) (list 0 1 3 4 7 9) (list 0 1 3 6 7 9) (list 0 1 2 5 6 8) (list 0 2 3 5 6 8) (list 0 1 2 3 4 7) (list 0 2 3 4 6 9) (list 0 1 2 3 4 8) (list 0 1 2 3 6 8) (list 0 1 2 6 7 8) (list 0 1 4 5 8 9) (list 0 1 2 5 6 7) (list 0 2 3 4 5 7) (list 0 1 4 5 6 8) (list 0 1 2 4 7 8) (list 0 1 2 4 5 7) (list 0 1 2 3 6 9) (list 0 1 3 4 5 8) (list 0 1 3 4 6 7) (list 0 2 3 4 5 8) (list 0 1 2 4 5 8) (list 0 1 3 5 6 9) (list 0 1 2 3 5 6) (list 0 1 2 4 6 8) (list 0 2 3 4 6 8) (list 0 2 4 6 8 10)) :from-file t)) "x" nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 702 299) nil (list 34) "x" nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 827 109) (om-make-point 24 36) 6 "6" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 726 108) (om-make-point 24 28) 12 "12" nil) (om-load-boxcall (quote genfun) "DN-ORBITES" (quote dn-orbites) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 3))) (om-make-point 412 122) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :vector) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 404 203) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 152 93) (quote "Dihedral group$") "" (om-make-point 504 263) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family "Georgia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 123 92) (quote "Cyclic group$") "" (om-make-point 24 271) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family "Georgia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 72 21) (quote "k-chord") "" (om-make-point 523 106) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 346 387) (om-make-point 178 241) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 3 4 5) (list 0 1 2 3 4 6) (list 0 1 2 3 5 6) (list 0 1 2 4 5 6) (list 0 1 2 3 6 7) (list 0 1 2 5 6 7) (list 0 1 2 6 7 8) (list 0 2 3 4 5 7) (list 0 1 2 3 5 7) (list 0 1 3 4 5 7) (list 0 1 2 4 5 7) (list 0 1 2 4 6 7) (list 0 1 3 4 6 7) (list 0 1 3 4 5 8) (list 0 1 2 4 5 8) (list 0 1 4 5 6 8) (list 0 1 2 4 7 8) (list 0 1 2 5 7 8) (list 0 1 3 4 7 8) (list 0 1 4 5 8 9) (list 0 2 3 4 6 8) (list 0 1 2 4 6 8) (list 0 2 3 5 6 8) (list 0 1 3 4 6 8) (list 0 1 3 5 6 8) (list 0 1 3 5 7 8) (list 0 1 3 4 6 9) (list 0 1 3 5 6 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 9) (list 0 1 3 5 8 9) (list 0 2 4 5 7 9) (list 0 2 3 5 7 9) (list 0 1 3 5 7 9) (list 0 2 4 6 8 10) (list 0 1 2 3 4 7) (list 0 1 2 3 4 8) (list 0 1 2 3 7 8) (list 0 2 3 4 5 8) (list 0 1 2 3 5 8) (list 0 1 2 3 6 8) (list 0 1 2 3 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 9) (list 0 2 3 4 6 9) (list 0 1 2 4 6 9) (list 0 1 2 4 7 9) (list 0 1 2 5 7 9) (list 0 1 3 4 7 9) (list 0 1 4 6 7 9)) :from-file t)) "x" nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 498 108) (om-make-point 25 34) 6 "6" nil) (om-load-boxcomment "comment" (om-make-point 87 27) (quote "50 solutions") "" (om-make-point 530 399) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 82 46) (quote "80 solutions") "" (om-make-point 21 404) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 72 21) (quote "k-chord") "" (om-make-point 260 111) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 103 43) (quote "n-tempered system$") "" (om-make-point 96 137) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 889 56) (quote "Cyclic, dihedral and affines catalogues of chords") "" (om-make-point 66 11) nil (om-make-color 97/255 47/255 26/85) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 124 387) (om-make-point 196 248) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 5 7 8) (list 0 1 3 5 6 10) (list 0 1 3 5 6 9) (list 0 1 3 5 6 8) (list 0 1 3 4 8 10) (list 0 1 3 4 8 9) (list 0 1 3 4 7 10) (list 0 1 3 4 7 9) (list 0 1 3 4 7 8) (list 0 1 3 4 6 10) (list 0 1 3 4 6 9) (list 0 1 3 4 6 8) (list 0 1 3 4 6 7) (list 0 1 2 7 9 10) (list 0 1 2 7 8 10) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 8 9) (list 0 1 2 6 7 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 5 8 10) (list 0 1 2 5 8 9) (list 0 1 2 5 7 10) (list 0 1 2 5 7 9) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 5 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 7) (list 0 1 2 4 9 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 7 10) (list 0 1 2 4 7 9) (list 0 1 2 4 7 8) (list 0 1 2 4 6 10) (list 0 1 2 4 6 9) (list 0 1 2 4 6 8) (list 0 1 2 4 6 7) (list 0 1 2 4 5 10) (list 0 1 2 4 5 9) (list 0 1 2 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 4 5 6) (list 0 1 2 3 9 10) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 7 10) (list 0 1 2 3 7 9) (list 0 1 2 3 7 8) (list 0 1 2 3 6 10) (list 0 1 2 3 6 9) (list 0 1 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 9) (list 0 1 2 3 5 8) (list 0 1 2 3 5 7) (list 0 1 2 3 5 6) (list 0 1 2 3 4 10) (list 0 1 2 3 4 9) (list 0 1 2 3 4 8) (list 0 1 2 3 4 7) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 234 109) (om-make-point 24 35) 6 "6" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 184 148) (om-make-point 36 37) 12 "12" nil) (om-load-boxcall (quote genfun) "ORBITES" (quote orbites) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6) (om-load-inputfun (quote input-funbox) "how many answers" "HOWMANY" 4))) (om-make-point 162 230) (om-make-point 172 61) (list (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 5 7 8) (list 0 1 3 5 6 10) (list 0 1 3 5 6 9) (list 0 1 3 5 6 8) (list 0 1 3 4 8 10) (list 0 1 3 4 8 9) (list 0 1 3 4 7 10) (list 0 1 3 4 7 9) (list 0 1 3 4 7 8) (list 0 1 3 4 6 10) (list 0 1 3 4 6 9) (list 0 1 3 4 6 8) (list 0 1 3 4 6 7) (list 0 1 2 7 9 10) (list 0 1 2 7 8 10) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 8 9) (list 0 1 2 6 7 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 5 8 10) (list 0 1 2 5 8 9) (list 0 1 2 5 7 10) (list 0 1 2 5 7 9) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 5 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 7) (list 0 1 2 4 9 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 7 10) (list 0 1 2 4 7 9) (list 0 1 2 4 7 8) (list 0 1 2 4 6 10) (list 0 1 2 4 6 9) (list 0 1 2 4 6 8) (list 0 1 2 4 6 7) (list 0 1 2 4 5 10) (list 0 1 2 4 5 9) (list 0 1 2 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 4 5 6) (list 0 1 2 3 9 10) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 7 10) (list 0 1 2 3 7 9) (list 0 1 2 3 7 8) (list 0 1 2 3 6 10) (list 0 1 2 3 6 9) (list 0 1 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 9) (list 0 1 2 3 5 8) (list 0 1 2 3 5 7) (list 0 1 2 3 5 6) (list 0 1 2 3 4 10) (list 0 1 2 3 4 9) (list 0 1 2 3 4 8) (list 0 1 2 3 4 7) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5))) "x" nil 1) (om-load-boxcall (quote genfun) "CARD" (quote card) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6))) (om-make-point 287 161) nil nil nil nil 1))) (quote ((6 0 0 0 nil 0) (5 0 0 1 nil 0) (0 0 3 2 nil 0) (0 0 4 0 nil 0) (13 0 7 0 nil 0) (7 0 8 1 nil 0) (8 0 12 2 nil 0) (22 0 19 2 nil 0) (21 0 22 0 nil 0) (20 0 22 1 nil 2) (23 0 22 2 nil 0) (21 0 23 0 nil 0) (20 0 23 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "ciel" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture (quote |USER-ciel|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 15 56)) (setf (pict-size newpict) (om-make-point 1032 165)) newpict) (let ((newpict (make-instance (quote patch-picture) :name "ciel" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture (quote |USER-ciel|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 233 422)) (setf (pict-size newpict) (om-make-point 636 204)) newpict)) 6.080003))