; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 39 19) (om-make-point 117 151) (om-make-point 1200 702) "non documentation" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "01-aff" '((om-load-boxcall 'genfun "ALLCLASSES1" 'allclasses '((om-load-inputfun 'input-funbox "no documentation" "N" nil) (om-load-inputfun 'input-funbox "no documentation" "K" nil)) (om-make-point 237 201) nil nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 534 528) nil nil nil nil 1) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 414 563) (om-make-point 55 90) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6100 6200 6300) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" 1) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 437 305) nil nil nil nil 1) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 829 563) (om-make-point 55 90) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6700 6200 6900) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 723 522) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 619 373) (om-make-point 108 122) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 7 2 9)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 415 370) (om-make-point 132 137) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 3)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 646 253) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 633 186) (om-make-point 11 20) 7 "7" nil) (om-load-boxcall 'genfun "MOD*" 'mod* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0) (om-load-inputfun 'input-funbox "second input" "N" 12)) (om-make-point 612 268) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 231 49) '"Affine orbits" "" (om-make-point 122 614) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 137 367) (om-make-point 179 165) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 4 7) (list 0 1 2 3) (list 0 1 3 4) (list 0 1 3 6) (list 0 1 4 8) (list 0 1 3 5) (list 0 2 4 6) (list 0 1 2 7) (list 0 1 6 7) (list 0 1 5 6) (list 0 2 6 8) (list 0 2 4 8) (list 0 1 2 6) (list 0 2 3 5) (list 0 1 2 5) (list 0 3 4 7) (list 0 1 4 5) (list 0 1 2 4) (list 0 1 4 6) (list 0 2 3 6) (list 0 3 6 9)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 170 303) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 284 147) (om-make-point 23 20) 4 "4" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 212 148) (om-make-point 23 20) 12 "12" nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 36 559) (om-make-point 55 90) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6700 6200 6900) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 69 467) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 25 327) (om-make-point 85 99) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 7 2 9)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 0 169) (om-make-point 87 110) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 3)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 61 106) (om-make-point 72 20) (list 0 1 2 3) "(0 1 2 3)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 156 192) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 143 125) (om-make-point 11 20) 7 "7" nil) (om-load-boxcall 'genfun "MOD*" 'mod* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0) (om-load-inputfun 'input-funbox "second input" "N" 12)) (om-make-point 122 207) nil nil nil "mod*" 1) (om-load-boxcomment "comment" (om-make-point 976 58) '"Affine transformations and the chromatic/diatonic duality" "" (om-make-point 65 0) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 348 103) '"The diatonic operator M7 = 7x " "" (om-make-point 754 152) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family nil :style 'nil :mode nil))) '((15 0 0 0 nil 0) (14 0 0 1 nil 0) (7 0 1 0 nil 0) (1 0 2 0 nil 0) (12 2 3 1 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (10 0 6 2 nil 0) (3 0 7 2 nil 0) (3 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (0 0 12 2 nil 0) (0 0 13 0 nil 0) (17 0 16 0 nil 0) (18 0 17 0 nil 0) (23 0 18 2 nil 0) (20 0 19 2 nil 0) (20 0 23 0 nil 0) (22 0 23 1 nil 0) (21 0 23 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 322 56)) (setf (pict-size newpict) (om-make-point 293 311)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 20 377)) (setf (pict-size newpict) (om-make-point 1008 240)) newpict)) 5.0))
