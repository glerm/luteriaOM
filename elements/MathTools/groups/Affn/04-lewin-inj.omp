; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 248 17) (om-make-point 163 68) (om-make-point 1021 800) "No documentation " 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "04-lewin-inj" '((om-load-boxcomment "comment" (om-make-point 504 54) '"IFUNC(X,Y)(i) = INJ(X,Y)(Ti)" "" (om-make-point 432 366) nil (om-make-color 127/255 37/255 43/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 315 49) '"(1 1 1 1 1 1 0 3 0 0 2 1)" "" (om-make-point 1 562) nil (om-make-color 127/255 37/255 43/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "IFUNC" 'ifunc '((om-load-inputfun 'input-funbox "first set" "SET1" (list 0 3 7)) (om-load-inputfun 'input-funbox "second set" "SET2" (list 0 4 7)) (om-load-inputfun 'input-funbox "modulo" "MOD" 12)) (om-make-point 77 481) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 384 401) (om-make-point 11 20) 7 "7" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 161 378) (om-make-point 85 20) (list 2 5 7 11) "(2 5 7 11)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 39 378) (om-make-point 96 20) (list 0 4 7) "(0 4 7)" nil) (om-load-boxcomment "comment" (om-make-point 300 81) '"IFUNC(X,Y)(i) = # (a,b) : $int(a,b) = i" "" (om-make-point 440 264) nil (om-make-color 176/255 181/255 8/51) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "INJ-TRANSP" 'inj-transp '((om-load-inputfun 'input-funbox "first set" "SET1" (list 0 4 7)) (om-load-inputfun 'input-funbox "second set" "SET2" (list 2 5 7 11)) (om-load-inputfun 'input-funbox "function" "K" 7) (om-load-inputfun 'input-funbox "function" "MOD" 12)) (om-make-point 330 479) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 27 38) '"Y" "" (om-make-point 338 89) nil (om-make-color 127/255 37/255 43/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "CHORD1" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 190 131) (om-make-point 55 90) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200 6700 7100) :lvel (list 100 100 100) :loffset (list 0 0 0) :ldur (list 1000 1000 1000) :lchan (list 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-boxcomment "comment" (om-make-point 36 27) '"T7" "" (om-make-point 123 275) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 27) '"-->" "" (om-make-point 123 296) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 321 130) (om-make-point 61 91) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200 6500 6700 7100) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 295 233) (om-make-point 107 121) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 2 5 7 11)) :from-file t)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 172 234) (om-make-point 98 119) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 2 7 11)) :from-file t)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 41 131) (om-make-point 47 91) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6400 6700) :lvel (list 100 100 100) :loffset (list 0 0 0) :ldur (list 1000 1000 1000) :lchan (list 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 19 230) (om-make-point 100 114) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 4 7)) :from-file t)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcomment "comment" (om-make-point 27 38) '"X" "" (om-make-point 49 92) nil (om-make-color 127/255 37/255 43/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 491 74) '"INJ(X,Y)(f) = # of elements x of X such that f(x) belongs to Y" "" (om-make-point 439 192) nil (om-make-color 16/85 176/255 6/17) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 301 103) '"GIS = (S, IVLS, int)$X and Y subsets of S$f transformation on S" "" (om-make-point 441 81) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 938 54) '"Interval function (IFUNC) and injection number (INJ)$" "" (om-make-point 63 6) nil (om-make-color 0 0 0) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((5 0 2 0 nil 0) (4 0 2 1 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0) (3 0 7 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 25 415)) (setf (pict-size newpict) (om-make-point 873 148)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 78 57)) (setf (pict-size newpict) (om-make-point 293 311)) newpict)) 5.0))
