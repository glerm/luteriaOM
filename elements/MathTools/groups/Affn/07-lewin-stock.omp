; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 245 105) (om-make-point 1 200) (om-make-point 1099 828) "non documentation" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "07-lewin-stock" '((om-load-boxcomment "comment2" (om-make-point 393 32) '"D. Lewin: Musical Form and Transformation" "" (om-make-point 6 90) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment4111" (om-make-point 41 40) '"T8" "" (om-make-point 259 420) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment411" (om-make-point 22 39) '"J" "" (om-make-point 270 354) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment41" (om-make-point 22 39) '"J" "" (om-make-point 269 281) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment2" (om-make-point 328 44) '"Transformational Analysis" "" (om-make-point 29 44) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment4" (om-make-point 53 45) '"T6" "" (om-make-point 253 204) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment3" (om-make-point 288 50) '"Klavierstück III $" "" (om-make-point 537 38) nil (om-make-color 0 0 0) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment2" (om-make-point 273 40) '"Karlheinz Stockhausen" "" (om-make-point 538 5) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment1" (om-make-point 135 42) '"(1952-53)" "" (om-make-point 837 78) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 127 35) '"mm. 8-10" "" (om-make-point 10 435) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxinstance "CHORD-SEQ8" (let ((copy (make-instance 'ominstance :name "mm. 2-5" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7800 7600 5300 5500) (7000) (7600 7700 6600 5500) (7000)) :lonset '(0 1000 3500 4500 7000) :ldur '((3000 3000 3000 3000) (2000) (3000 3000 3000 3000) (2000)) :lvel '((80 80 80 80) (80) (80 80 80 80) (80)) :loffset '((0 0 0 0) (0) (0 0 0 0) (0)) :lchan '((1 1 1 1) (2) (1 1 1 1) (2)) :legato 0)))) (load-port-info newobj '((0 0 0 0) (0) (0 0 0 0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 39/100 nil 1000 0 18350450 2621450 0 0 't)))) copy) 'nil (om-make-point 145 594) nil) (om-load-boxinstance "CHORD-SEQ7" (let ((copy (make-instance 'ominstance :name "m. 1" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000 8300 6900 5600) (5000) (6200) (8000 7000 5700 5900)) :lonset '(0 1000 3500 4500 7000) :ldur '((3000 3000 3000 3000) (2000) (3000) (2000 2000 2000 2000)) :lvel '((80 80 80 80) (80) (80) (80 80 80 80)) :loffset '((0 0 0 0) (0) (0) (0 0 0 0)) :lchan '((1 1 1 1) (2) (2) (1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0) (0) (0) (0 0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 3 39/100 nil 1000 0 18350450 2621450 0 0 't)))) copy) 'nil (om-make-point 153 532) nil) (om-load-boxinstance "CHORD-SEQ6" (let ((copy (make-instance 'ominstance :name "mm. 8-10" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((8500) (7700 6600 6400 5500) (7600 7700 6600 5500) (7000)) :lonset '(0 1000 3500 4500 7000) :ldur '((3000) (2000 2000 2000 2000) (3000 3000 3000 3000) (2000)) :lvel '((80) (80 80 80 80) (80 80 80 80) (80)) :loffset '((0) (0 0 0 0) (0 0 0 0) (0)) :lchan '((2) (1 1 1 1) (1 1 1 1) (2)) :legato 0)))) (load-port-info newobj '((0) (0 0 0 0) (0 0 0 0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 39/100 nil 1000 0 18350450 2621450 0 0 't)))) copy) 'nil (om-make-point 140 437) nil) (om-load-boxinstance "CHORD-SEQ5" (let ((copy (make-instance 'ominstance :name "mm. 5-7 " :icon 138))) (setf (instance copy) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7600 7700 7500 6200) (8000) (7600 7700 7500 6200) (5900)) :lonset '(0 1000 3500 4500 7000) :ldur '((3000 3000 3000 3000) (2000) (3000 3000 3000 3000) (2000)) :lvel '((80 80 80 80) (80) (80 80 80 80) (80)) :loffset '((0 0 0 0) (0) (0 0 0 0) (0)) :lchan '((1 1 1 1) (2) (1 1 1 1) (2)) :legato 0)))) (load-port-info newobj '((0 0 0 0) (0) (0 0 0 0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 39/100 nil 1000 0 18350450 2621450 0 0 't)))) copy) 'nil (om-make-point 140 304) nil) (om-load-boxinstance "CHORD-SEQ4" (let ((copy (make-instance 'ominstance :name "mm. 2-3" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((5900) (5200 6200 6500 7500) (5200 6200 6500 7500) (6800)) :lonset '(0 1000 3500 4500 7000) :ldur '((3000) (2000 2000 2000 2000) (3000 3000 3000 3000) (2000)) :lvel '((80) (80 80 80 80) (80 80 80 80) (80)) :loffset '((0) (0 0 0 0) (0 0 0 0) (0)) :lchan '((2) (1 1 1 1) (1 1 1 1) (2)) :legato 0)))) (load-port-info newobj '((0) (0 0 0 0) (0 0 0 0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 2 0 39/100 nil 1000 0 18350450 2621450 0 0 't)))) copy) 'nil (om-make-point 139 227) nil) (om-load-boxinstance "CHORD-SEQ3" (let ((copy (make-instance 'ominstance :name "mm. 1-2" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000 8300 6900 5600) (5000) (8100 9200 7000 5900) (6500)) :lonset '(0 1000 3500 4500 7000) :ldur '((3000 3000 3000 3000) (2000) (3000 3000 3000 3000) (2000)) :lvel '((80 80 80 80) (80) (80 80 80 80) (80)) :loffset '((0 0 0 0) (0) (0 0 0 0) (0)) :lchan '((1 1 1 1) (2) (1 1 1 1) (2)) :legato 0)))) (load-port-info newobj '((0 0 0 0) (0) (0 0 0 0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 2 3 39/100 nil 1000 0 18350450 2621450 0 0 't)))) copy) 'nil (om-make-point 140 162) nil) (om-load-boxinstance "CHORD-SEQ2" (let ((copy (make-instance 'ominstance :name "mm. 5-7 " :icon 138))) (setf (instance copy) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (8000 7000 5700 5900) (8000 7000 5700 5900) (7700)) :lonset '(0 1000 3500 4500 7000) :ldur '((3000) (2000 2000 2000 2000) (3000 3000 3000 3000) (2000)) :lvel '((80) (80 80 80 80) (80 80 80 80) (80)) :loffset '((0) (0 0 0 0) (0 0 0 0) (0)) :lchan '((2) (1 1 1 1) (1 1 1 1) (2)) :legato 0)))) (load-port-info newobj '((0) (0 0 0 0) (0 0 0 0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 39/100 nil 1000 0 18350450 2621450 0 0 't)))) copy) 'nil (om-make-point 146 372) nil) (om-load-boxcomment "comment" (om-make-point 41 37) '"T0" "" (om-make-point 272 595) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 76 40) '"===>" "" (om-make-point 258 638) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 76 40) '"===>" "" (om-make-point 255 549) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 42 37) '"P8" "" (om-make-point 333 639) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 120 37) '"mm. 2-5" "" (om-make-point 13 600) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 22 36) '"P" "" (om-make-point 344 548) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 22 36) '"P" "" (om-make-point 221 550) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 96 34) '" ===>" "" (om-make-point 244 447) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 111 34) '"mm. 5-7 " "" (om-make-point 21 370) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 25 36) '"p" "" (om-make-point 362 377) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 22 36) '"P" "" (om-make-point 202 381) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 93 35) '" ===>" "" (om-make-point 242 237) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 48 39) '"p6" "" (om-make-point 356 304) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 42 37) '"P6" "" (om-make-point 197 310) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 69 38) '"m. 1" "" (om-make-point 27 545) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 108 35) '"mm. 5-7 " "" (om-make-point 21 301) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 108 32) '"mm. 2-3" "" (om-make-point 21 231) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 117 36) '"mm. 1-2" "" (om-make-point 20 166) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 42 37) '"P8" "" (om-make-point 216 638) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 96 34) '" ===>" "" (om-make-point 242 380) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 48 39) '"p8" "" (om-make-point 199 443) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 42 37) '"P8" "" (om-make-point 350 439) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 89 34) '" ===>" "" (om-make-point 237 170) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 48 39) '"p6" "" (om-make-point 189 233) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 94 35) '" ===>" "" (om-make-point 242 306) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 22 36) '"P" "" (om-make-point 190 166) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 78 45) '"J=T7I" "" (om-make-point 241 137) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 25 36) '"p" "" (om-make-point 361 163) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 42 37) '"P6" "" (om-make-point 354 232) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil))) 'nil (list (let ((newpict (make-instance 'patch-picture :name '|USER-stock1|))) (setf (thepict newpict) (om-get-picture '|USER-stock1|)) (setf (name newpict) '|USER-stock1|) (setf (pict-pos newpict) (om-make-point 453 92)) (setf (pict-size newpict) (om-make-point 470 312)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-stock2|))) (setf (thepict newpict) (om-get-picture '|USER-stock2|)) (setf (name newpict) '|USER-stock2|) (setf (pict-pos newpict) (om-make-point 447 404)) (setf (pict-size newpict) (om-make-point 479 335)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 126 111)) (setf (pict-size newpict) (om-make-point 71 617)) newpict)) 5.0))
