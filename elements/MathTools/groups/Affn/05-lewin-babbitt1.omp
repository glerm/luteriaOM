; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 36 101) (om-make-point 50 50) (om-make-point 1038 863) "non documentation" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "05-lewin-babbitt1" '((om-load-boxcall 'genfun "IFUNC" 'ifunc '((om-load-inputfun 'input-funbox "first set" "SET1" (list 0 3 7)) (om-load-inputfun 'input-funbox "second set" "SET2" (list 0 4 7)) (om-load-inputfun 'input-funbox "modulo" "MOD" 12)) (om-make-point 806 618) nil nil nil nil 1) (om-load-boxcall 'genfun "IFUNC" 'ifunc '((om-load-inputfun 'input-funbox "first set" "SET1" (list 0 3 7)) (om-load-inputfun 'input-funbox "second set" "SET2" (list 0 4 7)) (om-load-inputfun 'input-funbox "modulo" "MOD" 12)) (om-make-point 281 618) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 30 40) '"Y" "" (om-make-point 828 261) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 30 40) '"X " "" (om-make-point 442 266) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'lispfun "FIRST" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 884 500) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 30 23) '"80" "" (om-make-point 44 174) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 762 310) (om-make-point 177 158) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 2 3 6 7 9 11)) :from-file t)) nil nil (corrige (pairlis '(deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) 't))) t nil nil) (om-load-boxcall 'genfun "COMP" 'comp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FROM" 6) (om-load-inputfun 'input-funbox "no documentation" "TO" 6) (om-load-inputfun 'input-funbox "no documentation" "LIST" (list 0 1 2 7))) (om-make-point 598 254) nil nil nil nil 1) (om-load-boxcall 'lispfun "FIRST" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 448 460) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 377 319) (om-make-point 163 139) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 4 5 8 10)) :from-file t)) nil nil (corrige (pairlis '(deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) 't))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 93 321) (om-make-point 23 20) 3 "3" nil) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" nil) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 212 316) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 139 151) (om-make-point 169 135) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 5 7 8) (list 0 1 3 5 6 10) (list 0 1 3 5 6 9) (list 0 1 3 5 6 8) (list 0 1 3 4 8 10) (list 0 1 3 4 8 9) (list 0 1 3 4 7 10) (list 0 1 3 4 7 9) (list 0 1 3 4 7 8) (list 0 1 3 4 6 10) (list 0 1 3 4 6 9) (list 0 1 3 4 6 8) (list 0 1 3 4 6 7) (list 0 1 2 7 9 10) (list 0 1 2 7 8 10) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 8 9) (list 0 1 2 6 7 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 5 8 10) (list 0 1 2 5 8 9) (list 0 1 2 5 7 10) (list 0 1 2 5 7 9) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 5 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 7) (list 0 1 2 4 9 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 7 10) (list 0 1 2 4 7 9) (list 0 1 2 4 7 8) (list 0 1 2 4 6 10) (list 0 1 2 4 6 9) (list 0 1 2 4 6 8) (list 0 1 2 4 6 7) (list 0 1 2 4 5 10) (list 0 1 2 4 5 9) (list 0 1 2 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 4 5 6) (list 0 1 2 3 9 10) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 7 10) (list 0 1 2 3 7 9) (list 0 1 2 3 7 8) (list 0 1 2 3 6 10) (list 0 1 2 3 6 9) (list 0 1 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 9) (list 0 1 2 3 5 8) (list 0 1 2 3 5 7) (list 0 1 2 3 5 6) (list 0 1 2 3 4 10) (list 0 1 2 3 4 9) (list 0 1 2 3 4 8) (list 0 1 2 3 4 7) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) 't))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 79 81) (om-make-point 11 20) 6 "6" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 22 81) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'genfun "CARD" 'card '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6)) (om-make-point 41 109) nil nil nil nil 1) (om-load-boxcall 'genfun "ORBITES" 'orbites '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6) (om-load-inputfun 'input-funbox "how many answers" "HOWMANY" 4)) (om-make-point 127 81) nil nil "x" nil 1) (om-load-boxcomment "comment" (om-make-point 359 40) '"IFUNC(X,X)(i) = IFUNC(Y,Y)(i)" "" (om-make-point 426 189) nil (om-make-color 127/255 37/255 43/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 321 71) '"X = hexachord$Y = the complement of X" "" (om-make-point 428 104) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 226 38) '"GIS = (S, IVLS, int)" "" (om-make-point 425 72) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 697 51) '"Generalized Hexachord Theorem" "" (om-make-point 99 3) nil (om-make-color 0 0 0) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((4 0 0 0 nil 0) (4 0 0 1 nil 0) (8 0 1 0 nil 0) (8 0 1 1 nil 0) (6 2 4 0 nil 0) (7 0 6 2 nil 0) (8 0 7 3 nil 0) (9 2 8 0 nil 0) (11 0 9 2 nil 0) (10 0 11 0 nil 0) (12 2 11 1 nil 0) (16 0 12 2 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (15 0 16 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 34 345)) (setf (pict-size newpict) (om-make-point 636 204)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 78 57)) (setf (pict-size newpict) (om-make-point 293 311)) newpict)) 5.0))
