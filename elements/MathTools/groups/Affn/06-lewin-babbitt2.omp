; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 140 102) (om-make-point 50 50) (om-make-point 1068 751) "non documentation" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "06-lewin-babbitt2" '((om-load-boxcall 'genfun "INJ" 'inj '((om-load-inputfun 'input-funbox "first set" "SET1" (list 0 4 7)) (om-load-inputfun 'input-funbox "second set" "SET2" (list 2 5 7 11)) (om-load-inputfun 'input-funbox "function" "FUN" nil)) (om-make-point 581 536) nil nil nil nil 1) (om-load-boxcall 'genfun "INJ" 'inj '((om-load-inputfun 'input-funbox "first set" "SET1" (list 0 4 7)) (om-load-inputfun 'input-funbox "second set" "SET2" (list 2 5 7 11)) (om-load-inputfun 'input-funbox "function" "FUN" nil)) (om-make-point 188 566) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 26 36) '"Y" "" (om-make-point 731 263) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 26 36) '"X" "" (om-make-point 35 259) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 383 183) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 352 183) (om-make-point 17 20) 11 "11" nil) (om-load-boxcall 'genfun "MOD*" 'mod* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 11) (om-load-inputfun 'input-funbox "second input" "N" 12)) (om-make-point 362 218) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 410 102) '"X = hexachord$Y = the complement of X$f  = bijection between X and Y" "" (om-make-point 346 58) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 512 206) (om-make-point 163 139) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 11 9 6 5 2)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 773 501) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 683 499) (om-make-point 17 20) 11 "11" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 386 511) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'genfun "MOD*" 'mod* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 11) (om-load-inputfun 'input-funbox "second input" "N" 12)) (om-make-point 732 536) nil nil "l" nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 284 508) (om-make-point 17 20) 11 "11" nil) (om-load-boxcall 'genfun "MOD*" 'mod* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0) (om-load-inputfun 'input-funbox "second input" "N" 12)) (om-make-point 325 516) nil nil "l" nil 1) (om-load-boxcall 'lispfun "FIRST" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 708 375) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 763 202) (om-make-point 177 158) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 2 4 5 8 9 11)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'genfun "COMP" 'comp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FROM" 6) (om-load-inputfun 'input-funbox "no documentation" "TO" 6) (om-load-inputfun 'input-funbox "no documentation" "LIST" (list 0 1 2 7))) (om-make-point 471 359) nil nil nil nil 1) (om-load-boxcall 'lispfun "FIRST" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 283 349) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 67 223) (om-make-point 163 139) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 6 7 10)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 60 179) (om-make-point 13 20) 7 "7" nil) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" nil) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 112 180) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 70 45) (om-make-point 127 120) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 5 7 8) (list 0 1 3 5 6 10) (list 0 1 3 5 6 9) (list 0 1 3 5 6 8) (list 0 1 3 4 8 10) (list 0 1 3 4 8 9) (list 0 1 3 4 7 10) (list 0 1 3 4 7 9) (list 0 1 3 4 7 8) (list 0 1 3 4 6 10) (list 0 1 3 4 6 9) (list 0 1 3 4 6 8) (list 0 1 3 4 6 7) (list 0 1 2 7 9 10) (list 0 1 2 7 8 10) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 8 9) (list 0 1 2 6 7 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 5 8 10) (list 0 1 2 5 8 9) (list 0 1 2 5 7 10) (list 0 1 2 5 7 9) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 5 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 7) (list 0 1 2 4 9 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 7 10) (list 0 1 2 4 7 9) (list 0 1 2 4 7 8) (list 0 1 2 4 6 10) (list 0 1 2 4 6 9) (list 0 1 2 4 6 8) (list 0 1 2 4 6 7) (list 0 1 2 4 5 10) (list 0 1 2 4 5 9) (list 0 1 2 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 4 5 6) (list 0 1 2 3 9 10) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 7 10) (list 0 1 2 3 7 9) (list 0 1 2 3 7 8) (list 0 1 2 3 6 10) (list 0 1 2 3 6 9) (list 0 1 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 9) (list 0 1 2 3 5 8) (list 0 1 2 3 5 7) (list 0 1 2 3 5 6) (list 0 1 2 3 4 10) (list 0 1 2 3 4 9) (list 0 1 2 3 4 8) (list 0 1 2 3 4 7) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcomment "comment" (om-make-point 296 38) '"INJ(X,X)(f) = INJ(Y,Y)(f)" "" (om-make-point 714 79) nil (om-make-color 127/255 37/255 43/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 138 36) '"f inversion" "" (om-make-point 366 280) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 642 53) '"Generalized Hexachord Theorem" "" (om-make-point 149 0) nil (om-make-color 0 0 0) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((15 0 0 0 nil 0) (15 0 0 1 nil 0) (12 0 0 2 nil 0) (18 0 1 0 nil 0) (18 0 1 1 nil 0) (14 0 1 2 nil 0) (18 0 6 0 nil 0) (5 0 6 1 nil 0) (4 0 6 2 nil 0) (6 0 8 2 nil 0) (10 0 12 1 nil 0) (9 0 12 2 nil 0) (13 0 14 1 nil 0) (11 0 14 2 nil 0) (16 2 15 0 nil 0) (17 0 16 2 nil 0) (18 0 17 3 nil 0) (19 2 18 0 nil 0) (21 0 19 2 nil 0) (20 0 21 0 nil 0) (22 2 21 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 34 345)) (setf (pict-size newpict) (om-make-point 636 204)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 78 57)) (setf (pict-size newpict) (om-make-point 293 311)) newpict)) 5.0))
