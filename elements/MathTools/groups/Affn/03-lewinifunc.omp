; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 171 19) (om-make-point 20 166) (om-make-point 1249 770) "No documentation " 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "03-lewinifunc" '((om-load-boxcomment "comment" (om-make-point 231 46) '"D. Lewin: Generalized Musical Intervals and Transformations " "" (om-make-point 848 271) nil (om-make-color 0 0 0) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 339 44) '"<--- Lewin Interval function" "" (om-make-point 675 581) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 167 48) '"<--- Vector" "" (om-make-point 558 624) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 167 48) '"(0 0 1 1 1 0)" "" (om-make-point 386 625) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "IFUNC" 'ifunc '((om-load-inputfun 'input-funbox "first set" "SET1" (list 0 3 7)) (om-load-inputfun 'input-funbox "second set" "SET2" (list 0 4 7)) (om-load-inputfun 'input-funbox "modulo" "MOD" 12)) (om-make-point 480 428) nil nil nil "ifunc" 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 300 428) (om-make-point 138 136) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 4 7)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 543 428) (om-make-point 149 143) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 4 7)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 347 356) (om-make-point 59 20) (list 0 4 7) "(0 4 7)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 586 351) (om-make-point 57 20) (list 0 4 7) "(0 4 7)" nil) (om-load-boxcomment "comment" (om-make-point 309 48) '"(3 0 0 1 1 1 0 1 1 1 0 0)" "" (om-make-point 358 581) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':vector (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '6-z10)) (om-make-point 353 258) nil nil nil nil 1) (om-load-boxcall 'genfun "P-FORM" 'p-form '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':fn (list (list "fn" ':fn) (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 3 9 6 5 0))) (om-make-point 354 137) nil nil nil nil 1) (om-load-boxcall 'genfun "IFUNC" 'ifunc '((om-load-inputfun 'input-funbox "first set" "SET1" (list 0 3 7)) (om-load-inputfun 'input-funbox "second set" "SET2" (list 0 4 7)) (om-load-inputfun 'input-funbox "modulo" "MOD" 12)) (om-make-point 835 423) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 696 425) (om-make-point 118 139) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 4 7)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 895 423) (om-make-point 120 141) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 3 7)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 723 352) (om-make-point 55 20) (list 0 4 7) "(0 4 7)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 907 351) (om-make-point 56 20) (list 0 3 7) "(0 3 7)" nil) (om-load-boxcomment "comment" (om-make-point 309 48) '"(2 0 0 2 0 1 0 1 2 0 0 1)" "" (om-make-point 28 805) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 95 299) '"IFUNC=2$IFUNC=1$IFUNC=0$IFUNC=0$IFUNC=2$IFUNC=1$IFUNC=0$IFUNC=1$IFUNC=0$IFUNC=2$IFUNC=0$IFUNC=0$" "" (om-make-point 180 249) nil (om-make-color 127/255 37/255 43/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 50 298) '"-->$-->$-->$-->$-->$-->$-->$-->$-->$-->$-->$-->" "" (om-make-point 107 249) nil (om-make-color 5/17 98/255 209/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 63 298) '"i = 0 $i=1$i=2$i=3$i=4$i=5$i=6$i=7$i=8$i=9$i=10$i=11$   " "" (om-make-point 33 249) nil (om-make-color 127/255 37/255 43/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 276 85) (om-make-point 47 20) (list 0 4 7) "(0 4 7)" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 234 137) (om-make-point 78 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 4 7)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 71 86) (om-make-point 47 20) (list 0 3 7) "(0 3 7)" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 60 135) (om-make-point 78 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 3 7)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 405 49) '"IFUNC (i) = # (a,b) : int(a,b) = i" "" (om-make-point 421 176) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 343 63) '"GIS = (S, IVLS, int)" "" (om-make-point 444 96) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 1108 76) '"Generalized Interval System (GIS) and Interval function (IFUNC)" "" (om-make-point 65 2) nil (om-make-color 0 0 0) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((7 0 4 0 nil 0) (8 0 4 1 nil 0) (7 0 5 2 nil 0) (8 0 6 2 nil 0) (11 0 10 1 nil 0) (21 0 11 1 nil 0) (15 0 12 0 nil 0) (16 0 12 1 nil 0) (15 0 13 2 nil 0) (16 0 14 2 nil 0) (21 0 22 2 nil 0) (23 0 24 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-lewin|))) (setf (thepict newpict) (om-get-picture '|USER-lewin|)) (setf (name newpict) '|USER-lewin|) (setf (pict-pos newpict) (om-make-point 861 52)) (setf (pict-size newpict) (om-make-point 216 220)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 300 302)) (setf (pict-size newpict) (om-make-point 704 278)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 27 72)) (setf (pict-size newpict) (om-make-point 312 136)) newpict)) 5.0))
