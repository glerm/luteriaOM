; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 122 114) (om-make-point 50 50) (om-make-point 1126 763) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "05-TTL" '((om-load-boxcall 'genfun "TL-ZN1" 'tl-zn '((om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 917 131) nil nil nil "tl-zn" 1) (om-load-boxcomment "comment4" (om-make-point 125 57) '"<--- the complete list of chords with limited transposition" "" (om-make-point 959 297) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "CHORD-SEQ1" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 767 526) (om-make-point 312 97) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000 6200 6600 6800) (6000 6600) (6000 6100 6300 6600 6700 6900) (6000 6200 6300 6600 6800 6900) (6000 6100 6600 6700) (6000 6100 6200 6400 6600 6700 6800 7000) (6000 6100 6200 6600 6700 6800) (6000 6100 6200 6300 6600 6700 6800 6900) (6000 6100 6200 6300 6400 6600 6700 6800 6900 7000) (6000 6400 6800) (6000 6100 6400 6500 6800 6900) (6000 6100 6200 6400 6500 6600 6800 6900 7000) (6000 6300 6600 6900) (6000 6100 6300 6400 6600 6700 6900 7000) (6000 6200 6400 6600 6800 7000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000) :ldur '((1000 1000 1000 1000) (1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000)) :lvel '((100 100 100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100)) :loffset '((0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0)) :lchan '((1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 12) (om-make-color 0 0 0)) (list (list 12 0) (om-make-color 0 0 0)) (list (list 12 1) (om-make-color 0 0 0)) (list (list 12 2) (om-make-color 0 0 0)) (list (list 12 3) (om-make-color 0 0 0)) (list (list 13) (om-make-color 0 0 0)) (list (list 13 0) (om-make-color 0 0 0)) (list (list 13 1) (om-make-color 0 0 0)) (list (list 13 2) (om-make-color 0 0 0)) (list (list 13 3) (om-make-color 0 0 0)) (list (list 13 4) (om-make-color 0 0 0)) (list (list 13 5) (om-make-color 0 0 0)) (list (list 13 6) (om-make-color 0 0 0)) (list (list 13 7) (om-make-color 0 0 0)) (list (list 14) (om-make-color 0 0 0)) (list (list 14 0) (om-make-color 0 0 0)) (list (list 14 1) (om-make-color 0 0 0)) (list (list 14 2) (om-make-color 0 0 0)) (list (list 14 3) (om-make-color 0 0 0)) (list (list 14 4) (om-make-color 0 0 0)) (list (list 14 5) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-boxcall 'genfun "C2CHORD-SEQ" 'c2chord-seq '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 847 462) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 29 18) '"15" "" (om-make-point 1015 237) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 1011 194) nil nil nil nil 1) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 859 84) (om-make-point 23 20) 12 "12" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 805 266) (om-make-point 130 129) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 6 8) (list 0 6) (list 0 1 3 6 7 9) (list 0 2 3 6 8 9) (list 0 1 6 7) (list 0 1 2 4 6 7 8 10) (list 0 1 2 6 7 8) (list 0 1 2 3 6 7 8 9) (list 0 1 2 3 4 6 7 8 9 10) (list 0 4 8) (list 0 1 4 5 8 9) (list 0 1 2 4 5 6 8 9 10) (list 0 3 6 9) (list 0 1 3 4 6 7 9 10) (list 0 2 4 6 8 10)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 508 304) nil nil nil nil 1) (om-load-boxcomment "comment11" (om-make-point 793 60) '"The family of transposition limited chords$" "" (om-make-point 108 6) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 497 523) (om-make-point 210 93) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200 6400 6600 6800 7000 7200) (6400 6600 6800 7000 7200 7400) (6600 6800 7000 7200 7400 7600)) :lonset '(0 1000 2000 3000) :ldur '((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000)) :lvel '((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100)) :loffset '((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)) :lchan '((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 4 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0))) t nil nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 616 414) (om-make-point 87 20) (list 200 400 600) "(200 400 600)" nil) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil) (om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 586 459) nil nil nil (list (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 149 241) (om-make-point 80 70) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 4 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0))) nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 84 173) nil nil nil nil 3) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 28 139) (om-make-point 68 35) nil nil nil 1) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 82 70) nil nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 159 40) "no documentation" "transpositions" nil nil) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" "midics" nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 132 318) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 27 319) nil nil nil 0)) '((1 1 0 1 nil 0) (2 0 1 0 nil 0) (5 0 2 0 nil 0) (3 0 2 1 nil 0) (4 0 3 0 nil 0) (0 0 6 0 nil 0) (1 0 7 0 nil 0)) 1 nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 495 363) (om-make-point 77 89) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6200 6400 6600 6800 7000) :lvel (list 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 4 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0))) t nil nil) (om-load-boxcomment "comment" (om-make-point 97 81) '"<--- It is the greatest value in order to have chords belonging to this family! " "" (om-make-point 603 76) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment5" (om-make-point 153 56) '"<--- Some exachords in the cyclic representation" "" (om-make-point 240 411) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment4" (om-make-point 96 64) '"<--- orbites give the complete list of exachords in Z/12Z$" "" (om-make-point 322 283) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment3" (om-make-point 141 57) '"<--- Card shows that there are 80 exachords (up to transposition!)" "" (om-make-point 271 213) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment2" (om-make-point 132 37) '"<--- we are looking for exachords" "" (om-make-point 239 169) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment1" (om-make-point 65 58) '"---->$The octave is divided in 12 parts" "" (om-make-point 31 172) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 583 81) (om-make-point 11 20) 5 "5" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 507 81) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 544 78) (om-make-point 11 20) 6 "6" nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 101 399) (om-make-point 119 114) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 5 7 8) (list 0 1 3 5 6 10) (list 0 1 3 5 6 9) (list 0 1 3 5 6 8) (list 0 1 3 4 8 10) (list 0 1 3 4 8 9) (list 0 1 3 4 7 10) (list 0 1 3 4 7 9) (list 0 1 3 4 7 8) (list 0 1 3 4 6 10) (list 0 1 3 4 6 9) (list 0 1 3 4 6 8) (list 0 1 3 4 6 7) (list 0 1 2 7 9 10) (list 0 1 2 7 8 10) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 8 9) (list 0 1 2 6 7 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 5 8 10) (list 0 1 2 5 8 9) (list 0 1 2 5 7 10) (list 0 1 2 5 7 9) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 5 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 7) (list 0 1 2 4 9 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 7 10) (list 0 1 2 4 7 9) (list 0 1 2 4 7 8) (list 0 1 2 4 6 10) (list 0 1 2 4 6 9) (list 0 1 2 4 6 8) (list 0 1 2 4 6 7) (list 0 1 2 4 5 10) (list 0 1 2 4 5 9) (list 0 1 2 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 4 5 6) (list 0 1 2 3 9 10) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 7 10) (list 0 1 2 3 7 9) (list 0 1 2 3 7 8) (list 0 1 2 3 6 10) (list 0 1 2 3 6 9) (list 0 1 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 9) (list 0 1 2 3 5 8) (list 0 1 2 3 5 7) (list 0 1 2 3 5 6) (list 0 1 2 3 4 10) (list 0 1 2 3 4 9) (list 0 1 2 3 4 8) (list 0 1 2 3 4 7) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 172 168) (om-make-point 17 20) 6 "6" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 106 173) (om-make-point 35 20) 12 "12" nil) (om-load-boxcall 'genfun "ORBITES" 'orbites '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6) (om-load-inputfun 'input-funbox "how many answers" "HOWMANY" 4)) (om-make-point 66 273) (om-make-point 224 61) nil nil nil 1) (om-load-boxcall 'genfun "CARD" 'card '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6)) (om-make-point 207 210) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 42 22) '"TTL" "" (om-make-point 477 134) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 505 190) (om-make-point 82 95) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 9) (list 0 1 3 6 7 9) (list 0 1 2 6 7 8)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0))) t nil nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "ttl" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 6) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 2)) (om-make-point 528 119) nil nil nil nil 1)) '((6 0 0 0 nil 0) (3 0 2 0 nil 0) (7 0 3 0 nil 0) (0 0 5 0 nil 0) (6 0 7 1 nil 0) (0 0 7 2 nil 0) (29 0 8 0 nil 0) (12 0 10 0 nil 0) (13 1 12 0 nil 0) (11 0 12 1 nil 0) (8 0 13 0 nil 0) (26 0 23 2 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 2) (27 0 26 2 nil 0) (25 0 27 0 nil 0) (24 0 27 1 nil 0) (30 0 29 2 nil 0) (21 0 30 0 nil 0) (22 0 30 2 nil 0) (20 0 30 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 617 115)) (setf (pict-size newpict) (om-make-point 454 493)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 23 102)) (setf (pict-size newpict) (om-make-point 454 493)) newpict)) 5.0))
