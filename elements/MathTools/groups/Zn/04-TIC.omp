; OM File Header - Saved 2015/02/20 21:03:51
; (6.080003 :patc (om-make-point 25 97) (om-make-point 50 31) (om-make-point 1069 662) "No documentation " 183 0 nil "2015/02/20 21:03:51")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/ciel\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "04-TIC" (quote ((om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 2) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 812 417) nil nil nil nil 1) (om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 1) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 736 417) nil nil nil nil 1) (om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 637 410) nil nil nil nil 1) (om-load-boxcomment "comment11" (om-make-point 786 50) (quote "The family of invers-complementary chords") "" (om-make-point 107 14) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 848 510) (om-make-point 89 99) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6100 6200 6300 6400 6500)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0)) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 746 515) (om-make-point 81 89) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6100 6200 6300 6400 6600)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0)) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 638 515) (om-make-point 84 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6100 6200 6300 6400 7000)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 140 65) (quote "<--- three solutions. Only one of these is in the same time self-complementary and self-invers.$") "" (om-make-point 759 276) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment7" (om-make-point 82 49) (quote "<--- 3 solutions ") "" (om-make-point 799 175) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment6" (om-make-point 158 47) (quote "<--- there is no choice! For n=12 only 6-chords can be invers-complementary$") "" (om-make-point 738 107) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 780 176) (om-make-point 27 32) 3 "3" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 703 112) (om-make-point 27 32) 6 "6" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 664 156) (om-make-point 24 26) 12 "12" nil) (om-load-boxcomment "comment5" (om-make-point 86 56) (quote "<--- Some exachords in the cyclic representation") "" (om-make-point 239 482) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment4" (om-make-point 96 64) (quote "<--- orbites give the complete list of exachords in Z/12Z$") "" (om-make-point 313 396) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3" (om-make-point 141 57) (quote "<--- Card shows that there are 80 exachords (up to transposition!)") "" (om-make-point 263 332) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 132 37) (quote "<--- we are looking for exachords") "" (om-make-point 241 283) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 65 58) (quote "---->$The octave is divided in 12 parts") "" (om-make-point 52 289) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 100 458) (om-make-point 119 114) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 5 7 8) (list 0 1 3 5 6 10) (list 0 1 3 5 6 9) (list 0 1 3 5 6 8) (list 0 1 3 4 8 10) (list 0 1 3 4 8 9) (list 0 1 3 4 7 10) (list 0 1 3 4 7 9) (list 0 1 3 4 7 8) (list 0 1 3 4 6 10) (list 0 1 3 4 6 9) (list 0 1 3 4 6 8) (list 0 1 3 4 6 7) (list 0 1 2 7 9 10) (list 0 1 2 7 8 10) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 8 9) (list 0 1 2 6 7 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 5 8 10) (list 0 1 2 5 8 9) (list 0 1 2 5 7 10) (list 0 1 2 5 7 9) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 5 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 7) (list 0 1 2 4 9 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 7 10) (list 0 1 2 4 7 9) (list 0 1 2 4 7 8) (list 0 1 2 4 6 10) (list 0 1 2 4 6 9) (list 0 1 2 4 6 8) (list 0 1 2 4 6 7) (list 0 1 2 4 5 10) (list 0 1 2 4 5 9) (list 0 1 2 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 4 5 6) (list 0 1 2 3 9 10) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 7 10) (list 0 1 2 3 7 9) (list 0 1 2 3 7 8) (list 0 1 2 3 6 10) (list 0 1 2 3 6 9) (list 0 1 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 9) (list 0 1 2 3 5 8) (list 0 1 2 3 5 7) (list 0 1 2 3 5 6) (list 0 1 2 3 4 10) (list 0 1 2 3 4 9) (list 0 1 2 3 4 8) (list 0 1 2 3 4 7) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 186 286) (om-make-point 26 34) 6 "6" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 120 291) (om-make-point 44 33) 12 "12" nil) (om-load-boxcall (quote genfun) "ORBITES" (quote orbites) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6) (om-load-inputfun (quote input-funbox) "how many answers" "HOWMANY" 4))) (om-make-point 80 391) (om-make-point 224 61) nil nil nil 1) (om-load-boxcall (quote genfun) "CARD" (quote card) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6))) (om-make-point 221 328) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 42 22) (quote "TIC") "" (om-make-point 654 200) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 659 265) (om-make-point 95 86) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 3 4 10) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0)) t nil nil nil) (om-load-boxcall (quote genfun) "FAMILLE" (quote famille) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfunmenu1 (quote input-funmenu) "familly" "FAMILLY" "tic" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun (quote input-funbox) "number of elements" "K" 6) (om-load-inputfun (quote input-funbox) "howmany answers" "HOWMANY" 2))) (om-make-point 703 189) nil nil nil nil 1))) (quote ((24 0 0 0 nil 0) (24 0 1 0 nil 0) (24 0 2 0 nil 0) (0 0 4 0 nil 0) (1 0 5 0 nil 0) (2 0 6 0 nil 0) (21 0 18 2 nil 0) (20 0 21 0 nil 0) (19 0 21 1 nil 2) (22 0 21 2 nil 0) (20 0 22 0 nil 0) (19 0 22 1 nil 0) (25 0 24 2 nil 0) (12 0 25 0 nil 0) (11 0 25 2 nil 0) (10 0 25 3 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "ciel" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture (quote |USER-ciel|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 513 93)) (setf (pict-size newpict) (om-make-point 493 596)) newpict) (let ((newpict (make-instance (quote patch-picture) :name "ciel" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture (quote |USER-ciel|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 39 142)) (setf (pict-size newpict) (om-make-point 408 505)) newpict)) 6.080003))