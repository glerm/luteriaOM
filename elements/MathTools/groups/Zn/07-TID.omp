; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 30 173) (om-make-point 50 50) (om-make-point 1146 751) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "07-TID" '((om-load-boxcomment "comment11" (om-make-point 608 59) '"The family of idempotent chords$" "" (om-make-point 173 8) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 420 34) '"The idempotents are the subgroups of Z/nZ" "" (om-make-point 153 538) nil (om-make-color 36/85 71/255 1) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment3" (om-make-point 141 57) '"<--- Card shows that there are 66 pentachords (up to transposition!)" "" (om-make-point 964 186) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 80 56) '"There are no idempotent pentachords!" "" (om-make-point 561 392) nil (om-make-color 1 12/85 24/85) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux9" 't 'nil (om-make-point 626 198) (om-make-point 18 20) 1 "1" nil) (om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 597 197) (om-make-point 17 20) 5 "5" nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tid" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 12) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 1)) (om-make-point 588 224) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 557 295) (om-make-point 82 95) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list nil)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcomment "comment2" (om-make-point 143 67) '"<--- we are looking for pentachords, in order to see if one of these is idempotent..." "" (om-make-point 928 123) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment1" (om-make-point 65 58) '"---->$The octave is divided in 12 parts" "" (om-make-point 719 120) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 497 225) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 415 272) (om-make-point 11 20) 6 "6" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 313 315) (om-make-point 11 20) 4 "4" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 219 302) (om-make-point 11 20) 3 "3" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 130 253) (om-make-point 11 20) 2 "2" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 87 155) (om-make-point 14 20) 1 "1" nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tid" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 1) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 2)) (om-make-point 64 179) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 12 239) (om-make-point 82 95) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 62 340) (om-make-point 82 95) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 6)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tid" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 2) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 2)) (om-make-point 106 277) nil nil nil nil 1) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tid" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 3) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 2)) (om-make-point 191 323) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 157 390) (om-make-point 82 95) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 4 8)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 259 409) (om-make-point 82 95) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 3 6 9)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tid" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 4) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 2)) (om-make-point 291 340) nil nil nil nil 1) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tid" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 6) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 2)) (om-make-point 397 301) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 358 371) (om-make-point 82 95) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 776 289) (om-make-point 119 114) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 7 9) (list 0 2 4 6 9) (list 0 2 4 6 8) (list 0 1 6 8 10) (list 0 1 5 8 10) (list 0 1 5 7 10) (list 0 1 5 7 9) (list 0 1 5 6 10) (list 0 1 4 8 10) (list 0 1 4 7 10) (list 0 1 4 7 9) (list 0 1 4 7 8) (list 0 1 4 6 10) (list 0 1 4 6 9) (list 0 1 4 6 8) (list 0 1 4 6 7) (list 0 1 4 5 10) (list 0 1 4 5 9) (list 0 1 4 5 8) (list 0 1 3 8 10) (list 0 1 3 8 9) (list 0 1 3 7 10) (list 0 1 3 7 9) (list 0 1 3 7 8) (list 0 1 3 6 10) (list 0 1 3 6 9) (list 0 1 3 6 8) (list 0 1 3 6 7) (list 0 1 3 5 10) (list 0 1 3 5 9) (list 0 1 3 5 8) (list 0 1 3 5 7) (list 0 1 3 5 6) (list 0 1 3 4 10) (list 0 1 3 4 9) (list 0 1 3 4 8) (list 0 1 3 4 7) (list 0 1 3 4 6) (list 0 1 2 9 10) (list 0 1 2 8 10) (list 0 1 2 8 9) (list 0 1 2 7 10) (list 0 1 2 7 9) (list 0 1 2 7 8) (list 0 1 2 6 10) (list 0 1 2 6 9) (list 0 1 2 6 8) (list 0 1 2 6 7) (list 0 1 2 5 10) (list 0 1 2 5 9) (list 0 1 2 5 8) (list 0 1 2 5 7) (list 0 1 2 5 6) (list 0 1 2 4 10) (list 0 1 2 4 9) (list 0 1 2 4 8) (list 0 1 2 4 7) (list 0 1 2 4 6) (list 0 1 2 4 5) (list 0 1 2 3 10) (list 0 1 2 3 9) (list 0 1 2 3 8) (list 0 1 2 3 7) (list 0 1 2 3 6) (list 0 1 2 3 5) (list 0 1 2 3 4)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 848 121) (om-make-point 17 20) 5 "5" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 782 126) (om-make-point 35 20) 12 "12" nil) (om-load-boxcall 'genfun "ORBITES" 'orbites '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6) (om-load-inputfun 'input-funbox "how many answers" "HOWMANY" 4)) (om-make-point 742 226) (om-make-point 224 61) nil nil nil 1) (om-load-boxcall 'genfun "CARD" 'card '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6)) (om-make-point 883 163) nil nil nil nil 1) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tid" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 12) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 2)) (om-make-point 485 250) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 456 322) (om-make-point 82 95) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 3 4 5 6 7 8 9 10 11)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcomment "comment" (om-make-point 49 30) '"TID" "" (om-make-point 319 513) nil (om-make-color 36/85 71/255 1) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil))) '((5 0 6 2 nil 0) (4 0 6 3 nil 0) (6 0 7 2 nil 0) (15 0 16 2 nil 0) (16 0 17 2 nil 0) (19 0 18 2 nil 0) (14 0 19 2 nil 0) (13 0 20 2 nil 0) (20 0 21 2 nil 0) (23 0 22 2 nil 0) (12 0 23 2 nil 0) (11 0 24 2 nil 0) (24 0 25 2 nil 0) (29 0 26 2 nil 0) (28 0 29 0 nil 0) (27 0 29 1 nil 2) (30 0 29 2 nil 0) (28 0 30 0 nil 0) (27 0 30 1 nil 0) (10 0 31 2 nil 0) (31 0 32 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 711 58)) (setf (pict-size newpict) (om-make-point 404 602)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 10 77)) (setf (pict-size newpict) (om-make-point 669 418)) newpict)) 5.0))
