; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 185 184) (om-make-point 50 50) (om-make-point 872 691) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "09-hexcombinatoriality" '((om-load-boxcomment "comment" (om-make-point 132 53) '"In order to pass from a circle to a chord-seq$------------->" "" (om-make-point 436 392) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 378 471) (om-make-point 365 114) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000 6200 6400 6600 6800 7000) (6000 6100 6400 6500 6800 6900) (6000 6100 6300 6500 6800 7000) (6000 6100 6200 6600 6700 6800) (6000 6100 6200 6300 6500 7000) (6000 6100 6200 6300 6400 6500)) :lonset '(0 1000 2000 3000 4000 5000 6000) :ldur '((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000)) :lvel '((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100)) :loffset '((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)) :lchan '((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2 't))) t nil nil) (om-load-boxcall 'genfun "C2CHORD-SEQ" 'c2chord-seq '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 579 389) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 526 54) '"Hexachordal Combinatoriality" "" (om-make-point 110 13) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 147 67) '"6 Babbitt's all-combinatorial hexachords" "" (om-make-point 158 480) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 64 471) (om-make-point 84 104) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 5 8 10) (list 0 1 2 6 7 8) (list 0 1 2 3 5 10) (list 0 1 2 3 4 5)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcall 'genfun "X-INTERSECT" 'x-intersect '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 261 382) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 481 253) (om-make-point 117 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 4 7 10) (list 0 1 3 4 6 9) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 6 10) (list 0 1 2 4 6 8) (list 0 1 2 4 5 8) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 7) (list 0 1 2 3 4 10) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 571 91) (om-make-point 17 20) 32 "32" nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tic" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 6) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 20)) (om-make-point 531 153) nil (list (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 4 7 10) (list 0 1 3 4 6 9) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 6 10) (list 0 1 2 4 6 8) (list 0 1 2 4 5 8) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 7) (list 0 1 2 3 4 10) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5))) "x" nil 1) (om-load-boxcomment "comment" (om-make-point 193 52) '"invers-complementary$hexachords" "" (om-make-point 580 153) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 170 42) '"self-complementary$hexachords" "" (om-make-point 341 153) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 112 44) '"self-invers hexachords" "" (om-make-point 125 160) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tac" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 6) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 20)) (om-make-point 290 146) nil (list (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 5 8 10) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 4 5 9) (list 0 1 2 3 5 10) (list 0 1 2 3 4 5))) "x" nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 300 92) (om-make-point 17 20) 8 "8" nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 306 255) (om-make-point 117 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 5 8 10) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 4 5 9) (list 0 1 2 3 5 10) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 91 255) (om-make-point 117 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 5 8 10) (list 0 1 3 5 7 8) (list 0 1 3 5 6 9) (list 0 1 3 4 7 9) (list 0 1 3 4 6 10) (list 0 1 3 4 6 7) (list 0 1 2 6 7 8) (list 0 1 2 5 7 9) (list 0 1 2 5 6 7) (list 0 1 2 4 7 10) (list 0 1 2 4 5 6) (list 0 1 2 3 7 8) (list 0 1 2 3 6 9) (list 0 1 2 3 5 10) (list 0 1 2 3 4 8) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 108 98) (om-make-point 17 20) 20 "20" nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tai" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 6) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 20)) (om-make-point 73 149) nil (list (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 5 8 10) (list 0 1 3 5 7 8) (list 0 1 3 5 6 9) (list 0 1 3 4 7 9) (list 0 1 3 4 6 10) (list 0 1 3 4 6 7) (list 0 1 2 6 7 8) (list 0 1 2 5 7 9) (list 0 1 2 5 6 7) (list 0 1 2 4 7 10) (list 0 1 2 4 5 6) (list 0 1 2 3 7 8) (list 0 1 2 3 6 9) (list 0 1 2 3 5 10) (list 0 1 2 3 4 8) (list 0 1 2 3 4 5))) "x" nil 1)) '((2 0 1 0 nil 0) (5 0 2 0 nil 0) (6 0 5 2 nil 0) (16 2 6 0 nil 0) (15 2 6 1 nil 0) (9 0 7 2 nil 0) (8 0 9 3 nil 0) (14 0 13 3 nil 0) (13 0 15 2 nil 0) (18 0 16 2 nil 0) (17 0 18 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 14 219)) (setf (pict-size newpict) (om-make-point 806 284)) newpict) (let ((newpict (make-instance 'patch-picture :name 'user-recover-pict99))) (setf (thepict newpict) (om-get-picture 'user-recover-pict99)) (setf (name newpict) 'user-recover-pict99) (setf (pict-pos newpict) (om-make-point 156 349)) (setf (pict-size newpict) (om-make-point 0 -13691)) newpict)) 5.0))
