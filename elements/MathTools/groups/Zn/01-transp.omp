; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 927 752) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "01-transp" '((om-load-boxcomment "comment" (om-make-point 55 50) '"----->$In integer $mode" "" (om-make-point 718 422) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 82 47) '"<------$Transposition factor" "" (om-make-point 800 379) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 773 381) (om-make-point 12 22) 3 "3" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 582 490) (om-make-point 136 103) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 3 4 5 9 10 0 1)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'genfun "TRANSP" 'transp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "VALUE" 3) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 0 1 3 4 5 7))) (om-make-point 774 422) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 365 490) (om-make-point 136 103) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 6 7 9 10)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 495 383) (om-make-point 18 22) 6 "6" nil) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" nil) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 550 383) nil nil nil nil 1) (om-load-boxcomment "comment1" (om-make-point 590 61) '"Transposition classes of chords" "" (om-make-point 158 16) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 82 59) '"<--- it calculates the list of the 66 eptachords" "" (om-make-point 347 298) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 103 57) '"<--- there are 66 chords of 7 notes (up to transposition!)" "" (om-make-point 355 187) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 126 46) '"<--- some eptachords in the cyclic representation$$$$" "" (om-make-point 207 443) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 72 416) (om-make-point 119 114) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 5 6 8 10) (list 0 1 3 4 7 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 4 6 8 9) (list 0 1 3 4 6 7 10) (list 0 1 3 4 6 7 9) (list 0 1 2 6 7 9 10) (list 0 1 2 5 7 9 10) (list 0 1 2 5 7 8 10) (list 0 1 2 5 6 9 10) (list 0 1 2 5 6 8 10) (list 0 1 2 5 6 8 9) (list 0 1 2 5 6 7 10) (list 0 1 2 4 7 9 10) (list 0 1 2 4 7 8 10) (list 0 1 2 4 7 8 9) (list 0 1 2 4 6 9 10) (list 0 1 2 4 6 8 10) (list 0 1 2 4 6 8 9) (list 0 1 2 4 6 7 10) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 7 8) (list 0 1 2 4 5 9 10) (list 0 1 2 4 5 8 10) (list 0 1 2 4 5 8 9) (list 0 1 2 4 5 7 10) (list 0 1 2 4 5 7 9) (list 0 1 2 4 5 7 8) (list 0 1 2 4 5 6 10) (list 0 1 2 4 5 6 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 8 9 10) (list 0 1 2 3 7 9 10) (list 0 1 2 3 7 8 10) (list 0 1 2 3 7 8 9) (list 0 1 2 3 6 9 10) (list 0 1 2 3 6 8 10) (list 0 1 2 3 6 8 9) (list 0 1 2 3 6 7 10) (list 0 1 2 3 6 7 9) (list 0 1 2 3 6 7 8) (list 0 1 2 3 5 9 10) (list 0 1 2 3 5 8 10) (list 0 1 2 3 5 8 9) (list 0 1 2 3 5 7 10) (list 0 1 2 3 5 7 9) (list 0 1 2 3 5 7 8) (list 0 1 2 3 5 6 10) (list 0 1 2 3 5 6 9) (list 0 1 2 3 5 6 8) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 9 10) (list 0 1 2 3 4 8 10) (list 0 1 2 3 4 8 9) (list 0 1 2 3 4 7 10) (list 0 1 2 3 4 7 9) (list 0 1 2 3 4 7 8) (list 0 1 2 3 4 6 10) (list 0 1 2 3 4 6 9) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 4 5 10) (list 0 1 2 3 4 5 9) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 6)) :from-file t)) nil nil (corrige (pairlis '(obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 194 164) (om-make-point 17 20) 7 "7" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 99 113) (om-make-point 35 20) 12 "12" nil) (om-load-boxcall 'genfun "ORBITES" 'orbites '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6) (om-load-inputfun 'input-funbox "how many answers" "HOWMANY" 4)) (om-make-point 102 296) (om-make-point 224 63) (list (list (list 0 1 3 5 6 8 10) (list 0 1 3 4 7 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 4 6 8 9) (list 0 1 3 4 6 7 10) (list 0 1 3 4 6 7 9) (list 0 1 2 6 7 9 10) (list 0 1 2 5 7 9 10) (list 0 1 2 5 7 8 10) (list 0 1 2 5 6 9 10) (list 0 1 2 5 6 8 10) (list 0 1 2 5 6 8 9) (list 0 1 2 5 6 7 10) (list 0 1 2 4 7 9 10) (list 0 1 2 4 7 8 10) (list 0 1 2 4 7 8 9) (list 0 1 2 4 6 9 10) (list 0 1 2 4 6 8 10) (list 0 1 2 4 6 8 9) (list 0 1 2 4 6 7 10) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 7 8) (list 0 1 2 4 5 9 10) (list 0 1 2 4 5 8 10) (list 0 1 2 4 5 8 9) (list 0 1 2 4 5 7 10) (list 0 1 2 4 5 7 9) (list 0 1 2 4 5 7 8) (list 0 1 2 4 5 6 10) (list 0 1 2 4 5 6 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 8 9 10) (list 0 1 2 3 7 9 10) (list 0 1 2 3 7 8 10) (list 0 1 2 3 7 8 9) (list 0 1 2 3 6 9 10) (list 0 1 2 3 6 8 10) (list 0 1 2 3 6 8 9) (list 0 1 2 3 6 7 10) (list 0 1 2 3 6 7 9) (list 0 1 2 3 6 7 8) (list 0 1 2 3 5 9 10) (list 0 1 2 3 5 8 10) (list 0 1 2 3 5 8 9) (list 0 1 2 3 5 7 10) (list 0 1 2 3 5 7 9) (list 0 1 2 3 5 7 8) (list 0 1 2 3 5 6 10) (list 0 1 2 3 5 6 9) (list 0 1 2 3 5 6 8) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 9 10) (list 0 1 2 3 4 8 10) (list 0 1 2 3 4 8 9) (list 0 1 2 3 4 7 10) (list 0 1 2 3 4 7 9) (list 0 1 2 3 4 7 8) (list 0 1 2 3 4 6 10) (list 0 1 2 3 4 6 9) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 4 5 10) (list 0 1 2 3 4 5 9) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 6))) "x" nil 1) (om-load-boxcall 'genfun "CARD" 'card '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6)) (om-make-point 306 178) nil nil nil nil 1)) '((4 0 3 2 nil 0) (2 0 4 1 nil 0) (7 0 4 2 nil 0) (7 0 5 2 nil 0) (6 0 7 0 nil 0) (15 0 7 1 nil 0) (15 0 12 2 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 2) (16 0 15 2 nil 0) (14 0 16 0 nil 0) (13 0 16 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 52 84)) (setf (pict-size newpict) (om-make-point 675 520)) newpict)) 5.0))
