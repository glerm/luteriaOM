; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 240 25) (om-make-point 50 50) (om-make-point 802 689) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "04-normalorder" '((om-load-boxcomment "comment" (om-make-point 105 31) '"now: the distance is 8-0=8" "" (om-make-point 572 198) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 110 60) '"It adds inversions in order to make the normal order much more compact" "" (om-make-point 575 138) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 82 23) '"Now: 9-0=9" "" (om-make-point 224 180) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 72 58) '"-------->$Prime form$(in integer mode)" "" (om-make-point 459 160) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 80 59) '"<---$ Normal order$(in integer mode)" "" (om-make-point 372 98) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 60 37) '"Note that 11-2=9" "" (om-make-point 156 56) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 102 75) '"It minimize the distance between first and final element by means of rotations" "" (om-make-point 225 110) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 419 510) (om-make-point 98 53) nil nil nil 1) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 593 490) (om-make-point 74 109) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6300 6600 6800) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 1000 nil 43/50 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 48 2 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 460 250) (om-make-point 246 212) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 3 6 8)) :from-file t)) nil nil (corrige (pairlis '(obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 75 75) (om-make-point 78 20) (list 2 4 8 11) "(2 4 8 11)" nil) (om-load-boxcall 'genfun "P-FORM" 'p-form '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "fn" ':fn) (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 3 9 6 5 0))) (om-make-point 529 152) nil nil nil nil 1) (om-load-boxcall 'genfun "N-ORD" 'n-ord '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 3 9 6 5 0))) (om-make-point 335 105) (om-make-point 35 61) nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 218 424) (om-make-point 98 53) nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 66 424) (om-make-point 122 53) nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 23 212) (om-make-point 180 164) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 2 4 8 11)) :from-file t)) nil nil (corrige (pairlis '(obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 222 212) (om-make-point 198 161) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 6 9 0 2)) :from-file t)) nil nil (corrige (pairlis '(obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 236 504) (om-make-point 77 108) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600 6900 6000 6200) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 1000 nil 43/50 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 48 2 't))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 64 515) (om-make-point 90 102) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200 6400 6800 7100) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 1000 nil 43/50 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 48 2 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 546 55) '"Normal Order and prime form" "" (om-make-point 145 0) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((9 0 7 0 nil 0) (7 0 8 0 nil 0) (11 0 9 2 nil 0) (12 0 11 1 nil 0) (10 0 12 1 nil 0) (16 0 13 0 nil 0) (15 0 14 0 nil 0) (10 0 15 2 nil 0) (12 0 16 2 nil 0) (13 0 17 0 nil 0) (14 0 18 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 6 308)) (setf (pict-size newpict) (om-make-point 760 317)) newpict)) 5.0))
