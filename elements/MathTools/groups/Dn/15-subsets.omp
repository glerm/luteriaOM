; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 245 157) (om-make-point 50 50) (om-make-point 757 573) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "15-subsets" '((om-load-boxcomment "comment" (om-make-point 106 51) '"Now the list is given in prime form" "" (om-make-point 621 107) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 109 70) '"It gives the list of subsets of A with cardinality k between k1 and k2" "" (om-make-point 60 98) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 594 70) (om-make-point 11 20) 4 "4" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 563 71) (om-make-point 11 20) 3 "3" nil) (om-load-boxcomment "comment" (om-make-point 22 25) '"A" "" (om-make-point 396 51) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 28 22) '"k1" "" (om-make-point 184 55) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 28 22) '"k2" "" (om-make-point 222 55) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 222 74) (om-make-point 11 20) 4 "4" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 198 76) (om-make-point 11 20) 3 "3" nil) (om-load-boxcall 'genfun "SUB-P-FORM" 'sub-p-form '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "fn" ':fn) (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "LOW" 3) (om-load-inputfun 'input-funbox "no documentation" "HIGH" 3) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 11 0 5 6))) (om-make-point 551 107) nil nil nil nil 1) (om-load-boxcall 'genfun "SUB-POWER" 'sub-power '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "fn" ':fn) (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "LOW" 3) (om-load-inputfun 'input-funbox "no documentation" "HIGH" 3) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 11 0 5 6))) (om-make-point 187 108) nil nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 361 332) nil nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD-SEQ" 'c2chord-seq '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 486 319) nil nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD-SEQ" 'c2chord-seq '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 176 324) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 480 406) (om-make-point 181 102) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000 6100 6600) (6000 6500 6600) (6000 6100 6600 6700)) :lonset '(0 1000 2000 3000) :ldur '((1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000)) :lvel '((100 100 100) (100 100 100) (100 100 100 100)) :loffset '((0 0 0) (0 0 0) (0 0 0 0)) :lchan '((1 1 1) (1 1 1) (1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0) (0 0 0) (0 0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 495 176) (om-make-point 166 126) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 6) (list 0 5 6) (list 0 1 6 7)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 't))) t nil nil) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 99 404) (om-make-point 218 108) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7100 6000 6500) (7100 6000 6600) (7100 6500 6600) (6000 6500 6600)) :lonset '(0 1000 2000 3000 4000) :ldur '((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000)) :lvel '((100 100 100) (100 100 100) (100 100 100) (100 100 100)) :loffset '((0 0 0) (0 0 0) (0 0 0) (0 0 0)) :lchan '((1 1 1) (1 1 1) (1 1 1) (1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0) (0 0 0) (0 0 0) (0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 120 179) (om-make-point 166 126) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 11 0 5) (list 11 0 6) (list 11 5 6) (list 0 5 6) (list 11 0 5 6)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 311 176) (om-make-point 160 131) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 11 0 5 6)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 375 78) (om-make-point 65 20) (list 11 0 5 6) "(11 0 5 6)" nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 347 404) (om-make-point 85 107) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100 6000 6500 6600) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 48 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 43/50 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 623 54) '"Subsets and subsets in prime form" "" (om-make-point 106 2) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((3 0 9 1 nil 0) (2 0 9 2 nil 0) (19 0 9 3 nil 0) (8 0 10 1 nil 0) (7 0 10 2 nil 0) (19 0 10 3 nil 0) (18 0 11 0 nil 0) (15 0 12 0 nil 0) (17 0 13 0 nil 0) (12 0 14 0 nil 0) (9 0 15 2 nil 0) (13 0 16 0 nil 0) (10 0 17 2 nil 0) (19 0 18 2 nil 0) (11 0 20 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 18 206)) (setf (pict-size newpict) (om-make-point 843 374)) newpict) (let ((newpict (make-instance 'patch-picture :name 'user-recover-pict103))) (setf (thepict newpict) (om-get-picture 'user-recover-pict103)) (setf (name newpict) 'user-recover-pict103) (setf (pict-pos newpict) (om-make-point 156 349)) (setf (pict-size newpict) (om-make-point 0 -13691)) newpict)) 5.0))
