; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 131 159) (om-make-point 50 50) (om-make-point 832 645) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "14-comb&partitioning" '((om-load-boxcomment "comment" (om-make-point 136 66) '"How to partition the chromatic total with two inversionally related hexachords" "" (om-make-point 600 497) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 144 83) '"How to partition the chromatic total with two transpositionally related hexachords" "" (om-make-point 216 501) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 233 276) (om-make-point 11 20) 6 "6" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 415 270) (om-make-point 11 20) 0 "0" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 694 268) (om-make-point 11 20) 3 "3" nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 564 114) (om-make-point 117 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 5 8 10) (list 0 1 3 5 7 8) (list 0 1 3 5 6 9) (list 0 1 3 4 7 9) (list 0 1 3 4 6 10) (list 0 1 3 4 6 7) (list 0 1 2 6 7 8) (list 0 1 2 5 7 9) (list 0 1 2 5 6 7) (list 0 1 2 4 7 10) (list 0 1 2 4 5 6) (list 0 1 2 3 7 8) (list 0 1 2 3 6 9) (list 0 1 2 3 5 10) (list 0 1 2 3 4 8) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 326 113) (om-make-point 117 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 4 7 10) (list 0 1 3 4 6 9) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 6 10) (list 0 1 2 4 6 8) (list 0 1 2 4 5 8) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 7) (list 0 1 2 3 4 10) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE3" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 492 470) (om-make-point 92 108) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 4 6 8 10) (list 3 2 11 9 7 5)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'lispfun "LIST" 'list '((om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil)) (om-make-point 543 371) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 611 379) (om-make-point 93 100) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 3 2 11 9 7 5)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'genfun "INV" 'inv '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 0 1 2 7))) (om-make-point 596 254) nil nil nil nil 1) (om-load-boxcall 'genfun "TRANSP" 'transp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "VALUE" 4) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 0 1 3 4 5 7))) (om-make-point 678 298) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 386 384) (om-make-point 101 98) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 4 6 8 10)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'lispfun "NTH1" 'nth '((om-load-inputfun 'input-funbox "N" "N" 0) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 435 305) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE3" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 116 471) (om-make-point 93 117) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 5 8 10) (list 6 7 9 11 2 4)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'lispfun "LIST" 'list '((om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil)) (om-make-point 147 382) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 226 383) (om-make-point 101 105) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 6 7 9 11 2 4)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'genfun "TRANSP" 'transp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "VALUE" 6) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 0 1 3 4 5 7))) (om-make-point 217 306) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 20 388) (om-make-point 88 104) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 5 8 10)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 42 286) (om-make-point 23 20) 2 "2" nil) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" nil) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 66 317) nil nil nil nil 1) (om-load-boxcall 'genfun "X-DIFF" 'x-diff '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 469 216) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 162 49) '"6 all-combinatorial hexachords" "" (om-make-point 10 79) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 44 124) (om-make-point 84 104) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 5 8 10) (list 0 1 2 6 7 8) (list 0 1 2 3 5 10) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcomment "comment" (om-make-point 192 43) '"invers-complementary hexachords " "" (om-make-point 290 71) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 106 47) '"self-invers hexachords" "" (om-make-point 569 61) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 654 55) '"Combinatoriality and partitioning" "" (om-make-point 103 0) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((8 0 7 2 nil 0) (13 0 8 0 nil 0) (11 0 8 1 nil 0) (11 0 9 2 nil 0) (13 0 10 1 nil 0) (4 0 11 1 nil 0) (10 0 11 2 nil 0) (13 0 12 2 nil 0) (3 0 13 0 nil 0) (21 0 13 1 nil 0) (15 0 14 2 nil 0) (20 0 15 0 nil 0) (17 0 15 1 nil 0) (17 0 16 2 nil 0) (2 0 17 1 nil 0) (20 0 17 2 nil 0) (20 0 18 2 nil 0) (19 0 20 0 nil 0) (23 2 20 1 nil 0) (6 2 21 0 nil 0) (5 2 21 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 135 129)) (setf (pict-size newpict) (om-make-point 655 279)) newpict)) 5.0))
