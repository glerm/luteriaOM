; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 319 88) (om-make-point 50 50) (om-make-point 865 652) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "11-compl&Zrel" '((om-load-boxcomment "comment" (om-make-point 98 72) '"The complements of two Z-related sets are in Z-relation" "" (om-make-point 341 431) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 141 36) '"this means that it is an all-interval PC-Set" "" (om-make-point 353 188) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 64 21) '"(111111)" "" (om-make-point 378 167) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 75 21) '"vector-mode" "" (om-make-point 380 95) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':vector (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '8-6)) (om-make-point 455 112) nil nil nil nil 1) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':vector (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '8-6)) (om-make-point 334 114) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 73 27) '"8-z29" "" (om-make-point 516 341) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 73 27) '"8-z15" "" (om-make-point 176 351) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 474 381) (om-make-point 167 179) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 3 4 6 7 8 9)) :from-file t)) nil nil (corrige (pairlis '(deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'genfun "P-FORM" 'p-form '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "fn" ':fn) (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 3 9 6 5 0))) (om-make-point 399 316) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 611 173) (om-make-point 167 179) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 7)) :from-file t)) nil nil (corrige (pairlis '(deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'genfun "COMP" 'comp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FROM" 0) (om-load-inputfun 'input-funbox "no documentation" "TO" 4) (om-load-inputfun 'input-funbox "no documentation" "LIST" (list 0 1 2 7))) (om-make-point 524 236) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 510 72) (om-make-point 53 20) '4-z29 "4-z29" nil) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '8-6)) (om-make-point 549 109) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 289 74) (om-make-point 54 20) '4-z15 "4-z15" nil) (om-load-boxcomment "comment" (om-make-point 66 28) '"4-z29" "" (om-make-point 645 123) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 73 27) '"4-z15" "" (om-make-point 59 71) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '8-6)) (om-make-point 234 110) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 11 107) (om-make-point 167 179) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 4 6)) :from-file t)) nil nil (corrige (pairlis '(deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'genfun "P-FORM" 'p-form '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "fn" ':fn) (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 3 9 6 5 0))) (om-make-point 340 313) nil nil nil nil 1) (om-load-boxcall 'genfun "COMP" 'comp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FROM" 0) (om-load-inputfun 'input-funbox "no documentation" "TO" 4) (om-load-inputfun 'input-funbox "no documentation" "LIST" (list 0 1 2 7))) (om-make-point 248 253) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 130 385) (om-make-point 167 179) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 5 6 7 8 9)) :from-file t)) nil nil (corrige (pairlis '(deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 539 58) '"Complement and Z-Relation" "" (om-make-point 217 2) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((12 0 4 1 nil 0) (14 0 5 1 nil 0) (9 0 8 2 nil 0) (11 0 9 1 nil 0) (13 0 10 2 nil 0) (13 0 11 3 nil 0) (12 0 13 1 nil 0) (14 0 17 1 nil 0) (17 0 18 2 nil 0) (20 0 19 1 nil 0) (17 0 20 3 nil 0) (19 0 21 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 498 153)) (setf (pict-size newpict) (om-make-point 311 373)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 3 146)) (setf (pict-size newpict) (om-make-point 311 373)) newpict)) 5.0))
