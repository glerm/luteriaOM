; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 177 88) (om-make-point 50 50) (om-make-point 860 730) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "09-paradox" '((om-load-boxcomment "comment" (om-make-point 60 25) '"inversion" "" (om-make-point 249 577) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 107 36) '"transposition by 5 semitons" "" (om-make-point 143 490) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 107 36) '"complement$(in integer mode)" "" (om-make-point 161 283) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 785 44) '"Set-theoretical paradoxes: a set that is included in its complement!" "" (om-make-point 53 14) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 119 30) '"complement" "" (om-make-point 370 555) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 47 26) '"5-16" "" (om-make-point 258 65) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "INV" 'inv '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 0 1 2 7))) (om-make-point 320 564) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 86 429) (om-make-point 11 20) 5 "5" nil) (om-load-boxcall 'genfun "TRANSP" 'transp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "VALUE" 3) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 0 1 3 4 5 7))) (om-make-point 97 484) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 69 27) '"------->" "" (om-make-point 575 228) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 89 29) '"inclusion" "" (om-make-point 570 203) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "COMP" 'comp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FROM" 5) (om-load-inputfun 'input-funbox "no documentation" "TO" 5) (om-load-inputfun 'input-funbox "no documentation" "LIST" (list 0 1 2 7))) (om-make-point 118 276) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 347 134) (om-make-point 183 192) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 5 6 8 9)) :from-file t)) nil nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 663 135) (om-make-point 167 179) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 6 5 4 3 0 9 8)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict) (list 't 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 288 363) (om-make-point 201 180) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 1 2 3 4 7 10 11)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict) (list 't 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 246 95) (om-make-point 105 20) (list 0 5 6 8 9) "(0 5 6 8 9)" nil)) '((8 0 6 1 nil 0) (7 0 8 1 nil 0) (11 0 8 2 nil 0) (15 0 11 3 nil 0) (15 0 12 2 nil 0) (6 0 13 2 nil 0) (11 0 14 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 44 48)) (setf (pict-size newpict) (om-make-point 702 426)) newpict)) 5.0))
