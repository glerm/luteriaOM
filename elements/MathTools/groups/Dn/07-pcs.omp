; OM File Header - Saved 2015/02/21 0:20:49
; (6.080003 :patc (om-make-point 23 92) (om-make-point 50 50) (om-make-point 867 621) "No documentation " 183 0 nil "2015/02/21 0:20:49")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/ciel\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "07-pcs" (quote ((om-load-boxcomment "comment" (om-make-point 99 25) (quote "(1 2 1 2 1 2)") "" (om-make-point 18 300) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 101 33) (quote "<------$Interval structure") "" (om-make-point 101 261) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 90 227) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall (quote genfun) "N-STRUCTURE" (quote n-structure) (quote ((om-load-inputfun (quote input-funbox) "values" "L" (list 5 7 9)) (om-load-inputfun (quote input-funbox) "n" "N" 12))) (om-make-point 25 233) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 104 41) (quote "PC-Set in Forte's notation") "" (om-make-point 409 60) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :pitch) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 595 152) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :vector) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 367 152) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 162 153) nil nil nil nil 1) (om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 370 496) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 25) (quote "(4 4 8 4 4 4)") "" (om-make-point 338 218) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 167 303) (om-make-point 179 164) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 3 4 6 7 9 10)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 143 25) (quote "(c c# d# e f# g a a#)") "" (om-make-point 537 213) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 62 44) (quote "Pitch mode") "" (om-make-point 527 157) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 73 46) (quote "Interval Vector") "" (om-make-point 352 242) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 73 46) (quote "Vector mode") "" (om-make-point 290 159) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 377 50) (quote "The Pitch Class Set") "" (om-make-point 237 5) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 362 68) (om-make-point 45 32) (quote |8-28|) "8-28" nil) (om-load-boxcomment "comment" (om-make-point 73 46) (quote "integer mode$") "" (om-make-point 86 153) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 157 48) (quote "Rhythms$") "" (om-make-point 250 697) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family "Georgia" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 526 308) (om-make-point 86 110) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6100 6300 6400 6600 6700 6900 7000)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil 2 48 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 43/50 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil))) (quote ((7 0 3 0 nil 0) (2 0 3 1 nil 0) (16 0 5 1 nil 0) (16 0 6 1 nil 0) (16 0 7 1 nil 0) (10 0 8 0 nil 0) (7 0 10 2 nil 0) (8 0 19 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "ciel" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture (quote |USER-ciel|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 25 328)) (setf (pict-size newpict) (om-make-point 755 240)) newpict)) 6.080003))