; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 23 92) (om-make-point 50 50) (om-make-point 867 621) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "07-pcs" '((om-load-boxcomment "comment" (om-make-point 99 25) '"(1 2 1 2 1 2)" "" (om-make-point 18 300) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 101 33) '"<------$Interval structure" "" (om-make-point 101 261) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 90 227) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'genfun "N-STRUCTURE" 'n-structure '((om-load-inputfun 'input-funbox "values" "L" (list 5 7 9)) (om-load-inputfun 'input-funbox "n" "N" 12)) (om-make-point 25 233) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 104 41) '"PC-Set in Forte's notation" "" (om-make-point 409 60) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':pitch (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '6-z10)) (om-make-point 595 152) nil nil nil nil 1) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':vector (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '6-z10)) (om-make-point 367 152) nil nil nil nil 1) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '6-z10)) (om-make-point 162 153) nil nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 370 496) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 99 25) '"(4 4 8 4 4 4)" "" (om-make-point 338 218) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 167 303) (om-make-point 179 164) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 4 6 7 9 10)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcomment "comment" (om-make-point 143 25) '"(c c# d# e f# g a a#)" "" (om-make-point 537 213) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 62 44) '"Pitch mode" "" (om-make-point 527 157) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 73 46) '"Interval Vector" "" (om-make-point 352 242) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 73 46) '"Vector mode" "" (om-make-point 290 159) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 377 50) '"The Pitch Class Set" "" (om-make-point 237 5) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 362 68) (om-make-point 35 20) '8-28 "8-28" nil) (om-load-boxcomment "comment" (om-make-point 73 46) '"integer mode$" "" (om-make-point 86 153) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 157 48) '"Rhythms$" "" (om-make-point 250 697) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 526 308) (om-make-point 86 110) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6100 6300 6400 6600 6700 6900 7000) :lvel (list 100 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 43/50 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 48 2))) t nil nil)) '((7 0 3 0 nil 0) (2 0 3 1 nil 0) (16 0 5 1 nil 0) (16 0 6 1 nil 0) (16 0 7 1 nil 0) (10 0 8 0 nil 0) (7 0 10 2 nil 0) (8 0 19 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 25 328)) (setf (pict-size newpict) (om-make-point 755 240)) newpict)) 5.0))
