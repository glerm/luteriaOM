; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 185 24) (om-make-point 50 50) (om-make-point 805 642) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "03-card" '((om-load-boxcomment "comment" (om-make-point 255 44) '"There would be 7293 eptachords equivalent under transposition and/or inversion in a quarter-tone division of the octave" "" (om-make-point 219 469) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 255 44) '"So there are 38 eptachords which are equivalent under transposition and/or inversion" "" (om-make-point 216 276) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 109 67) '"It gives the total number of PC-Sets with 7 elements$<------------" "" (om-make-point 378 192) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 237 337) (om-make-point 17 20) 24 "24" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 462 334) (om-make-point 11 20) 7 "7" nil) (om-load-boxcall 'genfun "DN-CARD" 'dn-card '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6)) (om-make-point 333 396) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 87 379) (om-make-point 100 99) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 3 4 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 7 8) (list 0 1 2 3 6 7 8) (list 0 2 3 4 5 6 8) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 9) (list 0 1 3 4 5 6 8) (list 0 1 2 3 4 7 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 5 7 8) (list 0 1 2 4 6 7 8) (list 0 1 2 3 5 6 9) (list 0 1 2 4 5 6 9) (list 0 1 2 3 5 8 9) (list 0 1 2 3 6 7 9) (list 0 1 2 4 7 8 9) (list 0 1 2 4 5 8 9) (list 0 1 2 5 6 8 9) (list 0 2 3 4 5 7 9) (list 0 1 2 3 5 7 9) (list 0 2 3 4 6 7 9) (list 0 1 3 4 5 7 9) (list 0 1 2 4 5 7 9) (list 0 1 3 5 6 7 9) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 8 9) (list 0 1 3 4 6 7 9) (list 0 1 3 4 6 8 9) (list 0 1 2 4 6 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 5 6 8 10) (list 0 1 2 3 5 6 8) (list 0 1 3 4 5 7 8) (list 0 1 2 4 5 7 8)) :from-file t)) nil nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '6-z10)) (om-make-point 50 264) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 103 113) (om-make-point 11 20) 7 "7" nil) (om-load-boxcall 'genfun "DN-ORBITES" 'dn-orbites '((om-load-inputfun 'input-funbox "no documentation" "SELF" 3)) (om-make-point 106 180) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 403 115) (om-make-point 11 20) 7 "7" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 259 120) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'genfun "DN-CARD" 'dn-card '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfun 'input-funbox "elments" "K" 6)) (om-make-point 316 197) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 732 61) '"Number of PC-Sets of a given cardinality" "" (om-make-point 53 14) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((3 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 2 nil 0) (9 0 7 1 nil 0) (8 0 9 0 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 226 139)) (setf (pict-size newpict) (om-make-point 317 386)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 17 117)) (setf (pict-size newpict) (om-make-point 180 301)) newpict)) 5.0))
