; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 11 161) (om-make-point 50 50) (om-make-point 908 712) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "13-hexcombinatoriality" '((om-load-editor-box1 "N-CERCLE3" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 752 443) (om-make-point 135 137) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 10 8 7 4 2 1)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'genfun "INV1" 'inv '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 0 1 2 7))) (om-make-point 840 263) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE3" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 700 297) (om-make-point 135 137) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 2 4 5 8 10 11)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'genfun "COMP" 'comp '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FROM" 6) (om-load-inputfun 'input-funbox "no documentation" "TO" 6) (om-load-inputfun 'input-funbox "no documentation" "LIST" (list 0 1 2 7))) (om-make-point 744 224) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE3" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 560 285) (om-make-point 135 137) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 6 7 9)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 605 226) (om-make-point 18 22) 6 "6" nil) (om-load-boxcall 'lispfun "NTH1" 'nth '((om-load-inputfun 'input-funbox "N" "N" nil) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 662 231) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 292 242) (om-make-point 127 132) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 11 9 7 4 2)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 157 242) (om-make-point 127 132) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 5 8 10)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 225 116) (om-make-point 12 22) 4 "4" nil) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" 4) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 240 171) nil nil nil nil 1) (om-load-boxcall 'genfun "INV" 'inv '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "SET" (list 0 1 2 7))) (om-make-point 346 153) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 526 54) '"Hexachordal Combinatoriality" "" (om-make-point 215 13) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 147 67) '"6 Babbitt's all-combinatorial hexachords" "" (om-make-point 161 511) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 64 471) (om-make-point 84 104) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 5 8 10) (list 0 1 2 6 7 8) (list 0 1 2 3 5 10) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'genfun "X-INTERSECT" 'x-intersect '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 321 438) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 452 256) (om-make-point 103 115) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 4 7 10) (list 0 1 3 4 6 9) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 6 10) (list 0 1 2 4 6 8) (list 0 1 2 4 5 8) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 7) (list 0 1 2 3 4 10) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 571 91) (om-make-point 17 20) 32 "32" nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tic" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 6) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 20)) (om-make-point 531 153) nil (list (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 4 7 10) (list 0 1 3 4 6 9) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 6 10) (list 0 1 2 4 6 8) (list 0 1 2 4 5 8) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 7) (list 0 1 2 3 4 10) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5))) "x" nil 1) (om-load-boxcomment "comment" (om-make-point 193 52) '"invers-complementary$hexachords" "" (om-make-point 580 153) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 90 43) '"self-invers hexachords" "" (om-make-point 113 156) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 32 253) (om-make-point 110 112) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 5 8 10) (list 0 1 3 5 7 8) (list 0 1 3 5 6 9) (list 0 1 3 4 7 9) (list 0 1 3 4 6 10) (list 0 1 3 4 6 7) (list 0 1 2 6 7 8) (list 0 1 2 5 7 9) (list 0 1 2 5 6 7) (list 0 1 2 4 7 10) (list 0 1 2 4 5 6) (list 0 1 2 3 7 8) (list 0 1 2 3 6 9) (list 0 1 2 3 5 10) (list 0 1 2 3 4 8) (list 0 1 2 3 4 5)) :from-file t)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 108 98) (om-make-point 17 20) 20 "20" nil) (om-load-boxcall 'genfun "FAMILLE" 'famille '((om-load-inputfun 'input-funbox "Zn" "N" 12) (om-load-inputfunmenu1 'input-funmenu "familly" "FAMILLY" "tai" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun 'input-funbox "number of elements" "K" 6) (om-load-inputfun 'input-funbox "howmany answers" "HOWMANY" 20)) (om-make-point 73 149) nil (list (list (list 0 2 4 6 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 5 8 10) (list 0 1 3 5 7 8) (list 0 1 3 5 6 9) (list 0 1 3 4 7 9) (list 0 1 3 4 6 10) (list 0 1 3 4 6 7) (list 0 1 2 6 7 8) (list 0 1 2 5 7 9) (list 0 1 2 5 6 7) (list 0 1 2 4 7 10) (list 0 1 2 4 5 6) (list 0 1 2 3 7 8) (list 0 1 2 3 6 9) (list 0 1 2 3 5 10) (list 0 1 2 3 4 8) (list 0 1 2 3 4 5))) "x" nil 1)) '((1 0 0 2 nil 0) (3 0 1 1 nil 0) (3 0 2 2 nil 0) (6 0 3 3 nil 0) (6 0 4 2 nil 0) (5 0 6 0 nil 0) (18 0 6 1 nil 0) (11 0 7 2 nil 0) (10 0 8 2 nil 0) (9 0 10 0 nil 0) (23 0 10 1 nil 0) (10 0 11 1 nil 0) (15 0 14 2 nil 0) (21 2 15 0 nil 0) (16 2 15 1 nil 0) (18 0 16 2 nil 0) (17 0 18 3 nil 0) (23 0 21 2 nil 0) (22 0 23 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 14 219)) (setf (pict-size newpict) (om-make-point 806 284)) newpict) (let ((newpict (make-instance 'patch-picture :name 'user-recover-pict99))) (setf (thepict newpict) (om-get-picture 'user-recover-pict99)) (setf (name newpict) 'user-recover-pict99) (setf (pict-pos newpict) (om-make-point 156 349)) (setf (pict-size newpict) (om-make-point 0 -13691)) newpict)) 5.0))
