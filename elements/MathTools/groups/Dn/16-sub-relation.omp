; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 318 158) (om-make-point 50 50) (om-make-point 829 636) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "16-sub-relation" '((om-load-boxcomment "comment" (om-make-point 254 39) '"It gives the list of subsets of A with cardinality k between k1 and k2 which are included in the set B" "" (om-make-point 563 21) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 28 22) '"k2" "" (om-make-point 360 92) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 28 22) '"k1" "" (om-make-point 316 109) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 21 24) '"B" "" (om-make-point 606 78) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 21 29) '"A" "" (om-make-point 132 78) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 363 255) (om-make-point 88 87) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 5) (list 0 3 6) (list 0 1 6) (list 0 1 3) (list 0 1 3 6)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 378 117) (om-make-point 11 20) 4 "4" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 329 131) (om-make-point 11 20) 3 "3" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 573 104) (om-make-point 90 25) (list 10 0 1 3 4) "(10 0 1 3 4)" nil) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 10 0 1 3 4))) (om-make-point 519 180) (om-make-point 188 200) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 10 0 1 3 4)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 105 108) (om-make-point 91 25) (list 10 11 1 3 4) "(10 11 1 3 4)" nil) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 55 188) (om-make-point 182 201) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 10 11 1 3 4)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 325 70) (om-make-point 173 20) (list (list 10 11 1 3 4) (list 10 0 1 3 4)) "((10 11 1 3 4) (10 0 1 3 4))" nil) (om-load-boxcall 'genfun "SUB-REL" 'sub-rel '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "fn" ':fn) (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "LOW" 3) (om-load-inputfun 'input-funbox "no documentation" "HIGH" 4) (om-load-inputfun 'input-funbox "no documentation" "SET" (list (list 10 11 1 3 4) (list 10 0 1 3 4)))) (om-make-point 378 168) nil nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD-SEQ" 'c2chord-seq '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 357 361) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 323 428) (om-make-point 218 108) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000 6200 6500) (6000 6300 6600) (6000 6100 6600) (6000 6100 6300) (6000 6100 6300 6600)) :lonset '(0 1000 2000 3000 4000 5000) :ldur '((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000)) :lvel '((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100)) :loffset '((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0)) :lchan '((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0))) t nil nil) (om-load-boxcomment "comment" (om-make-point 318 62) '"Subsets-Relation" "" (om-make-point 258 6) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((13 0 5 2 nil 0) (8 0 9 2 nil 0) (10 0 11 2 nil 0) (7 0 13 1 nil 0) (6 0 13 2 nil 0) (12 0 13 3 nil 0) (5 0 14 0 nil 0) (14 0 15 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 12 222)) (setf (pict-size newpict) (om-make-point 818 280)) newpict)) 5.0))
