; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 94 25) (om-make-point 50 50) (om-make-point 885 664) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "02-enumeration" '((om-load-boxcomment "comment" (om-make-point 45 19) '"Meter" "" (om-make-point 367 396) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 88 48) '"Number of repetition of a rhythm" "" (om-make-point 322 430) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 310 440) (om-make-point 11 20) 3 "3" nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 324 398) (om-make-point 41 20) (list 12 8) "(12 8)" nil) (om-load-boxcomment "comment" (om-make-point 80 40) '"We take the first solution" "" (om-make-point 302 353) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 287 361) (om-make-point 11 20) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 73 36) '"Unitary step$(semiton)" "" (om-make-point 122 419) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 52 38) '"Starting note (do)" "" (om-make-point 93 350) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 95 438) (om-make-point 23 20) 100 "100" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 63 363) (om-make-point 29 20) 6000 "6000" nil) (om-load-boxcomment "comment" (om-make-point 80 40) '"We take the first solution" "" (om-make-point 54 310) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 36 319) (om-make-point 11 20) 0 "0" nil) (om-load-boxcall 'genfun "DN-ORBITES" 'dn-orbites '((om-load-inputfun 'input-funbox "no documentation" "SELF" 3)) (om-make-point 586 128) nil nil nil nil 1) (om-load-boxcall 'genfun "DN-ORBITES" 'dn-orbites '((om-load-inputfun 'input-funbox "no documentation" "SELF" 3)) (om-make-point 374 124) nil nil nil nil 1) (om-load-boxcall 'genfun "DN-ORBITES" 'dn-orbites '((om-load-inputfun 'input-funbox "no documentation" "SELF" 3)) (om-make-point 126 109) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 73 45) '"It must be in integer mode$------->" "" (om-make-point 300 216) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 45 21) '"12-k" "" (om-make-point 626 62) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 19 21) '"k" "" (om-make-point 410 64) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 73 45) '"It must be in integer mode$------->" "" (om-make-point 108 201) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 156 66) '"Evaluate in order to verify that the number of k-chords is equal to the number of (12-k)-chords" "" (om-make-point 471 305) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 110 48) '"It gives the list of k-chords in Forte's catalogue" "" (om-make-point 197 119) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 61 20) '"k-chord" "" (om-make-point 135 69) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'lispfun "LENGTH1" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 303 269) nil nil nil nil 1) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '6-z10)) (om-make-point 671 193) nil nil nil nil 1) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '6-z10)) (om-make-point 380 210) nil nil nil nil 1) (om-load-boxcall 'genfun "PC-SET" 'pc-set '((om-load-inputfunmenu1 'input-funmenu "no documentation" "TYPE" ':integer (list (list "integer" ':integer) (list "vector" ':vector) (list "pitch" ':pitch))) (om-load-inputfun 'input-funbox "no documentation" "FN-NAME" '6-z10)) (om-make-point 185 199) nil nil nil nil 1) (om-load-boxcall 'genfun "C2RHYTHM" 'c2rhythm '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "signature" "SIGNATURE" (list 12 8)) (om-load-inputfun 'input-funbox "times" "TIMES" 3)) (om-make-point 234 420) nil nil nil nil 1) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 34 426) nil nil nil nil 1) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 497 259) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 389 501) (om-make-point 149 114) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 3 4) (list 0 1 2 3 5) (list 0 1 2 4 5) (list 0 1 2 3 6) (list 0 1 2 3 7) (list 0 1 2 5 6) (list 0 1 2 6 7) (list 0 2 3 4 6) (list 0 1 2 4 6) (list 0 1 3 4 6) (list 0 2 3 4 7) (list 0 1 3 5 6) (list 0 1 2 4 8) (list 0 1 2 5 7) (list 0 1 2 6 8) (list 0 1 3 4 7) (list 0 1 3 4 8) (list 0 1 4 5 7) (list 0 1 3 6 7) (list 0 1 3 7 8) (list 0 1 4 5 8) (list 0 1 4 7 8) (list 0 2 3 5 7) (list 0 1 3 5 7) (list 0 2 3 5 8) (list 0 2 4 5 8) (list 0 1 3 5 8) (list 0 2 3 6 8) (list 0 1 3 6 8) (list 0 1 4 6 8) (list 0 1 3 6 9) (list 0 1 4 6 9) (list 0 2 4 6 8) (list 0 2 4 6 9) (list 0 2 4 7 9) (list 0 1 2 4 7) (list 0 3 4 5 8) (list 0 1 2 5 8)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 639 83) (om-make-point 18 20) 7 "7" nil) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 570 258) nil nil nil nil 1) (om-load-editor-box1 "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list '4//4 (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) (om-make-point 151 487) (om-make-point 189 126) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(9/2 (((12 8) (1 1 1 1 1 7)) ((12 8) (1 1 1 1 1 7)) ((12 8) (1 1 1 1 1 7)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 3500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 3500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 3500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 162 282) (om-make-point 114 119) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 3 4 5) (list 0 1 2 3 4 6) (list 0 1 2 3 5 6) (list 0 1 2 4 5 6) (list 0 1 2 3 6 7) (list 0 1 2 5 6 7) (list 0 1 2 6 7 8) (list 0 2 3 4 5 7) (list 0 1 2 3 5 7) (list 0 1 3 4 5 7) (list 0 1 2 4 5 7) (list 0 1 2 4 6 7) (list 0 1 3 4 6 7) (list 0 1 3 4 5 8) (list 0 1 2 4 5 8) (list 0 1 4 5 6 8) (list 0 1 2 4 7 8) (list 0 1 2 5 7 8) (list 0 1 3 4 7 8) (list 0 1 4 5 8 9) (list 0 2 3 4 6 8) (list 0 1 2 4 6 8) (list 0 2 3 5 6 8) (list 0 1 3 4 6 8) (list 0 1 3 5 6 8) (list 0 1 3 5 7 8) (list 0 1 3 4 6 9) (list 0 1 3 5 6 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 9) (list 0 1 3 5 8 9) (list 0 2 4 5 7 9) (list 0 2 3 5 7 9) (list 0 1 3 5 7 9) (list 0 2 4 6 8 10) (list 0 1 2 3 4 7) (list 0 1 2 3 4 8) (list 0 1 2 3 7 8) (list 0 2 3 4 5 8) (list 0 1 2 3 5 8) (list 0 1 2 3 6 8) (list 0 1 2 3 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 9) (list 0 2 3 4 6 9) (list 0 1 2 4 6 9) (list 0 1 2 4 7 9) (list 0 1 2 5 7 9) (list 0 1 3 4 7 9) (list 0 1 4 6 7 9)) :from-file t)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 116 71) (om-make-point 17 20) 6 "6" nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 28 486) (om-make-point 85 125) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6100 6200 6300 6400 6500) :lvel (list 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos) (list 't 0 0 2 48 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 43/50 nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcomment "comment" (om-make-point 82 46) '"50 solutions" "" (om-make-point 301 305) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 664 47) '"List of PC-Sets with a given number of elements" "" (om-make-point 88 5) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 552 505) (om-make-point 143 107) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 3 4 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 7 8) (list 0 1 2 3 6 7 8) (list 0 2 3 4 5 6 8) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 9) (list 0 1 3 4 5 6 8) (list 0 1 2 3 4 7 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 5 7 8) (list 0 1 2 4 6 7 8) (list 0 1 2 3 5 6 9) (list 0 1 2 4 5 6 9) (list 0 1 2 3 5 8 9) (list 0 1 2 3 6 7 9) (list 0 1 2 4 7 8 9) (list 0 1 2 4 5 8 9) (list 0 1 2 5 6 8 9) (list 0 2 3 4 5 7 9) (list 0 1 2 3 5 7 9) (list 0 2 3 4 6 7 9) (list 0 1 3 4 5 7 9) (list 0 1 2 4 5 7 9) (list 0 1 3 5 6 7 9) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 8 9) (list 0 1 3 4 6 7 9) (list 0 1 3 4 6 8 9) (list 0 1 2 4 6 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 5 6 8 10) (list 0 1 2 3 5 6 8) (list 0 1 3 4 5 7 8) (list 0 1 2 4 5 7 8)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 411 86) (om-make-point 20 20) 5 "5" nil)) '((30 0 12 0 nil 0) (39 0 13 0 nil 0) (34 0 14 0 nil 0) (25 0 22 0 nil 0) (12 0 23 1 nil 0) (13 0 24 1 nil 0) (14 0 25 1 nil 0) (33 0 26 0 nil 0) (5 0 26 1 nil 0) (3 0 26 2 nil 0) (2 0 26 3 nil 0) (33 0 27 0 nil 0) (11 0 27 1 nil 0) (9 0 27 2 nil 0) (8 0 27 3 nil 0) (24 0 28 0 nil 0) (24 0 29 2 nil 0) (23 0 31 0 nil 0) (26 0 32 0 nil 0) (25 0 33 2 nil 0) (27 0 35 0 nil 0) (23 0 38 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 43 116)) (setf (pict-size newpict) (om-make-point 742 417)) newpict)) 5.0))
