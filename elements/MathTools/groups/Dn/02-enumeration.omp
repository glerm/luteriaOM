; OM File Header - Saved 2015/02/20 20:43:59
; (6.080003 :patc (om-make-point 94 25) (om-make-point 432 31) (om-make-point 885 664) "No documentation " 183 0 nil "2015/02/20 20:43:59")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/ciel\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "02-enumeration" (quote ((om-load-boxcomment "comment" (om-make-point 45 19) (quote "Meter") "" (om-make-point 367 396) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 88 48) (quote "Number of repetition of a rhythm") "" (om-make-point 322 430) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 310 440) (om-make-point 11 20) 3 "3" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 324 398) (om-make-point 41 20) (list 12 8) "(12 8)" nil) (om-load-boxcomment "comment" (om-make-point 80 40) (quote "We take the first solution") "" (om-make-point 302 353) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 287 361) (om-make-point 11 20) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 73 36) (quote "Unitary step$(semiton)") "" (om-make-point 122 419) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 52 38) (quote "Starting note (do)") "" (om-make-point 93 350) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 95 438) (om-make-point 23 20) 100 "100" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 63 363) (om-make-point 29 20) 6000 "6000" nil) (om-load-boxcomment "comment" (om-make-point 80 40) (quote "We take the first solution") "" (om-make-point 54 310) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 36 319) (om-make-point 11 20) 0 "0" nil) (om-load-boxcall (quote genfun) "DN-ORBITES" (quote dn-orbites) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 3))) (om-make-point 586 128) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DN-ORBITES" (quote dn-orbites) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 3))) (om-make-point 374 121) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DN-ORBITES" (quote dn-orbites) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 3))) (om-make-point 126 109) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 73 45) (quote "It must be in integer mode$------->") "" (om-make-point 300 216) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 45 21) (quote "12-k") "" (om-make-point 626 62) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 19 21) (quote "k") "" (om-make-point 410 64) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 73 45) (quote "It must be in integer mode$------->") "" (om-make-point 108 201) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 156 66) (quote "Evaluate in order to verify that the number of k-chords is equal to the number of (12-k)-chords") "" (om-make-point 471 305) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 110 48) (quote "It gives the list of k-chords in Forte's catalogue") "" (om-make-point 197 119) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 61 20) (quote "k-chord") "" (om-make-point 135 69) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LENGTH1" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 303 269) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 671 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 380 210) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 185 199) nil nil nil nil 1) (om-load-boxcall (quote genfun) "C2RHYTHM" (quote c2rhythm) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "signature" "SIGNATURE" (list 12 8)) (om-load-inputfun (quote input-funbox) "times" "TIMES" 3))) (om-make-point 234 420) nil nil nil nil 1) (om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 34 426) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 497 259) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 389 501) (om-make-point 149 114) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 3) (list 0 1 2 4) (list 0 1 3 4) (list 0 1 2 5) (list 0 1 2 6) (list 0 1 2 7) (list 0 1 4 5) (list 0 1 5 6) (list 0 1 6 7) (list 0 2 3 5) (list 0 1 3 5) (list 0 2 3 6) (list 0 1 3 6) (list 0 2 3 7) (list 0 1 4 6) (list 0 1 5 7) (list 0 3 4 7) (list 0 1 4 7) (list 0 1 4 8) (list 0 1 5 8) (list 0 2 4 6) (list 0 2 4 7) (list 0 2 5 7) (list 0 2 4 8) (list 0 2 6 8) (list 0 3 5 8) (list 0 2 5 8) (list 0 3 6 9) (list 0 1 3 7)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 639 83) (om-make-point 25 35) 7 "7" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 570 258) nil nil nil nil 1) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "no documentation" "TIES" nil))) (om-make-point 151 487) (om-make-point 189 126) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (9/2 (((12 8) (1 1 1 1 1 7)) ((12 8) (1 1 1 1 1 7)) ((12 8) (1 1 1 1 1 7))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (3500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (3500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (3500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 162 282) (om-make-point 114 119) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 3 4 5) (list 0 1 2 3 4 6) (list 0 1 2 3 5 6) (list 0 1 2 4 5 6) (list 0 1 2 3 6 7) (list 0 1 2 5 6 7) (list 0 1 2 6 7 8) (list 0 2 3 4 5 7) (list 0 1 2 3 5 7) (list 0 1 3 4 5 7) (list 0 1 2 4 5 7) (list 0 1 2 4 6 7) (list 0 1 3 4 6 7) (list 0 1 3 4 5 8) (list 0 1 2 4 5 8) (list 0 1 4 5 6 8) (list 0 1 2 4 7 8) (list 0 1 2 5 7 8) (list 0 1 3 4 7 8) (list 0 1 4 5 8 9) (list 0 2 3 4 6 8) (list 0 1 2 4 6 8) (list 0 2 3 5 6 8) (list 0 1 3 4 6 8) (list 0 1 3 5 6 8) (list 0 1 3 5 7 8) (list 0 1 3 4 6 9) (list 0 1 3 5 6 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 9) (list 0 1 3 5 8 9) (list 0 2 4 5 7 9) (list 0 2 3 5 7 9) (list 0 1 3 5 7 9) (list 0 2 4 6 8 10) (list 0 1 2 3 4 7) (list 0 1 2 3 4 8) (list 0 1 2 3 7 8) (list 0 2 3 4 5 8) (list 0 1 2 3 5 8) (list 0 1 2 3 6 8) (list 0 1 2 3 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 9) (list 0 2 3 4 6 9) (list 0 1 2 4 6 9) (list 0 1 2 4 7 9) (list 0 1 2 5 7 9) (list 0 1 3 4 7 9) (list 0 1 4 6 7 9)) :from-file t)) "x" nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 116 71) (om-make-point 17 20) 6 "6" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 28 486) (om-make-point 85 125) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6100 6200 6300 6400 6500)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems)) (list nil 2621450 18350450 0 1000 nil 43/50 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 48 2 0 0 (quote t))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 82 46) (quote "50 solutions") "" (om-make-point 301 305) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 664 47) (quote "List of PC-Sets with a given number of elements") "" (om-make-point 88 5) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 552 505) (om-make-point 143 107) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 3 4 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 7 8) (list 0 1 2 3 6 7 8) (list 0 2 3 4 5 6 8) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 9) (list 0 1 3 4 5 6 8) (list 0 1 2 3 4 7 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 5 7 8) (list 0 1 2 4 6 7 8) (list 0 1 2 3 5 6 9) (list 0 1 2 4 5 6 9) (list 0 1 2 3 5 8 9) (list 0 1 2 3 6 7 9) (list 0 1 2 4 7 8 9) (list 0 1 2 4 5 8 9) (list 0 1 2 5 6 8 9) (list 0 2 3 4 5 7 9) (list 0 1 2 3 5 7 9) (list 0 2 3 4 6 7 9) (list 0 1 3 4 5 7 9) (list 0 1 2 4 5 7 9) (list 0 1 3 5 6 7 9) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 8 9) (list 0 1 3 4 6 7 9) (list 0 1 3 4 6 8 9) (list 0 1 2 4 6 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 5 6 8 10) (list 0 1 2 3 5 6 8) (list 0 1 3 4 5 7 8) (list 0 1 2 4 5 7 8)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 411 86) (om-make-point 27 32) 4 "4" nil))) (quote ((30 0 12 0 nil 0) (39 0 13 0 nil 0) (34 0 14 0 nil 0) (25 0 22 0 nil 0) (12 0 23 1 nil 0) (13 0 24 1 nil 0) (14 0 25 1 nil 0) (33 0 26 0 nil 0) (5 0 26 1 nil 0) (3 0 26 2 nil 0) (2 0 26 3 nil 0) (33 0 27 0 nil 0) (11 0 27 1 nil 0) (9 0 27 2 nil 0) (8 0 27 3 nil 0) (24 0 28 0 nil 0) (24 0 29 2 nil 0) (23 0 31 0 nil 0) (26 0 32 0 nil 0) (25 0 33 2 nil 0) (27 0 35 0 nil 0) (23 0 38 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "ciel" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture (quote |USER-ciel|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 43 116)) (setf (pict-size newpict) (om-make-point 742 417)) newpict)) 6.080003))