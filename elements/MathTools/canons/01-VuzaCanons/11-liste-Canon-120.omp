; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 95 228) (om-make-point 50 50) (om-make-point 1124 816) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "11-liste-Canon-120" '((om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 222 544) (om-make-point 77 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 120 :puntos (list (list 0 36 39 40 49 59 76 80 99 109 116 119) (list 58 94 97 98 107 117 14 18 37 47 54 57) (list 66 102 105 106 115 5 22 26 45 55 62 65) (list 74 110 113 114 3 13 30 34 53 63 70 73) (list 82 118 1 2 11 21 38 42 61 71 78 81) (list 88 4 7 8 17 27 44 48 67 77 84 87) (list 90 6 9 10 19 29 46 50 69 79 86 89) (list 96 12 15 16 25 35 52 56 75 85 92 95) (list 104 20 23 24 33 43 60 64 83 93 100 103) (list 112 28 31 32 41 51 68 72 91 101 108 111)) :from-file t)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcall 'genfun "TRANSP-COMB" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120)) (om-make-point 237 450) nil nil nil nil 1) (om-load-boxcall 'genfun "TRANSP-COMB" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120)) (om-make-point 368 444) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 57 12 12 3 12 12))) (om-make-point 225 214) (om-make-point 131 163) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 120 :puntos (list (list 0 36 39 40 49 59 76 80 99 109 116 119)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 137 99) (om-make-point 210 28) (list 36 3 1 9 10 17 4 19 10 7 3 1) "(36 3 1 9 10 17 4 19 10 7 3 1)" nil) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 2 2 2 6))) (om-make-point 183 128) nil nil nil nil 1) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 2 2 2 6))) (om-make-point 484 127) nil nil nil nil 1) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 397 92) (om-make-point 107 29) (list 58 8 8 8 6 2 6 8 8 8) "(58 8 8 8 6 2 6 8 8 8)" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 57 12 12 3 12 12))) (om-make-point 406 215) (om-make-point 131 163) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 120 :puntos (list (list 0 58 66 74 82 88 90 96 104 112)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 357 545) (om-make-point 77 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 120 :puntos (list (list 0 58 66 74 82 88 90 96 104 112) (list 36 94 102 110 118 4 6 12 20 28) (list 39 97 105 113 1 7 9 15 23 31) (list 40 98 106 114 2 8 10 16 24 32) (list 49 107 115 3 11 17 19 25 33 41) (list 59 117 5 13 21 27 29 35 43 51) (list 76 14 22 30 38 44 46 52 60 68) (list 80 18 26 34 42 48 50 56 64 72) (list 99 37 45 53 61 67 69 75 83 91) (list 109 47 55 63 71 77 79 85 93 101) (list 116 54 62 70 78 84 86 92 100 108) (list 119 57 65 73 81 87 89 95 103 111)) :from-file t)) "x" nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-editor-box1 "TEXTFILE1" 'textfile '((om-load-inputfun 'input-funbox "object or object list" "self" nil) (om-load-inputfun 'input-funbox "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 'input-funmenu "append or supersede mode" "ed-mode" "append" (list (list "append" "append") (list "supersede" "supersede")))) (om-make-point 915 143) (om-make-point 160 451) (load-buffer-textfile '("120=2*5*2*3*2" "" "S" "(74 8 8 14 8 8) " "(58 16 14 2 14 16) " "(50 30 2 8 22 8) " "(50 8 22 8 2 30) " "(34 30 10 16 14 16) " "(34 16 14 16 10 30) " "(30 26 30 2 30 2) " "(30 26 8 22 8 26) " "(30 10 30 10 30 10) " "" "totale : 9 solutions" "" "" "R" "(20 3 1 11 6 3 3 1 11 9 4 11 9 3 1 5 6 9 3 1) " "(20 1 3 9 6 5 1 3 9 11 4 9 11 1 3 3 6 11 1 3)" "(19 4 1 12 6 1 4 1 12 7 4 13 7 4 1 6 6 7 4 1) " "(19 1 4 7 6 6 1 4 7 13 4 7 12 1 4 1 6 12 1 4) " "(17 4 3 12 5 1 3 3 12 5 4 15 5 4 3 6 6 5 4 3) " "(17 3 4 5 6 6 3 4 5 15 4 5 12 3 3 1 5 12 3 4) " "" "totale : 6 solutions" "" "totale : 54 solutions") 'textfile "append") "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-editor-box1 "TEXTFILE" 'textfile '((om-load-inputfun 'input-funbox "object or object list" "self" nil) (om-load-inputfun 'input-funbox "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 'input-funmenu "append or supersede mode" "ed-mode" "append" (list (list "append" "append") (list "supersede" "supersede")))) (om-make-point 10 154) (om-make-point 153 433) (load-buffer-textfile '("120= 2*3*2*5*2" "" "S" "(58 8 8 8 6 2 6 8 8 8) " "(42 16 8 6 2 14 2 6 8 16) " "(34 24 6 2 16 6 2 6 16 8) " "(34 8 16 6 2 6 16 2 6 24) " "(30 26 8 8 14 2 6 8 16 2) " "(30 18 8 8 8 6 8 8 8 18) " "(30 2 24 6 2 22 2 6 24 2) " "(30 2 16 8 6 2 14 8 8 26) " "(26 16 14 2 14 2 14 2 14 16) " "(26 8 22 2 6 18 6 2 22 8) " "(24 18 16 8 6 16 2 6 18 6) " "(24 6 24 2 16 14 2 14 16 2) " "(24 6 18 6 2 16 6 8 16 18) " "(22 8 18 8 8 14 8 8 18 8) " "(18 16 14 16 2 16 8 6 16 8) " "(18 8 16 6 8 16 2 16 14 16) " "(18 6 18 6 18 6 18 6 18 6) " "" "totale : 17 solutions" "" "R" "(36 3 1 9 10 17 4 19 10 7 3 1) " "(36 1 3 7 10 19 4 17 10 9 1 3) " "(35 4 1 10 10 15 4 21 10 5 4 1) " "(35 1 4 5 10 21 4 15 10 10 1 4) " "(33 4 3 10 10 13 4 23 10 3 4 3) " "(33 3 4 3 10 23 4 13 10 10 3 4) " "(31 5 4 1 10 25 4 11 10 10 5 4) " "(31 4 5 10 10 11 4 25 10 1 4 5) " "(29 7 3 1 9 27 4 9 10 10 7 4) " "(29 4 7 10 10 9 4 27 9 1 3 7) " "(28 11 1 9 10 9 12 19 9 1 10 1) " "(28 9 3 7 10 11 12 17 10 1 9 3) " "(28 7 5 5 10 13 12 15 10 3 7 5) " "(28 5 7 3 10 15 12 13 10 5 5 7) " "(28 3 9 1 10 17 12 11 10 7 3 9) " "(28 1 10 1 9 19 12 9 10 9 1 11) " "(27 12 1 10 10 7 12 21 7 3 9 1) " "(27 1 9 3 7 21 12 7 10 10 1 12) " "(25 12 3 10 10 5 12 23 5 5 7 3) " "(25 3 7 5 5 23 12 5 10 10 3 12) " "" "totale : 20 solutions" "" "totale : 340 solutions") 'textfile "append") "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 586 524) (om-make-point 77 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 120 :puntos (list (list 0 20 23 24 35 41 44 47 48 59 68 72 83 92 95 96 101 107 116 119) (list 74 94 97 98 109 115 118 1 2 13 22 26 37 46 49 50 55 61 70 73) (list 82 102 105 106 117 3 6 9 10 21 30 34 45 54 57 58 63 69 78 81) (list 90 110 113 114 5 11 14 17 18 29 38 42 53 62 65 66 71 77 86 89) (list 104 4 7 8 19 25 28 31 32 43 52 56 67 76 79 80 85 91 100 103) (list 112 12 15 16 27 33 36 39 40 51 60 64 75 84 87 88 93 99 108 111)) :from-file t)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcall 'genfun "TRANSP-COMB" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120)) (om-make-point 599 407) nil nil nil nil 1) (om-load-boxcall 'genfun "TRANSP-COMB" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120)) (om-make-point 723 430) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 57 12 12 3 12 12))) (om-make-point 580 200) (om-make-point 131 163) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 120 :puntos (list (list 0 20 23 24 35 41 44 47 48 59 68 72 83 92 95 96 101 107 116 119)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 541 87) (om-make-point 210 28) (list 20 3 1 11 6 3 3 1 11 9 4 11 9 3 1 5 6 9 3 1) "(20 3 1 11 6 3 3 1 11 9 4 11 9 3 1 5 6 9 3 1)" nil) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 2 2 2 6))) (om-make-point 655 121) nil nil nil nil 1) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 2 2 2 6))) (om-make-point 771 120) nil nil nil nil 1) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 771 88) (om-make-point 107 29) (list 74 8 8 14 8 8) "(74 8 8 14 8 8) " nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 57 12 12 3 12 12))) (om-make-point 761 201) (om-make-point 131 163) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 120 :puntos (list (list 0 74 82 90 104 112)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 120) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 714 527) (om-make-point 77 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 120 :puntos (list (list 0 74 82 90 104 112) (list 20 94 102 110 4 12) (list 23 97 105 113 7 15) (list 24 98 106 114 8 16) (list 35 109 117 5 19 27) (list 41 115 3 11 25 33) (list 44 118 6 14 28 36) (list 47 1 9 17 31 39) (list 48 2 10 18 32 40) (list 59 13 21 29 43 51) (list 68 22 30 38 52 60) (list 72 26 34 42 56 64) (list 83 37 45 53 67 75) (list 92 46 54 62 76 84) (list 95 49 57 65 79 87) (list 96 50 58 66 80 88) (list 101 55 63 71 85 93) (list 107 61 69 77 91 99) (list 116 70 78 86 100 108) (list 119 73 81 89 103 111)) :from-file t)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 36 40) '"S" "" (om-make-point 799 48) nil (om-make-color 116/255 4/51 7/51) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 40) '"S" "" (om-make-point 433 51) nil (om-make-color 116/255 4/51 7/51) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 40) '"R" "" (om-make-point 220 56) nil (om-make-color 46/255 62/255 43/85) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 40) '"R" "" (om-make-point 613 49) nil (om-make-color 46/255 62/255 43/85) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 745 48) '"Two families of Vuza Canon of period 120" "" (om-make-point 128 3) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((1 0 0 2 nil 0) (6 0 1 0 nil 0) (5 0 1 1 nil 0) (5 0 2 0 nil 0) (6 0 2 1 nil 0) (5 0 3 2 nil 0) (4 0 5 0 nil 0) (7 0 6 0 nil 0) (6 0 8 2 nil 0) (2 0 9 2 nil 0) (13 0 12 2 nil 0) (18 0 13 0 nil 0) (17 0 13 1 nil 0) (17 0 14 0 nil 0) (18 0 14 1 nil 0) (17 0 15 2 nil 0) (16 0 17 0 nil 0) (19 0 18 0 nil 0) (18 0 20 2 nil 0) (14 0 21 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-boitezn|))) (setf (thepict newpict) (om-get-picture '|USER-boitezn|)) (setf (name newpict) '|USER-boitezn|) (setf (pict-pos newpict) (om-make-point 9 70)) (setf (pict-size newpict) (om-make-point 68 57)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-boitezn|))) (setf (thepict newpict) (om-get-picture '|USER-boitezn|)) (setf (name newpict) '|USER-boitezn|) (setf (pict-pos newpict) (om-make-point 943 61)) (setf (pict-size newpict) (om-make-point 68 57)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 80 95)) (setf (pict-size newpict) (om-make-point 293 311)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 97 432)) (setf (pict-size newpict) (om-make-point 636 204)) newpict)) 5.0))
