; OM File Header - Saved 2014/04/26 5:39:38
; (6.04 :patc (om-make-point 185 79) (om-make-point 50 50) (om-make-point 948 812) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "06-Representation" '((om-load-boxcomment "comment1" (om-make-point 252 47) '"(in a multi-seq or in a poly)" "" (om-make-point 363 52) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment1" (om-make-point 461 51) '"Canonical representation " "" (om-make-point 290 0) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 171 28) '"The same, but in the poly editor..." "" (om-make-point 543 470) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux9" 't 'nil (om-make-point 4 369) (om-make-point 89 20) (list 8 8 2 8 8 38) "(8 8 2 8 8 38)" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 18 335) (om-make-point 167 20) (list 4 1 6 6 7 4 13 6 1 4 1 19) "(4 1 6 6 7 4 13 6 1 4 1 19)" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 102 389) (om-make-point 11 20) 3 "3" nil) (om-load-boxcomment "comment" (om-make-point 55 28) '"poly" "" (om-make-point 294 482) nil (om-make-color 4/15 59/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "POLY" 'poly '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "VOICES" (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(2 (((4 4) (1 (1 (1 -2 1 1)) 1 1)) ((4 4) (1 (1 (1 2 1 1)) -1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 400) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0) ((0) nil (0) (0)) (0) (0)) ((0) ((0) (0) (0) (0)) nil (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 1 0 0) (om-make-color 0 0 0)) (list (list 0 1 1) (om-make-color 0 0 0)) (list (list 0 1 2) (om-make-color 0 0 0)) (list (list 0 1 2 0) (om-make-color 0 0 0)) (list (list 0 1 3) (om-make-color 0 0 0)) (list (list 0 1 3 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 0 0) (om-make-color 0 0 0)) (list (list 1 1 1) (om-make-color 0 0 0)) (list (list 1 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 2) (om-make-color 0 0 0)) (list (list 1 1 2 0) (om-make-color 0 0 0)) (list (list 1 1 3) (om-make-color 0 0 0)) (list (list 1 1 3 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 106 504) (om-make-point 240 144) (if (find-class 'poly nil) (let ((newobj (make-instance 'poly :voices (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(111/4 (((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (-6)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(111/4 (((6 8) (-4 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(111/4 (((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(57/2 (((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(117/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(123/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (-6)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(123/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(129/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(33 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(135/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (-6)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(135/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(135/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '((((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)) ((nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil) (nil) (nil) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil) (nil) (nil) (nil) (nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 1 0 0) (om-make-color 0 0 0)) (list (list 0 1 1) (om-make-color 0 0 0)) (list (list 0 1 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 2 0 0) (om-make-color 0 0 0)) (list (list 0 2 1) (om-make-color 0 0 0)) (list (list 0 2 1 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 3 0 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 4 0 0) (om-make-color 0 0 0)) (list (list 0 4 1) (om-make-color 0 0 0)) (list (list 0 4 1 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 5 0 0) (om-make-color 0 0 0)) (list (list 0 5 1) (om-make-color 0 0 0)) (list (list 0 5 1 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 6 0 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 7 0 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 8 0 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 9 0 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 10 0 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 11 0 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 12 0 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 13 0 0) (om-make-color 0 0 0)) (list (list 0 13 1) (om-make-color 0 0 0)) (list (list 0 13 1 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 14 0 0) (om-make-color 0 0 0)) (list (list 0 14 1) (om-make-color 0 0 0)) (list (list 0 14 1 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 15 0 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 16 0 0) (om-make-color 0 0 0)) (list (list 0 16 1) (om-make-color 0 0 0)) (list (list 0 16 1 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 17 0 0) (om-make-color 0 0 0)) (list (list 0 17 1) (om-make-color 0 0 0)) (list (list 0 17 1 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 18 0 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 19 0 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 20 0 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 21 0 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 22 0 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 23 0 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 24 0 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 25 0 0) (om-make-color 0 0 0)) (list (list 0 25 1) (om-make-color 0 0 0)) (list (list 0 25 1 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 26 0 0) (om-make-color 0 0 0)) (list (list 0 26 1) (om-make-color 0 0 0)) (list (list 0 26 1 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 0 27 0 0) (om-make-color 0 0 0)) (list (list 0 28) (om-make-color 0 0 0)) (list (list 0 28 0) (om-make-color 0 0 0)) (list (list 0 28 0 0) (om-make-color 0 0 0)) (list (list 0 28 1) (om-make-color 0 0 0)) (list (list 0 28 1 0) (om-make-color 0 0 0)) (list (list 0 29) (om-make-color 0 0 0)) (list (list 0 29 0) (om-make-color 0 0 0)) (list (list 0 29 0 0) (om-make-color 0 0 0)) (list (list 0 29 1) (om-make-color 0 0 0)) (list (list 0 29 1 0) (om-make-color 0 0 0)) (list (list 0 30) (om-make-color 0 0 0)) (list (list 0 30 0) (om-make-color 0 0 0)) (list (list 0 30 0 0) (om-make-color 0 0 0)) (list (list 0 31) (om-make-color 0 0 0)) (list (list 0 31 0) (om-make-color 0 0 0)) (list (list 0 31 0 0) (om-make-color 0 0 0)) (list (list 0 32) (om-make-color 0 0 0)) (list (list 0 32 0) (om-make-color 0 0 0)) (list (list 0 32 0 0) (om-make-color 0 0 0)) (list (list 0 33) (om-make-color 0 0 0)) (list (list 0 33 0) (om-make-color 0 0 0)) (list (list 0 33 0 0) (om-make-color 0 0 0)) (list (list 0 34) (om-make-color 0 0 0)) (list (list 0 34 0) (om-make-color 0 0 0)) (list (list 0 34 0 0) (om-make-color 0 0 0)) (list (list 0 35) (om-make-color 0 0 0)) (list (list 0 35 0) (om-make-color 0 0 0)) (list (list 0 35 0 0) (om-make-color 0 0 0)) (list (list 0 36) (om-make-color 0 0 0)) (list (list 0 36 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 0 1) (om-make-color 0 0 0)) (list (list 1 0 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 0 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 2 0 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 3 0 0) (om-make-color 0 0 0)) (list (list 1 3 1) (om-make-color 0 0 0)) (list (list 1 3 1 0) (om-make-color 0 0 0)) (list (list 1 3 2) (om-make-color 0 0 0)) (list (list 1 3 2 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 4 0 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 5 0 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 6 0 0) (om-make-color 0 0 0)) (list (list 1 6 1) (om-make-color 0 0 0)) (list (list 1 6 1 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 7 0 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 8 0 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 9 0 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 10 0 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 11 0 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 12 0 0) (om-make-color 0 0 0)) (list (list 1 12 1) (om-make-color 0 0 0)) (list (list 1 12 1 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 13 0 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 14 0 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 15 0 0) (om-make-color 0 0 0)) (list (list 1 15 1) (om-make-color 0 0 0)) (list (list 1 15 1 0) (om-make-color 0 0 0)) (list (list 1 15 2) (om-make-color 0 0 0)) (list (list 1 15 2 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 16 0 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 17 0 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 18 0 0) (om-make-color 0 0 0)) (list (list 1 18 1) (om-make-color 0 0 0)) (list (list 1 18 1 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 19 0 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 20 0 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 21 0 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 22 0 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 23 0 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 24 0 0) (om-make-color 0 0 0)) (list (list 1 24 1) (om-make-color 0 0 0)) (list (list 1 24 1 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 25 0 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 26 0 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 27 0 0) (om-make-color 0 0 0)) (list (list 1 27 1) (om-make-color 0 0 0)) (list (list 1 27 1 0) (om-make-color 0 0 0)) (list (list 1 27 2) (om-make-color 0 0 0)) (list (list 1 27 2 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 1 28 0 0) (om-make-color 0 0 0)) (list (list 1 29) (om-make-color 0 0 0)) (list (list 1 29 0) (om-make-color 0 0 0)) (list (list 1 29 0 0) (om-make-color 0 0 0)) (list (list 1 30) (om-make-color 0 0 0)) (list (list 1 30 0) (om-make-color 0 0 0)) (list (list 1 30 0 0) (om-make-color 0 0 0)) (list (list 1 30 1) (om-make-color 0 0 0)) (list (list 1 30 1 0) (om-make-color 0 0 0)) (list (list 1 31) (om-make-color 0 0 0)) (list (list 1 31 0) (om-make-color 0 0 0)) (list (list 1 31 0 0) (om-make-color 0 0 0)) (list (list 1 32) (om-make-color 0 0 0)) (list (list 1 32 0) (om-make-color 0 0 0)) (list (list 1 32 0 0) (om-make-color 0 0 0)) (list (list 1 33) (om-make-color 0 0 0)) (list (list 1 33 0) (om-make-color 0 0 0)) (list (list 1 33 0 0) (om-make-color 0 0 0)) (list (list 1 34) (om-make-color 0 0 0)) (list (list 1 34 0) (om-make-color 0 0 0)) (list (list 1 34 0 0) (om-make-color 0 0 0)) (list (list 1 35) (om-make-color 0 0 0)) (list (list 1 35 0) (om-make-color 0 0 0)) (list (list 1 35 0 0) (om-make-color 0 0 0)) (list (list 1 36) (om-make-color 0 0 0)) (list (list 1 36 0) (om-make-color 0 0 0)) (list (list 1 36 0 0) (om-make-color 0 0 0)) (list (list 1 36 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 0 1) (om-make-color 0 0 0)) (list (list 2 0 2) (om-make-color 0 0 0)) (list (list 2 0 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 1 0 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 2 0 0) (om-make-color 0 0 0)) (list (list 2 2 1) (om-make-color 0 0 0)) (list (list 2 2 1 0) (om-make-color 0 0 0)) (list (list 2 2 2) (om-make-color 0 0 0)) (list (list 2 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 3 0 0) (om-make-color 0 0 0)) (list (list 2 3 1) (om-make-color 0 0 0)) (list (list 2 3 1 0) (om-make-color 0 0 0)) (list (list 2 3 2) (om-make-color 0 0 0)) (list (list 2 3 2 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 4 0 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 5 0 0) (om-make-color 0 0 0)) (list (list 2 5 1) (om-make-color 0 0 0)) (list (list 2 5 1 0) (om-make-color 0 0 0)) (list (list 2 5 2) (om-make-color 0 0 0)) (list (list 2 5 2 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 6 0 0) (om-make-color 0 0 0)) (list (list 2 6 1) (om-make-color 0 0 0)) (list (list 2 6 1 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 7 0 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 8 0 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 9 0 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 10 0 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 11 0 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 12 0 0) (om-make-color 0 0 0)) (list (list 2 12 1) (om-make-color 0 0 0)) (list (list 2 12 1 0) (om-make-color 0 0 0)) (list (list 2 12 2) (om-make-color 0 0 0)) (list (list 2 12 2 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 13 0 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 14 0 0) (om-make-color 0 0 0)) (list (list 2 14 1) (om-make-color 0 0 0)) (list (list 2 14 1 0) (om-make-color 0 0 0)) (list (list 2 14 2) (om-make-color 0 0 0)) (list (list 2 14 2 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 15 0 0) (om-make-color 0 0 0)) (list (list 2 15 1) (om-make-color 0 0 0)) (list (list 2 15 1 0) (om-make-color 0 0 0)) (list (list 2 15 2) (om-make-color 0 0 0)) (list (list 2 15 2 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 16 0 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 17 0 0) (om-make-color 0 0 0)) (list (list 2 17 1) (om-make-color 0 0 0)) (list (list 2 17 1 0) (om-make-color 0 0 0)) (list (list 2 17 2) (om-make-color 0 0 0)) (list (list 2 17 2 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 18 0 0) (om-make-color 0 0 0)) (list (list 2 18 1) (om-make-color 0 0 0)) (list (list 2 18 1 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 19 0 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 20 0 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 21 0 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 22 0 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 23 0 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 24 0 0) (om-make-color 0 0 0)) (list (list 2 24 1) (om-make-color 0 0 0)) (list (list 2 24 1 0) (om-make-color 0 0 0)) (list (list 2 24 2) (om-make-color 0 0 0)) (list (list 2 24 2 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 25 0 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 26 0 0) (om-make-color 0 0 0)) (list (list 2 26 1) (om-make-color 0 0 0)) (list (list 2 26 1 0) (om-make-color 0 0 0)) (list (list 2 26 2) (om-make-color 0 0 0)) (list (list 2 26 2 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 27 0 0) (om-make-color 0 0 0)) (list (list 2 27 1) (om-make-color 0 0 0)) (list (list 2 27 1 0) (om-make-color 0 0 0)) (list (list 2 27 2) (om-make-color 0 0 0)) (list (list 2 27 2 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 28 0 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 2 29 0 0) (om-make-color 0 0 0)) (list (list 2 29 1) (om-make-color 0 0 0)) (list (list 2 29 1 0) (om-make-color 0 0 0)) (list (list 2 29 2) (om-make-color 0 0 0)) (list (list 2 29 2 0) (om-make-color 0 0 0)) (list (list 2 30) (om-make-color 0 0 0)) (list (list 2 30 0) (om-make-color 0 0 0)) (list (list 2 30 0 0) (om-make-color 0 0 0)) (list (list 2 30 1) (om-make-color 0 0 0)) (list (list 2 30 1 0) (om-make-color 0 0 0)) (list (list 2 31) (om-make-color 0 0 0)) (list (list 2 31 0) (om-make-color 0 0 0)) (list (list 2 31 0 0) (om-make-color 0 0 0)) (list (list 2 32) (om-make-color 0 0 0)) (list (list 2 32 0) (om-make-color 0 0 0)) (list (list 2 32 0 0) (om-make-color 0 0 0)) (list (list 2 33) (om-make-color 0 0 0)) (list (list 2 33 0) (om-make-color 0 0 0)) (list (list 2 33 0 0) (om-make-color 0 0 0)) (list (list 2 34) (om-make-color 0 0 0)) (list (list 2 34 0) (om-make-color 0 0 0)) (list (list 2 34 0 0) (om-make-color 0 0 0)) (list (list 2 35) (om-make-color 0 0 0)) (list (list 2 35 0) (om-make-color 0 0 0)) (list (list 2 35 0 0) (om-make-color 0 0 0)) (list (list 2 36) (om-make-color 0 0 0)) (list (list 2 36 0) (om-make-color 0 0 0)) (list (list 2 36 0 0) (om-make-color 0 0 0)) (list (list 2 36 1) (om-make-color 0 0 0)) (list (list 2 36 1 0) (om-make-color 0 0 0)) (list (list 2 36 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 1 1) (om-make-color 0 0 0)) (list (list 3 1 2) (om-make-color 0 0 0)) (list (list 3 1 2 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 2 0 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 3 0 0) (om-make-color 0 0 0)) (list (list 3 3 1) (om-make-color 0 0 0)) (list (list 3 3 1 0) (om-make-color 0 0 0)) (list (list 3 3 2) (om-make-color 0 0 0)) (list (list 3 3 2 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 4 0 0) (om-make-color 0 0 0)) (list (list 3 4 1) (om-make-color 0 0 0)) (list (list 3 4 1 0) (om-make-color 0 0 0)) (list (list 3 4 2) (om-make-color 0 0 0)) (list (list 3 4 2 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 5 0 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 6 0 0) (om-make-color 0 0 0)) (list (list 3 6 1) (om-make-color 0 0 0)) (list (list 3 6 1 0) (om-make-color 0 0 0)) (list (list 3 6 2) (om-make-color 0 0 0)) (list (list 3 6 2 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 7 0 0) (om-make-color 0 0 0)) (list (list 3 7 1) (om-make-color 0 0 0)) (list (list 3 7 1 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 8 0 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 9 0 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 10 0 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 11 0 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 12 0 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 13 0 0) (om-make-color 0 0 0)) (list (list 3 13 1) (om-make-color 0 0 0)) (list (list 3 13 1 0) (om-make-color 0 0 0)) (list (list 3 13 2) (om-make-color 0 0 0)) (list (list 3 13 2 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 14 0 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 15 0 0) (om-make-color 0 0 0)) (list (list 3 15 1) (om-make-color 0 0 0)) (list (list 3 15 1 0) (om-make-color 0 0 0)) (list (list 3 15 2) (om-make-color 0 0 0)) (list (list 3 15 2 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 16 0 0) (om-make-color 0 0 0)) (list (list 3 16 1) (om-make-color 0 0 0)) (list (list 3 16 1 0) (om-make-color 0 0 0)) (list (list 3 16 2) (om-make-color 0 0 0)) (list (list 3 16 2 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 3 17 0 0) (om-make-color 0 0 0)) (list (list 3 18) (om-make-color 0 0 0)) (list (list 3 18 0) (om-make-color 0 0 0)) (list (list 3 18 0 0) (om-make-color 0 0 0)) (list (list 3 18 1) (om-make-color 0 0 0)) (list (list 3 18 1 0) (om-make-color 0 0 0)) (list (list 3 18 2) (om-make-color 0 0 0)) (list (list 3 18 2 0) (om-make-color 0 0 0)) (list (list 3 19) (om-make-color 0 0 0)) (list (list 3 19 0) (om-make-color 0 0 0)) (list (list 3 19 0 0) (om-make-color 0 0 0)) (list (list 3 19 1) (om-make-color 0 0 0)) (list (list 3 19 1 0) (om-make-color 0 0 0)) (list (list 3 20) (om-make-color 0 0 0)) (list (list 3 20 0) (om-make-color 0 0 0)) (list (list 3 20 0 0) (om-make-color 0 0 0)) (list (list 3 21) (om-make-color 0 0 0)) (list (list 3 21 0) (om-make-color 0 0 0)) (list (list 3 21 0 0) (om-make-color 0 0 0)) (list (list 3 22) (om-make-color 0 0 0)) (list (list 3 22 0) (om-make-color 0 0 0)) (list (list 3 22 0 0) (om-make-color 0 0 0)) (list (list 3 23) (om-make-color 0 0 0)) (list (list 3 23 0) (om-make-color 0 0 0)) (list (list 3 23 0 0) (om-make-color 0 0 0)) (list (list 3 24) (om-make-color 0 0 0)) (list (list 3 24 0) (om-make-color 0 0 0)) (list (list 3 24 0 0) (om-make-color 0 0 0)) (list (list 3 25) (om-make-color 0 0 0)) (list (list 3 25 0) (om-make-color 0 0 0)) (list (list 3 25 0 0) (om-make-color 0 0 0)) (list (list 3 25 1) (om-make-color 0 0 0)) (list (list 3 25 1 0) (om-make-color 0 0 0)) (list (list 3 25 2) (om-make-color 0 0 0)) (list (list 3 25 2 0) (om-make-color 0 0 0)) (list (list 3 26) (om-make-color 0 0 0)) (list (list 3 26 0) (om-make-color 0 0 0)) (list (list 3 26 0 0) (om-make-color 0 0 0)) (list (list 3 27) (om-make-color 0 0 0)) (list (list 3 27 0) (om-make-color 0 0 0)) (list (list 3 27 0 0) (om-make-color 0 0 0)) (list (list 3 27 1) (om-make-color 0 0 0)) (list (list 3 27 1 0) (om-make-color 0 0 0)) (list (list 3 27 2) (om-make-color 0 0 0)) (list (list 3 27 2 0) (om-make-color 0 0 0)) (list (list 3 28) (om-make-color 0 0 0)) (list (list 3 28 0) (om-make-color 0 0 0)) (list (list 3 28 0 0) (om-make-color 0 0 0)) (list (list 3 28 1) (om-make-color 0 0 0)) (list (list 3 28 1 0) (om-make-color 0 0 0)) (list (list 3 28 2) (om-make-color 0 0 0)) (list (list 3 28 2 0) (om-make-color 0 0 0)) (list (list 3 29) (om-make-color 0 0 0)) (list (list 3 29 0) (om-make-color 0 0 0)) (list (list 3 29 0 0) (om-make-color 0 0 0)) (list (list 3 30) (om-make-color 0 0 0)) (list (list 3 30 0) (om-make-color 0 0 0)) (list (list 3 30 0 0) (om-make-color 0 0 0)) (list (list 3 30 1) (om-make-color 0 0 0)) (list (list 3 30 1 0) (om-make-color 0 0 0)) (list (list 3 30 2) (om-make-color 0 0 0)) (list (list 3 30 2 0) (om-make-color 0 0 0)) (list (list 3 31) (om-make-color 0 0 0)) (list (list 3 31 0) (om-make-color 0 0 0)) (list (list 3 31 0 0) (om-make-color 0 0 0)) (list (list 3 31 1) (om-make-color 0 0 0)) (list (list 3 31 1 0) (om-make-color 0 0 0)) (list (list 3 32) (om-make-color 0 0 0)) (list (list 3 32 0) (om-make-color 0 0 0)) (list (list 3 32 0 0) (om-make-color 0 0 0)) (list (list 3 33) (om-make-color 0 0 0)) (list (list 3 33 0) (om-make-color 0 0 0)) (list (list 3 33 0 0) (om-make-color 0 0 0)) (list (list 3 34) (om-make-color 0 0 0)) (list (list 3 34 0) (om-make-color 0 0 0)) (list (list 3 34 0 0) (om-make-color 0 0 0)) (list (list 3 35) (om-make-color 0 0 0)) (list (list 3 35 0) (om-make-color 0 0 0)) (list (list 3 35 0 0) (om-make-color 0 0 0)) (list (list 3 36) (om-make-color 0 0 0)) (list (list 3 36 0) (om-make-color 0 0 0)) (list (list 3 36 0 0) (om-make-color 0 0 0)) (list (list 3 37) (om-make-color 0 0 0)) (list (list 3 37 0) (om-make-color 0 0 0)) (list (list 3 37 0 0) (om-make-color 0 0 0)) (list (list 3 37 1) (om-make-color 0 0 0)) (list (list 3 37 1 0) (om-make-color 0 0 0)) (list (list 3 37 2) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 2 1) (om-make-color 0 0 0)) (list (list 4 2 2) (om-make-color 0 0 0)) (list (list 4 2 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 3 0 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 4 0 0) (om-make-color 0 0 0)) (list (list 4 4 1) (om-make-color 0 0 0)) (list (list 4 4 1 0) (om-make-color 0 0 0)) (list (list 4 4 2) (om-make-color 0 0 0)) (list (list 4 4 2 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 5 0 0) (om-make-color 0 0 0)) (list (list 4 5 1) (om-make-color 0 0 0)) (list (list 4 5 1 0) (om-make-color 0 0 0)) (list (list 4 5 2) (om-make-color 0 0 0)) (list (list 4 5 2 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 6 0 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 7 0 0) (om-make-color 0 0 0)) (list (list 4 7 1) (om-make-color 0 0 0)) (list (list 4 7 1 0) (om-make-color 0 0 0)) (list (list 4 7 2) (om-make-color 0 0 0)) (list (list 4 7 2 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 8 0 0) (om-make-color 0 0 0)) (list (list 4 8 1) (om-make-color 0 0 0)) (list (list 4 8 1 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 9 0 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 10 0 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 11 0 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 12 0 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 13 0 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 14 0 0) (om-make-color 0 0 0)) (list (list 4 14 1) (om-make-color 0 0 0)) (list (list 4 14 1 0) (om-make-color 0 0 0)) (list (list 4 14 2) (om-make-color 0 0 0)) (list (list 4 14 2 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 15 0 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 16 0 0) (om-make-color 0 0 0)) (list (list 4 16 1) (om-make-color 0 0 0)) (list (list 4 16 1 0) (om-make-color 0 0 0)) (list (list 4 16 2) (om-make-color 0 0 0)) (list (list 4 16 2 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 4 17 0 0) (om-make-color 0 0 0)) (list (list 4 17 1) (om-make-color 0 0 0)) (list (list 4 17 1 0) (om-make-color 0 0 0)) (list (list 4 17 2) (om-make-color 0 0 0)) (list (list 4 17 2 0) (om-make-color 0 0 0)) (list (list 4 18) (om-make-color 0 0 0)) (list (list 4 18 0) (om-make-color 0 0 0)) (list (list 4 18 0 0) (om-make-color 0 0 0)) (list (list 4 19) (om-make-color 0 0 0)) (list (list 4 19 0) (om-make-color 0 0 0)) (list (list 4 19 0 0) (om-make-color 0 0 0)) (list (list 4 19 1) (om-make-color 0 0 0)) (list (list 4 19 1 0) (om-make-color 0 0 0)) (list (list 4 19 2) (om-make-color 0 0 0)) (list (list 4 19 2 0) (om-make-color 0 0 0)) (list (list 4 20) (om-make-color 0 0 0)) (list (list 4 20 0) (om-make-color 0 0 0)) (list (list 4 20 0 0) (om-make-color 0 0 0)) (list (list 4 20 1) (om-make-color 0 0 0)) (list (list 4 20 1 0) (om-make-color 0 0 0)) (list (list 4 21) (om-make-color 0 0 0)) (list (list 4 21 0) (om-make-color 0 0 0)) (list (list 4 21 0 0) (om-make-color 0 0 0)) (list (list 4 22) (om-make-color 0 0 0)) (list (list 4 22 0) (om-make-color 0 0 0)) (list (list 4 22 0 0) (om-make-color 0 0 0)) (list (list 4 23) (om-make-color 0 0 0)) (list (list 4 23 0) (om-make-color 0 0 0)) (list (list 4 23 0 0) (om-make-color 0 0 0)) (list (list 4 24) (om-make-color 0 0 0)) (list (list 4 24 0) (om-make-color 0 0 0)) (list (list 4 24 0 0) (om-make-color 0 0 0)) (list (list 4 25) (om-make-color 0 0 0)) (list (list 4 25 0) (om-make-color 0 0 0)) (list (list 4 25 0 0) (om-make-color 0 0 0)) (list (list 4 26) (om-make-color 0 0 0)) (list (list 4 26 0) (om-make-color 0 0 0)) (list (list 4 26 0 0) (om-make-color 0 0 0)) (list (list 4 26 1) (om-make-color 0 0 0)) (list (list 4 26 1 0) (om-make-color 0 0 0)) (list (list 4 26 2) (om-make-color 0 0 0)) (list (list 4 26 2 0) (om-make-color 0 0 0)) (list (list 4 27) (om-make-color 0 0 0)) (list (list 4 27 0) (om-make-color 0 0 0)) (list (list 4 27 0 0) (om-make-color 0 0 0)) (list (list 4 28) (om-make-color 0 0 0)) (list (list 4 28 0) (om-make-color 0 0 0)) (list (list 4 28 0 0) (om-make-color 0 0 0)) (list (list 4 28 1) (om-make-color 0 0 0)) (list (list 4 28 1 0) (om-make-color 0 0 0)) (list (list 4 28 2) (om-make-color 0 0 0)) (list (list 4 28 2 0) (om-make-color 0 0 0)) (list (list 4 29) (om-make-color 0 0 0)) (list (list 4 29 0) (om-make-color 0 0 0)) (list (list 4 29 0 0) (om-make-color 0 0 0)) (list (list 4 29 1) (om-make-color 0 0 0)) (list (list 4 29 1 0) (om-make-color 0 0 0)) (list (list 4 29 2) (om-make-color 0 0 0)) (list (list 4 29 2 0) (om-make-color 0 0 0)) (list (list 4 30) (om-make-color 0 0 0)) (list (list 4 30 0) (om-make-color 0 0 0)) (list (list 4 30 0 0) (om-make-color 0 0 0)) (list (list 4 31) (om-make-color 0 0 0)) (list (list 4 31 0) (om-make-color 0 0 0)) (list (list 4 31 0 0) (om-make-color 0 0 0)) (list (list 4 31 1) (om-make-color 0 0 0)) (list (list 4 31 1 0) (om-make-color 0 0 0)) (list (list 4 31 2) (om-make-color 0 0 0)) (list (list 4 31 2 0) (om-make-color 0 0 0)) (list (list 4 32) (om-make-color 0 0 0)) (list (list 4 32 0) (om-make-color 0 0 0)) (list (list 4 32 0 0) (om-make-color 0 0 0)) (list (list 4 32 1) (om-make-color 0 0 0)) (list (list 4 32 1 0) (om-make-color 0 0 0)) (list (list 4 33) (om-make-color 0 0 0)) (list (list 4 33 0) (om-make-color 0 0 0)) (list (list 4 33 0 0) (om-make-color 0 0 0)) (list (list 4 34) (om-make-color 0 0 0)) (list (list 4 34 0) (om-make-color 0 0 0)) (list (list 4 34 0 0) (om-make-color 0 0 0)) (list (list 4 35) (om-make-color 0 0 0)) (list (list 4 35 0) (om-make-color 0 0 0)) (list (list 4 35 0 0) (om-make-color 0 0 0)) (list (list 4 36) (om-make-color 0 0 0)) (list (list 4 36 0) (om-make-color 0 0 0)) (list (list 4 36 0 0) (om-make-color 0 0 0)) (list (list 4 37) (om-make-color 0 0 0)) (list (list 4 37 0) (om-make-color 0 0 0)) (list (list 4 37 0 0) (om-make-color 0 0 0)) (list (list 4 38) (om-make-color 0 0 0)) (list (list 4 38 0) (om-make-color 0 0 0)) (list (list 4 38 0 0) (om-make-color 0 0 0)) (list (list 4 38 1) (om-make-color 0 0 0)) (list (list 4 38 1 0) (om-make-color 0 0 0)) (list (list 4 38 2) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 4 0 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 5 0 0) (om-make-color 0 0 0)) (list (list 5 5 1) (om-make-color 0 0 0)) (list (list 5 5 1 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 6 0 0) (om-make-color 0 0 0)) (list (list 5 6 1) (om-make-color 0 0 0)) (list (list 5 6 1 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 7 0 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 8 0 0) (om-make-color 0 0 0)) (list (list 5 8 1) (om-make-color 0 0 0)) (list (list 5 8 1 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 9 0 0) (om-make-color 0 0 0)) (list (list 5 9 1) (om-make-color 0 0 0)) (list (list 5 9 1 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 10 0 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 11 0 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 12 0 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 13 0 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 14 0 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 15 0 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 16 0 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 5 17 0 0) (om-make-color 0 0 0)) (list (list 5 17 1) (om-make-color 0 0 0)) (list (list 5 17 1 0) (om-make-color 0 0 0)) (list (list 5 18) (om-make-color 0 0 0)) (list (list 5 18 0) (om-make-color 0 0 0)) (list (list 5 18 0 0) (om-make-color 0 0 0)) (list (list 5 18 1) (om-make-color 0 0 0)) (list (list 5 18 1 0) (om-make-color 0 0 0)) (list (list 5 19) (om-make-color 0 0 0)) (list (list 5 19 0) (om-make-color 0 0 0)) (list (list 5 19 0 0) (om-make-color 0 0 0)) (list (list 5 20) (om-make-color 0 0 0)) (list (list 5 20 0) (om-make-color 0 0 0)) (list (list 5 20 0 0) (om-make-color 0 0 0)) (list (list 5 20 1) (om-make-color 0 0 0)) (list (list 5 20 1 0) (om-make-color 0 0 0)) (list (list 5 21) (om-make-color 0 0 0)) (list (list 5 21 0) (om-make-color 0 0 0)) (list (list 5 21 0 0) (om-make-color 0 0 0)) (list (list 5 21 1) (om-make-color 0 0 0)) (list (list 5 21 1 0) (om-make-color 0 0 0)) (list (list 5 22) (om-make-color 0 0 0)) (list (list 5 22 0) (om-make-color 0 0 0)) (list (list 5 22 0 0) (om-make-color 0 0 0)) (list (list 5 23) (om-make-color 0 0 0)) (list (list 5 23 0) (om-make-color 0 0 0)) (list (list 5 23 0 0) (om-make-color 0 0 0)) (list (list 5 24) (om-make-color 0 0 0)) (list (list 5 24 0) (om-make-color 0 0 0)) (list (list 5 24 0 0) (om-make-color 0 0 0)) (list (list 5 25) (om-make-color 0 0 0)) (list (list 5 25 0) (om-make-color 0 0 0)) (list (list 5 25 0 0) (om-make-color 0 0 0)) (list (list 5 26) (om-make-color 0 0 0)) (list (list 5 26 0) (om-make-color 0 0 0)) (list (list 5 26 0 0) (om-make-color 0 0 0)) (list (list 5 27) (om-make-color 0 0 0)) (list (list 5 27 0) (om-make-color 0 0 0)) (list (list 5 27 0 0) (om-make-color 0 0 0)) (list (list 5 28) (om-make-color 0 0 0)) (list (list 5 28 0) (om-make-color 0 0 0)) (list (list 5 28 0 0) (om-make-color 0 0 0)) (list (list 5 29) (om-make-color 0 0 0)) (list (list 5 29 0) (om-make-color 0 0 0)) (list (list 5 29 0 0) (om-make-color 0 0 0)) (list (list 5 29 1) (om-make-color 0 0 0)) (list (list 5 29 1 0) (om-make-color 0 0 0)) (list (list 5 30) (om-make-color 0 0 0)) (list (list 5 30 0) (om-make-color 0 0 0)) (list (list 5 30 0 0) (om-make-color 0 0 0)) (list (list 5 30 1) (om-make-color 0 0 0)) (list (list 5 30 1 0) (om-make-color 0 0 0)) (list (list 5 31) (om-make-color 0 0 0)) (list (list 5 31 0) (om-make-color 0 0 0)) (list (list 5 31 0 0) (om-make-color 0 0 0)) (list (list 5 32) (om-make-color 0 0 0)) (list (list 5 32 0) (om-make-color 0 0 0)) (list (list 5 32 0 0) (om-make-color 0 0 0)) (list (list 5 32 1) (om-make-color 0 0 0)) (list (list 5 32 1 0) (om-make-color 0 0 0)) (list (list 5 33) (om-make-color 0 0 0)) (list (list 5 33 0) (om-make-color 0 0 0)) (list (list 5 33 0 0) (om-make-color 0 0 0)) (list (list 5 33 1) (om-make-color 0 0 0)) (list (list 5 33 1 0) (om-make-color 0 0 0)) (list (list 5 34) (om-make-color 0 0 0)) (list (list 5 34 0) (om-make-color 0 0 0)) (list (list 5 34 0 0) (om-make-color 0 0 0)) (list (list 5 35) (om-make-color 0 0 0)) (list (list 5 35 0) (om-make-color 0 0 0)) (list (list 5 35 0 0) (om-make-color 0 0 0)) (list (list 5 36) (om-make-color 0 0 0)) (list (list 5 36 0) (om-make-color 0 0 0)) (list (list 5 36 0 0) (om-make-color 0 0 0)) (list (list 5 37) (om-make-color 0 0 0)) (list (list 5 37 0) (om-make-color 0 0 0)) (list (list 5 37 0 0) (om-make-color 0 0 0)) (list (list 5 38) (om-make-color 0 0 0)) (list (list 5 38 0) (om-make-color 0 0 0)) (list (list 5 38 0 0) (om-make-color 0 0 0)) (list (list 5 39) (om-make-color 0 0 0)) (list (list 5 39 0) (om-make-color 0 0 0)) (list (list 5 39 0 0) (om-make-color 0 0 0)) (list (list 5 40) (om-make-color 0 0 0)) (list (list 5 40 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 0 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 1 0) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 2 0) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 3 0) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 4 0) (om-make-color 0 0 0)) (list (list 6 4 1) (om-make-color 0 0 0)) (list (list 6 4 1 0) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 5 0) (om-make-color 0 0 0)) (list (list 6 5 0 0) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 6 0) (om-make-color 0 0 0)) (list (list 6 6 0 0) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 7 0) (om-make-color 0 0 0)) (list (list 6 7 0 0) (om-make-color 0 0 0)) (list (list 6 7 1) (om-make-color 0 0 0)) (list (list 6 7 1 0) (om-make-color 0 0 0)) (list (list 6 7 2) (om-make-color 0 0 0)) (list (list 6 7 2 0) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 8 0) (om-make-color 0 0 0)) (list (list 6 8 0 0) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 6 9 0) (om-make-color 0 0 0)) (list (list 6 9 0 0) (om-make-color 0 0 0)) (list (list 6 10) (om-make-color 0 0 0)) (list (list 6 10 0) (om-make-color 0 0 0)) (list (list 6 10 0 0) (om-make-color 0 0 0)) (list (list 6 10 1) (om-make-color 0 0 0)) (list (list 6 10 1 0) (om-make-color 0 0 0)) (list (list 6 11) (om-make-color 0 0 0)) (list (list 6 11 0) (om-make-color 0 0 0)) (list (list 6 11 0 0) (om-make-color 0 0 0)) (list (list 6 12) (om-make-color 0 0 0)) (list (list 6 12 0) (om-make-color 0 0 0)) (list (list 6 12 0 0) (om-make-color 0 0 0)) (list (list 6 13) (om-make-color 0 0 0)) (list (list 6 13 0) (om-make-color 0 0 0)) (list (list 6 13 0 0) (om-make-color 0 0 0)) (list (list 6 14) (om-make-color 0 0 0)) (list (list 6 14 0) (om-make-color 0 0 0)) (list (list 6 14 0 0) (om-make-color 0 0 0)) (list (list 6 15) (om-make-color 0 0 0)) (list (list 6 15 0) (om-make-color 0 0 0)) (list (list 6 15 0 0) (om-make-color 0 0 0)) (list (list 6 16) (om-make-color 0 0 0)) (list (list 6 16 0) (om-make-color 0 0 0)) (list (list 6 16 0 0) (om-make-color 0 0 0)) (list (list 6 16 1) (om-make-color 0 0 0)) (list (list 6 16 1 0) (om-make-color 0 0 0)) (list (list 6 17) (om-make-color 0 0 0)) (list (list 6 17 0) (om-make-color 0 0 0)) (list (list 6 17 0 0) (om-make-color 0 0 0)) (list (list 6 18) (om-make-color 0 0 0)) (list (list 6 18 0) (om-make-color 0 0 0)) (list (list 6 18 0 0) (om-make-color 0 0 0)) (list (list 6 19) (om-make-color 0 0 0)) (list (list 6 19 0) (om-make-color 0 0 0)) (list (list 6 19 0 0) (om-make-color 0 0 0)) (list (list 6 19 1) (om-make-color 0 0 0)) (list (list 6 19 1 0) (om-make-color 0 0 0)) (list (list 6 19 2) (om-make-color 0 0 0)) (list (list 6 19 2 0) (om-make-color 0 0 0)) (list (list 6 20) (om-make-color 0 0 0)) (list (list 6 20 0) (om-make-color 0 0 0)) (list (list 6 20 0 0) (om-make-color 0 0 0)) (list (list 6 21) (om-make-color 0 0 0)) (list (list 6 21 0) (om-make-color 0 0 0)) (list (list 6 21 0 0) (om-make-color 0 0 0)) (list (list 6 22) (om-make-color 0 0 0)) (list (list 6 22 0) (om-make-color 0 0 0)) (list (list 6 22 0 0) (om-make-color 0 0 0)) (list (list 6 22 1) (om-make-color 0 0 0)) (list (list 6 22 1 0) (om-make-color 0 0 0)) (list (list 6 23) (om-make-color 0 0 0)) (list (list 6 23 0) (om-make-color 0 0 0)) (list (list 6 23 0 0) (om-make-color 0 0 0)) (list (list 6 24) (om-make-color 0 0 0)) (list (list 6 24 0) (om-make-color 0 0 0)) (list (list 6 24 0 0) (om-make-color 0 0 0)) (list (list 6 25) (om-make-color 0 0 0)) (list (list 6 25 0) (om-make-color 0 0 0)) (list (list 6 25 0 0) (om-make-color 0 0 0)) (list (list 6 26) (om-make-color 0 0 0)) (list (list 6 26 0) (om-make-color 0 0 0)) (list (list 6 26 0 0) (om-make-color 0 0 0)) (list (list 6 27) (om-make-color 0 0 0)) (list (list 6 27 0) (om-make-color 0 0 0)) (list (list 6 27 0 0) (om-make-color 0 0 0)) (list (list 6 28) (om-make-color 0 0 0)) (list (list 6 28 0) (om-make-color 0 0 0)) (list (list 6 28 0 0) (om-make-color 0 0 0)) (list (list 6 28 1) (om-make-color 0 0 0)) (list (list 6 28 1 0) (om-make-color 0 0 0)) (list (list 6 29) (om-make-color 0 0 0)) (list (list 6 29 0) (om-make-color 0 0 0)) (list (list 6 29 0 0) (om-make-color 0 0 0)) (list (list 6 30) (om-make-color 0 0 0)) (list (list 6 30 0) (om-make-color 0 0 0)) (list (list 6 30 0 0) (om-make-color 0 0 0)) (list (list 6 31) (om-make-color 0 0 0)) (list (list 6 31 0) (om-make-color 0 0 0)) (list (list 6 31 0 0) (om-make-color 0 0 0)) (list (list 6 31 1) (om-make-color 0 0 0)) (list (list 6 31 1 0) (om-make-color 0 0 0)) (list (list 6 31 2) (om-make-color 0 0 0)) (list (list 6 31 2 0) (om-make-color 0 0 0)) (list (list 6 32) (om-make-color 0 0 0)) (list (list 6 32 0) (om-make-color 0 0 0)) (list (list 6 32 0 0) (om-make-color 0 0 0)) (list (list 6 33) (om-make-color 0 0 0)) (list (list 6 33 0) (om-make-color 0 0 0)) (list (list 6 33 0 0) (om-make-color 0 0 0)) (list (list 6 34) (om-make-color 0 0 0)) (list (list 6 34 0) (om-make-color 0 0 0)) (list (list 6 34 0 0) (om-make-color 0 0 0)) (list (list 6 34 1) (om-make-color 0 0 0)) (list (list 6 34 1 0) (om-make-color 0 0 0)) (list (list 6 35) (om-make-color 0 0 0)) (list (list 6 35 0) (om-make-color 0 0 0)) (list (list 6 35 0 0) (om-make-color 0 0 0)) (list (list 6 36) (om-make-color 0 0 0)) (list (list 6 36 0) (om-make-color 0 0 0)) (list (list 6 36 0 0) (om-make-color 0 0 0)) (list (list 6 37) (om-make-color 0 0 0)) (list (list 6 37 0) (om-make-color 0 0 0)) (list (list 6 37 0 0) (om-make-color 0 0 0)) (list (list 6 38) (om-make-color 0 0 0)) (list (list 6 38 0) (om-make-color 0 0 0)) (list (list 6 38 0 0) (om-make-color 0 0 0)) (list (list 6 39) (om-make-color 0 0 0)) (list (list 6 39 0) (om-make-color 0 0 0)) (list (list 6 39 0 0) (om-make-color 0 0 0)) (list (list 6 40) (om-make-color 0 0 0)) (list (list 6 40 0) (om-make-color 0 0 0)) (list (list 6 40 0 0) (om-make-color 0 0 0)) (list (list 6 40 1) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 0 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 1 0) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 2 0) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 3 0) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 4 0) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 5 0) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 6 0) (om-make-color 0 0 0)) (list (list 7 6 1) (om-make-color 0 0 0)) (list (list 7 6 2) (om-make-color 0 0 0)) (list (list 7 6 2 0) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 7 0) (om-make-color 0 0 0)) (list (list 7 7 0 0) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 8 0) (om-make-color 0 0 0)) (list (list 7 8 0 0) (om-make-color 0 0 0)) (list (list 7 8 1) (om-make-color 0 0 0)) (list (list 7 8 1 0) (om-make-color 0 0 0)) (list (list 7 8 2) (om-make-color 0 0 0)) (list (list 7 8 2 0) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 7 9 0) (om-make-color 0 0 0)) (list (list 7 9 0 0) (om-make-color 0 0 0)) (list (list 7 9 1) (om-make-color 0 0 0)) (list (list 7 9 1 0) (om-make-color 0 0 0)) (list (list 7 9 2) (om-make-color 0 0 0)) (list (list 7 9 2 0) (om-make-color 0 0 0)) (list (list 7 10) (om-make-color 0 0 0)) (list (list 7 10 0) (om-make-color 0 0 0)) (list (list 7 10 0 0) (om-make-color 0 0 0)) (list (list 7 11) (om-make-color 0 0 0)) (list (list 7 11 0) (om-make-color 0 0 0)) (list (list 7 11 0 0) (om-make-color 0 0 0)) (list (list 7 11 1) (om-make-color 0 0 0)) (list (list 7 11 1 0) (om-make-color 0 0 0)) (list (list 7 11 2) (om-make-color 0 0 0)) (list (list 7 11 2 0) (om-make-color 0 0 0)) (list (list 7 12) (om-make-color 0 0 0)) (list (list 7 12 0) (om-make-color 0 0 0)) (list (list 7 12 0 0) (om-make-color 0 0 0)) (list (list 7 12 1) (om-make-color 0 0 0)) (list (list 7 12 1 0) (om-make-color 0 0 0)) (list (list 7 13) (om-make-color 0 0 0)) (list (list 7 13 0) (om-make-color 0 0 0)) (list (list 7 13 0 0) (om-make-color 0 0 0)) (list (list 7 14) (om-make-color 0 0 0)) (list (list 7 14 0) (om-make-color 0 0 0)) (list (list 7 14 0 0) (om-make-color 0 0 0)) (list (list 7 15) (om-make-color 0 0 0)) (list (list 7 15 0) (om-make-color 0 0 0)) (list (list 7 15 0 0) (om-make-color 0 0 0)) (list (list 7 16) (om-make-color 0 0 0)) (list (list 7 16 0) (om-make-color 0 0 0)) (list (list 7 16 0 0) (om-make-color 0 0 0)) (list (list 7 17) (om-make-color 0 0 0)) (list (list 7 17 0) (om-make-color 0 0 0)) (list (list 7 17 0 0) (om-make-color 0 0 0)) (list (list 7 18) (om-make-color 0 0 0)) (list (list 7 18 0) (om-make-color 0 0 0)) (list (list 7 18 0 0) (om-make-color 0 0 0)) (list (list 7 18 1) (om-make-color 0 0 0)) (list (list 7 18 1 0) (om-make-color 0 0 0)) (list (list 7 18 2) (om-make-color 0 0 0)) (list (list 7 18 2 0) (om-make-color 0 0 0)) (list (list 7 19) (om-make-color 0 0 0)) (list (list 7 19 0) (om-make-color 0 0 0)) (list (list 7 19 0 0) (om-make-color 0 0 0)) (list (list 7 20) (om-make-color 0 0 0)) (list (list 7 20 0) (om-make-color 0 0 0)) (list (list 7 20 0 0) (om-make-color 0 0 0)) (list (list 7 20 1) (om-make-color 0 0 0)) (list (list 7 20 1 0) (om-make-color 0 0 0)) (list (list 7 20 2) (om-make-color 0 0 0)) (list (list 7 20 2 0) (om-make-color 0 0 0)) (list (list 7 21) (om-make-color 0 0 0)) (list (list 7 21 0) (om-make-color 0 0 0)) (list (list 7 21 0 0) (om-make-color 0 0 0)) (list (list 7 21 1) (om-make-color 0 0 0)) (list (list 7 21 1 0) (om-make-color 0 0 0)) (list (list 7 21 2) (om-make-color 0 0 0)) (list (list 7 21 2 0) (om-make-color 0 0 0)) (list (list 7 22) (om-make-color 0 0 0)) (list (list 7 22 0) (om-make-color 0 0 0)) (list (list 7 22 0 0) (om-make-color 0 0 0)) (list (list 7 23) (om-make-color 0 0 0)) (list (list 7 23 0) (om-make-color 0 0 0)) (list (list 7 23 0 0) (om-make-color 0 0 0)) (list (list 7 23 1) (om-make-color 0 0 0)) (list (list 7 23 1 0) (om-make-color 0 0 0)) (list (list 7 23 2) (om-make-color 0 0 0)) (list (list 7 23 2 0) (om-make-color 0 0 0)) (list (list 7 24) (om-make-color 0 0 0)) (list (list 7 24 0) (om-make-color 0 0 0)) (list (list 7 24 0 0) (om-make-color 0 0 0)) (list (list 7 24 1) (om-make-color 0 0 0)) (list (list 7 24 1 0) (om-make-color 0 0 0)) (list (list 7 25) (om-make-color 0 0 0)) (list (list 7 25 0) (om-make-color 0 0 0)) (list (list 7 25 0 0) (om-make-color 0 0 0)) (list (list 7 26) (om-make-color 0 0 0)) (list (list 7 26 0) (om-make-color 0 0 0)) (list (list 7 26 0 0) (om-make-color 0 0 0)) (list (list 7 27) (om-make-color 0 0 0)) (list (list 7 27 0) (om-make-color 0 0 0)) (list (list 7 27 0 0) (om-make-color 0 0 0)) (list (list 7 28) (om-make-color 0 0 0)) (list (list 7 28 0) (om-make-color 0 0 0)) (list (list 7 28 0 0) (om-make-color 0 0 0)) (list (list 7 29) (om-make-color 0 0 0)) (list (list 7 29 0) (om-make-color 0 0 0)) (list (list 7 29 0 0) (om-make-color 0 0 0)) (list (list 7 30) (om-make-color 0 0 0)) (list (list 7 30 0) (om-make-color 0 0 0)) (list (list 7 30 0 0) (om-make-color 0 0 0)) (list (list 7 30 1) (om-make-color 0 0 0)) (list (list 7 30 1 0) (om-make-color 0 0 0)) (list (list 7 30 2) (om-make-color 0 0 0)) (list (list 7 30 2 0) (om-make-color 0 0 0)) (list (list 7 31) (om-make-color 0 0 0)) (list (list 7 31 0) (om-make-color 0 0 0)) (list (list 7 31 0 0) (om-make-color 0 0 0)) (list (list 7 32) (om-make-color 0 0 0)) (list (list 7 32 0) (om-make-color 0 0 0)) (list (list 7 32 0 0) (om-make-color 0 0 0)) (list (list 7 32 1) (om-make-color 0 0 0)) (list (list 7 32 1 0) (om-make-color 0 0 0)) (list (list 7 32 2) (om-make-color 0 0 0)) (list (list 7 32 2 0) (om-make-color 0 0 0)) (list (list 7 33) (om-make-color 0 0 0)) (list (list 7 33 0) (om-make-color 0 0 0)) (list (list 7 33 0 0) (om-make-color 0 0 0)) (list (list 7 33 1) (om-make-color 0 0 0)) (list (list 7 33 1 0) (om-make-color 0 0 0)) (list (list 7 33 2) (om-make-color 0 0 0)) (list (list 7 33 2 0) (om-make-color 0 0 0)) (list (list 7 34) (om-make-color 0 0 0)) (list (list 7 34 0) (om-make-color 0 0 0)) (list (list 7 34 0 0) (om-make-color 0 0 0)) (list (list 7 35) (om-make-color 0 0 0)) (list (list 7 35 0) (om-make-color 0 0 0)) (list (list 7 35 0 0) (om-make-color 0 0 0)) (list (list 7 35 1) (om-make-color 0 0 0)) (list (list 7 35 1 0) (om-make-color 0 0 0)) (list (list 7 35 2) (om-make-color 0 0 0)) (list (list 7 35 2 0) (om-make-color 0 0 0)) (list (list 7 36) (om-make-color 0 0 0)) (list (list 7 36 0) (om-make-color 0 0 0)) (list (list 7 36 0 0) (om-make-color 0 0 0)) (list (list 7 36 1) (om-make-color 0 0 0)) (list (list 7 36 1 0) (om-make-color 0 0 0)) (list (list 7 37) (om-make-color 0 0 0)) (list (list 7 37 0) (om-make-color 0 0 0)) (list (list 7 37 0 0) (om-make-color 0 0 0)) (list (list 7 38) (om-make-color 0 0 0)) (list (list 7 38 0) (om-make-color 0 0 0)) (list (list 7 38 0 0) (om-make-color 0 0 0)) (list (list 7 39) (om-make-color 0 0 0)) (list (list 7 39 0) (om-make-color 0 0 0)) (list (list 7 39 0 0) (om-make-color 0 0 0)) (list (list 7 40) (om-make-color 0 0 0)) (list (list 7 40 0) (om-make-color 0 0 0)) (list (list 7 40 0 0) (om-make-color 0 0 0)) (list (list 7 41) (om-make-color 0 0 0)) (list (list 7 41 0) (om-make-color 0 0 0)) (list (list 7 41 0 0) (om-make-color 0 0 0)) (list (list 7 42) (om-make-color 0 0 0)) (list (list 7 42 0) (om-make-color 0 0 0)) (list (list 7 42 0 0) (om-make-color 0 0 0)) (list (list 7 42 1) (om-make-color 0 0 0)) (list (list 7 42 1 0) (om-make-color 0 0 0)) (list (list 7 42 2) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 0 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 1 0) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 2 0) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 3 0) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 4 0) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 5 0) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 6 0) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 7 0) (om-make-color 0 0 0)) (list (list 8 7 1) (om-make-color 0 0 0)) (list (list 8 7 2) (om-make-color 0 0 0)) (list (list 8 7 2 0) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 8 0) (om-make-color 0 0 0)) (list (list 8 8 0 0) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 8 9 0) (om-make-color 0 0 0)) (list (list 8 9 0 0) (om-make-color 0 0 0)) (list (list 8 9 1) (om-make-color 0 0 0)) (list (list 8 9 1 0) (om-make-color 0 0 0)) (list (list 8 9 2) (om-make-color 0 0 0)) (list (list 8 9 2 0) (om-make-color 0 0 0)) (list (list 8 10) (om-make-color 0 0 0)) (list (list 8 10 0) (om-make-color 0 0 0)) (list (list 8 10 0 0) (om-make-color 0 0 0)) (list (list 8 10 1) (om-make-color 0 0 0)) (list (list 8 10 1 0) (om-make-color 0 0 0)) (list (list 8 10 2) (om-make-color 0 0 0)) (list (list 8 10 2 0) (om-make-color 0 0 0)) (list (list 8 11) (om-make-color 0 0 0)) (list (list 8 11 0) (om-make-color 0 0 0)) (list (list 8 11 0 0) (om-make-color 0 0 0)) (list (list 8 12) (om-make-color 0 0 0)) (list (list 8 12 0) (om-make-color 0 0 0)) (list (list 8 12 0 0) (om-make-color 0 0 0)) (list (list 8 12 1) (om-make-color 0 0 0)) (list (list 8 12 1 0) (om-make-color 0 0 0)) (list (list 8 12 2) (om-make-color 0 0 0)) (list (list 8 12 2 0) (om-make-color 0 0 0)) (list (list 8 13) (om-make-color 0 0 0)) (list (list 8 13 0) (om-make-color 0 0 0)) (list (list 8 13 0 0) (om-make-color 0 0 0)) (list (list 8 13 1) (om-make-color 0 0 0)) (list (list 8 13 1 0) (om-make-color 0 0 0)) (list (list 8 14) (om-make-color 0 0 0)) (list (list 8 14 0) (om-make-color 0 0 0)) (list (list 8 14 0 0) (om-make-color 0 0 0)) (list (list 8 15) (om-make-color 0 0 0)) (list (list 8 15 0) (om-make-color 0 0 0)) (list (list 8 15 0 0) (om-make-color 0 0 0)) (list (list 8 16) (om-make-color 0 0 0)) (list (list 8 16 0) (om-make-color 0 0 0)) (list (list 8 16 0 0) (om-make-color 0 0 0)) (list (list 8 17) (om-make-color 0 0 0)) (list (list 8 17 0) (om-make-color 0 0 0)) (list (list 8 17 0 0) (om-make-color 0 0 0)) (list (list 8 18) (om-make-color 0 0 0)) (list (list 8 18 0) (om-make-color 0 0 0)) (list (list 8 18 0 0) (om-make-color 0 0 0)) (list (list 8 19) (om-make-color 0 0 0)) (list (list 8 19 0) (om-make-color 0 0 0)) (list (list 8 19 0 0) (om-make-color 0 0 0)) (list (list 8 19 1) (om-make-color 0 0 0)) (list (list 8 19 1 0) (om-make-color 0 0 0)) (list (list 8 19 2) (om-make-color 0 0 0)) (list (list 8 19 2 0) (om-make-color 0 0 0)) (list (list 8 20) (om-make-color 0 0 0)) (list (list 8 20 0) (om-make-color 0 0 0)) (list (list 8 20 0 0) (om-make-color 0 0 0)) (list (list 8 21) (om-make-color 0 0 0)) (list (list 8 21 0) (om-make-color 0 0 0)) (list (list 8 21 0 0) (om-make-color 0 0 0)) (list (list 8 21 1) (om-make-color 0 0 0)) (list (list 8 21 1 0) (om-make-color 0 0 0)) (list (list 8 21 2) (om-make-color 0 0 0)) (list (list 8 21 2 0) (om-make-color 0 0 0)) (list (list 8 22) (om-make-color 0 0 0)) (list (list 8 22 0) (om-make-color 0 0 0)) (list (list 8 22 0 0) (om-make-color 0 0 0)) (list (list 8 22 1) (om-make-color 0 0 0)) (list (list 8 22 1 0) (om-make-color 0 0 0)) (list (list 8 22 2) (om-make-color 0 0 0)) (list (list 8 22 2 0) (om-make-color 0 0 0)) (list (list 8 23) (om-make-color 0 0 0)) (list (list 8 23 0) (om-make-color 0 0 0)) (list (list 8 23 0 0) (om-make-color 0 0 0)) (list (list 8 24) (om-make-color 0 0 0)) (list (list 8 24 0) (om-make-color 0 0 0)) (list (list 8 24 0 0) (om-make-color 0 0 0)) (list (list 8 24 1) (om-make-color 0 0 0)) (list (list 8 24 1 0) (om-make-color 0 0 0)) (list (list 8 24 2) (om-make-color 0 0 0)) (list (list 8 24 2 0) (om-make-color 0 0 0)) (list (list 8 25) (om-make-color 0 0 0)) (list (list 8 25 0) (om-make-color 0 0 0)) (list (list 8 25 0 0) (om-make-color 0 0 0)) (list (list 8 25 1) (om-make-color 0 0 0)) (list (list 8 25 1 0) (om-make-color 0 0 0)) (list (list 8 26) (om-make-color 0 0 0)) (list (list 8 26 0) (om-make-color 0 0 0)) (list (list 8 26 0 0) (om-make-color 0 0 0)) (list (list 8 27) (om-make-color 0 0 0)) (list (list 8 27 0) (om-make-color 0 0 0)) (list (list 8 27 0 0) (om-make-color 0 0 0)) (list (list 8 28) (om-make-color 0 0 0)) (list (list 8 28 0) (om-make-color 0 0 0)) (list (list 8 28 0 0) (om-make-color 0 0 0)) (list (list 8 29) (om-make-color 0 0 0)) (list (list 8 29 0) (om-make-color 0 0 0)) (list (list 8 29 0 0) (om-make-color 0 0 0)) (list (list 8 30) (om-make-color 0 0 0)) (list (list 8 30 0) (om-make-color 0 0 0)) (list (list 8 30 0 0) (om-make-color 0 0 0)) (list (list 8 31) (om-make-color 0 0 0)) (list (list 8 31 0) (om-make-color 0 0 0)) (list (list 8 31 0 0) (om-make-color 0 0 0)) (list (list 8 31 1) (om-make-color 0 0 0)) (list (list 8 31 1 0) (om-make-color 0 0 0)) (list (list 8 31 2) (om-make-color 0 0 0)) (list (list 8 31 2 0) (om-make-color 0 0 0)) (list (list 8 32) (om-make-color 0 0 0)) (list (list 8 32 0) (om-make-color 0 0 0)) (list (list 8 32 0 0) (om-make-color 0 0 0)) (list (list 8 33) (om-make-color 0 0 0)) (list (list 8 33 0) (om-make-color 0 0 0)) (list (list 8 33 0 0) (om-make-color 0 0 0)) (list (list 8 33 1) (om-make-color 0 0 0)) (list (list 8 33 1 0) (om-make-color 0 0 0)) (list (list 8 33 2) (om-make-color 0 0 0)) (list (list 8 33 2 0) (om-make-color 0 0 0)) (list (list 8 34) (om-make-color 0 0 0)) (list (list 8 34 0) (om-make-color 0 0 0)) (list (list 8 34 0 0) (om-make-color 0 0 0)) (list (list 8 34 1) (om-make-color 0 0 0)) (list (list 8 34 1 0) (om-make-color 0 0 0)) (list (list 8 34 2) (om-make-color 0 0 0)) (list (list 8 34 2 0) (om-make-color 0 0 0)) (list (list 8 35) (om-make-color 0 0 0)) (list (list 8 35 0) (om-make-color 0 0 0)) (list (list 8 35 0 0) (om-make-color 0 0 0)) (list (list 8 36) (om-make-color 0 0 0)) (list (list 8 36 0) (om-make-color 0 0 0)) (list (list 8 36 0 0) (om-make-color 0 0 0)) (list (list 8 36 1) (om-make-color 0 0 0)) (list (list 8 36 1 0) (om-make-color 0 0 0)) (list (list 8 36 2) (om-make-color 0 0 0)) (list (list 8 36 2 0) (om-make-color 0 0 0)) (list (list 8 37) (om-make-color 0 0 0)) (list (list 8 37 0) (om-make-color 0 0 0)) (list (list 8 37 0 0) (om-make-color 0 0 0)) (list (list 8 37 1) (om-make-color 0 0 0)) (list (list 8 37 1 0) (om-make-color 0 0 0)) (list (list 8 38) (om-make-color 0 0 0)) (list (list 8 38 0) (om-make-color 0 0 0)) (list (list 8 38 0 0) (om-make-color 0 0 0)) (list (list 8 39) (om-make-color 0 0 0)) (list (list 8 39 0) (om-make-color 0 0 0)) (list (list 8 39 0 0) (om-make-color 0 0 0)) (list (list 8 40) (om-make-color 0 0 0)) (list (list 8 40 0) (om-make-color 0 0 0)) (list (list 8 40 0 0) (om-make-color 0 0 0)) (list (list 8 41) (om-make-color 0 0 0)) (list (list 8 41 0) (om-make-color 0 0 0)) (list (list 8 41 0 0) (om-make-color 0 0 0)) (list (list 8 42) (om-make-color 0 0 0)) (list (list 8 42 0) (om-make-color 0 0 0)) (list (list 8 42 0 0) (om-make-color 0 0 0)) (list (list 8 43) (om-make-color 0 0 0)) (list (list 8 43 0) (om-make-color 0 0 0)) (list (list 8 43 0 0) (om-make-color 0 0 0)) (list (list 8 43 1) (om-make-color 0 0 0)) (list (list 8 43 1 0) (om-make-color 0 0 0)) (list (list 8 43 2) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 0 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 1 0) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 2 0) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 3 0) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 4 0) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 5 0) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 6 0) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 7 0) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 8 0) (om-make-color 0 0 0)) (list (list 9 8 0 0) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 9 9 0) (om-make-color 0 0 0)) (list (list 9 9 0 0) (om-make-color 0 0 0)) (list (list 9 9 1) (om-make-color 0 0 0)) (list (list 9 9 1 0) (om-make-color 0 0 0)) (list (list 9 10) (om-make-color 0 0 0)) (list (list 9 10 0) (om-make-color 0 0 0)) (list (list 9 10 0 0) (om-make-color 0 0 0)) (list (list 9 10 1) (om-make-color 0 0 0)) (list (list 9 10 1 0) (om-make-color 0 0 0)) (list (list 9 11) (om-make-color 0 0 0)) (list (list 9 11 0) (om-make-color 0 0 0)) (list (list 9 11 0 0) (om-make-color 0 0 0)) (list (list 9 12) (om-make-color 0 0 0)) (list (list 9 12 0) (om-make-color 0 0 0)) (list (list 9 12 0 0) (om-make-color 0 0 0)) (list (list 9 12 1) (om-make-color 0 0 0)) (list (list 9 12 1 0) (om-make-color 0 0 0)) (list (list 9 13) (om-make-color 0 0 0)) (list (list 9 13 0) (om-make-color 0 0 0)) (list (list 9 13 0 0) (om-make-color 0 0 0)) (list (list 9 13 1) (om-make-color 0 0 0)) (list (list 9 13 1 0) (om-make-color 0 0 0)) (list (list 9 14) (om-make-color 0 0 0)) (list (list 9 14 0) (om-make-color 0 0 0)) (list (list 9 14 0 0) (om-make-color 0 0 0)) (list (list 9 15) (om-make-color 0 0 0)) (list (list 9 15 0) (om-make-color 0 0 0)) (list (list 9 15 0 0) (om-make-color 0 0 0)) (list (list 9 16) (om-make-color 0 0 0)) (list (list 9 16 0) (om-make-color 0 0 0)) (list (list 9 16 0 0) (om-make-color 0 0 0)) (list (list 9 17) (om-make-color 0 0 0)) (list (list 9 17 0) (om-make-color 0 0 0)) (list (list 9 17 0 0) (om-make-color 0 0 0)) (list (list 9 18) (om-make-color 0 0 0)) (list (list 9 18 0) (om-make-color 0 0 0)) (list (list 9 18 0 0) (om-make-color 0 0 0)) (list (list 9 19) (om-make-color 0 0 0)) (list (list 9 19 0) (om-make-color 0 0 0)) (list (list 9 19 0 0) (om-make-color 0 0 0)) (list (list 9 20) (om-make-color 0 0 0)) (list (list 9 20 0) (om-make-color 0 0 0)) (list (list 9 20 0 0) (om-make-color 0 0 0)) (list (list 9 21) (om-make-color 0 0 0)) (list (list 9 21 0) (om-make-color 0 0 0)) (list (list 9 21 0 0) (om-make-color 0 0 0)) (list (list 9 21 1) (om-make-color 0 0 0)) (list (list 9 21 1 0) (om-make-color 0 0 0)) (list (list 9 22) (om-make-color 0 0 0)) (list (list 9 22 0) (om-make-color 0 0 0)) (list (list 9 22 0 0) (om-make-color 0 0 0)) (list (list 9 22 1) (om-make-color 0 0 0)) (list (list 9 22 1 0) (om-make-color 0 0 0)) (list (list 9 23) (om-make-color 0 0 0)) (list (list 9 23 0) (om-make-color 0 0 0)) (list (list 9 23 0 0) (om-make-color 0 0 0)) (list (list 9 24) (om-make-color 0 0 0)) (list (list 9 24 0) (om-make-color 0 0 0)) (list (list 9 24 0 0) (om-make-color 0 0 0)) (list (list 9 24 1) (om-make-color 0 0 0)) (list (list 9 24 1 0) (om-make-color 0 0 0)) (list (list 9 25) (om-make-color 0 0 0)) (list (list 9 25 0) (om-make-color 0 0 0)) (list (list 9 25 0 0) (om-make-color 0 0 0)) (list (list 9 25 1) (om-make-color 0 0 0)) (list (list 9 25 1 0) (om-make-color 0 0 0)) (list (list 9 26) (om-make-color 0 0 0)) (list (list 9 26 0) (om-make-color 0 0 0)) (list (list 9 26 0 0) (om-make-color 0 0 0)) (list (list 9 27) (om-make-color 0 0 0)) (list (list 9 27 0) (om-make-color 0 0 0)) (list (list 9 27 0 0) (om-make-color 0 0 0)) (list (list 9 28) (om-make-color 0 0 0)) (list (list 9 28 0) (om-make-color 0 0 0)) (list (list 9 28 0 0) (om-make-color 0 0 0)) (list (list 9 29) (om-make-color 0 0 0)) (list (list 9 29 0) (om-make-color 0 0 0)) (list (list 9 29 0 0) (om-make-color 0 0 0)) (list (list 9 30) (om-make-color 0 0 0)) (list (list 9 30 0) (om-make-color 0 0 0)) (list (list 9 30 0 0) (om-make-color 0 0 0)) (list (list 9 31) (om-make-color 0 0 0)) (list (list 9 31 0) (om-make-color 0 0 0)) (list (list 9 31 0 0) (om-make-color 0 0 0)) (list (list 9 32) (om-make-color 0 0 0)) (list (list 9 32 0) (om-make-color 0 0 0)) (list (list 9 32 0 0) (om-make-color 0 0 0)) (list (list 9 33) (om-make-color 0 0 0)) (list (list 9 33 0) (om-make-color 0 0 0)) (list (list 9 33 0 0) (om-make-color 0 0 0)) (list (list 9 33 1) (om-make-color 0 0 0)) (list (list 9 33 1 0) (om-make-color 0 0 0)) (list (list 9 34) (om-make-color 0 0 0)) (list (list 9 34 0) (om-make-color 0 0 0)) (list (list 9 34 0 0) (om-make-color 0 0 0)) (list (list 9 34 1) (om-make-color 0 0 0)) (list (list 9 34 1 0) (om-make-color 0 0 0)) (list (list 9 35) (om-make-color 0 0 0)) (list (list 9 35 0) (om-make-color 0 0 0)) (list (list 9 35 0 0) (om-make-color 0 0 0)) (list (list 9 36) (om-make-color 0 0 0)) (list (list 9 36 0) (om-make-color 0 0 0)) (list (list 9 36 0 0) (om-make-color 0 0 0)) (list (list 9 36 1) (om-make-color 0 0 0)) (list (list 9 36 1 0) (om-make-color 0 0 0)) (list (list 9 37) (om-make-color 0 0 0)) (list (list 9 37 0) (om-make-color 0 0 0)) (list (list 9 37 0 0) (om-make-color 0 0 0)) (list (list 9 37 1) (om-make-color 0 0 0)) (list (list 9 37 1 0) (om-make-color 0 0 0)) (list (list 9 38) (om-make-color 0 0 0)) (list (list 9 38 0) (om-make-color 0 0 0)) (list (list 9 38 0 0) (om-make-color 0 0 0)) (list (list 9 39) (om-make-color 0 0 0)) (list (list 9 39 0) (om-make-color 0 0 0)) (list (list 9 39 0 0) (om-make-color 0 0 0)) (list (list 9 40) (om-make-color 0 0 0)) (list (list 9 40 0) (om-make-color 0 0 0)) (list (list 9 40 0 0) (om-make-color 0 0 0)) (list (list 9 41) (om-make-color 0 0 0)) (list (list 9 41 0) (om-make-color 0 0 0)) (list (list 9 41 0 0) (om-make-color 0 0 0)) (list (list 9 42) (om-make-color 0 0 0)) (list (list 9 42 0) (om-make-color 0 0 0)) (list (list 9 42 0 0) (om-make-color 0 0 0)) (list (list 9 43) (om-make-color 0 0 0)) (list (list 9 43 0) (om-make-color 0 0 0)) (list (list 9 43 0 0) (om-make-color 0 0 0)) (list (list 9 44) (om-make-color 0 0 0)) (list (list 9 44 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 0 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 1 0) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 2 0) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 3 0) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 4 0) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 5 0) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 6 0) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 7 0) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 8 0) (om-make-color 0 0 0)) (list (list 10 8 1) (om-make-color 0 0 0)) (list (list 10 8 1 0) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)) (list (list 10 9 0) (om-make-color 0 0 0)) (list (list 10 9 0 0) (om-make-color 0 0 0)) (list (list 10 10) (om-make-color 0 0 0)) (list (list 10 10 0) (om-make-color 0 0 0)) (list (list 10 10 0 0) (om-make-color 0 0 0)) (list (list 10 11) (om-make-color 0 0 0)) (list (list 10 11 0) (om-make-color 0 0 0)) (list (list 10 11 0 0) (om-make-color 0 0 0)) (list (list 10 11 1) (om-make-color 0 0 0)) (list (list 10 11 1 0) (om-make-color 0 0 0)) (list (list 10 11 2) (om-make-color 0 0 0)) (list (list 10 11 2 0) (om-make-color 0 0 0)) (list (list 10 12) (om-make-color 0 0 0)) (list (list 10 12 0) (om-make-color 0 0 0)) (list (list 10 12 0 0) (om-make-color 0 0 0)) (list (list 10 13) (om-make-color 0 0 0)) (list (list 10 13 0) (om-make-color 0 0 0)) (list (list 10 13 0 0) (om-make-color 0 0 0)) (list (list 10 14) (om-make-color 0 0 0)) (list (list 10 14 0) (om-make-color 0 0 0)) (list (list 10 14 0 0) (om-make-color 0 0 0)) (list (list 10 14 1) (om-make-color 0 0 0)) (list (list 10 14 1 0) (om-make-color 0 0 0)) (list (list 10 15) (om-make-color 0 0 0)) (list (list 10 15 0) (om-make-color 0 0 0)) (list (list 10 15 0 0) (om-make-color 0 0 0)) (list (list 10 16) (om-make-color 0 0 0)) (list (list 10 16 0) (om-make-color 0 0 0)) (list (list 10 16 0 0) (om-make-color 0 0 0)) (list (list 10 17) (om-make-color 0 0 0)) (list (list 10 17 0) (om-make-color 0 0 0)) (list (list 10 17 0 0) (om-make-color 0 0 0)) (list (list 10 18) (om-make-color 0 0 0)) (list (list 10 18 0) (om-make-color 0 0 0)) (list (list 10 18 0 0) (om-make-color 0 0 0)) (list (list 10 19) (om-make-color 0 0 0)) (list (list 10 19 0) (om-make-color 0 0 0)) (list (list 10 19 0 0) (om-make-color 0 0 0)) (list (list 10 20) (om-make-color 0 0 0)) (list (list 10 20 0) (om-make-color 0 0 0)) (list (list 10 20 0 0) (om-make-color 0 0 0)) (list (list 10 20 1) (om-make-color 0 0 0)) (list (list 10 20 1 0) (om-make-color 0 0 0)) (list (list 10 21) (om-make-color 0 0 0)) (list (list 10 21 0) (om-make-color 0 0 0)) (list (list 10 21 0 0) (om-make-color 0 0 0)) (list (list 10 22) (om-make-color 0 0 0)) (list (list 10 22 0) (om-make-color 0 0 0)) (list (list 10 22 0 0) (om-make-color 0 0 0)) (list (list 10 23) (om-make-color 0 0 0)) (list (list 10 23 0) (om-make-color 0 0 0)) (list (list 10 23 0 0) (om-make-color 0 0 0)) (list (list 10 23 1) (om-make-color 0 0 0)) (list (list 10 23 1 0) (om-make-color 0 0 0)) (list (list 10 23 2) (om-make-color 0 0 0)) (list (list 10 23 2 0) (om-make-color 0 0 0)) (list (list 10 24) (om-make-color 0 0 0)) (list (list 10 24 0) (om-make-color 0 0 0)) (list (list 10 24 0 0) (om-make-color 0 0 0)) (list (list 10 25) (om-make-color 0 0 0)) (list (list 10 25 0) (om-make-color 0 0 0)) (list (list 10 25 0 0) (om-make-color 0 0 0)) (list (list 10 26) (om-make-color 0 0 0)) (list (list 10 26 0) (om-make-color 0 0 0)) (list (list 10 26 0 0) (om-make-color 0 0 0)) (list (list 10 26 1) (om-make-color 0 0 0)) (list (list 10 26 1 0) (om-make-color 0 0 0)) (list (list 10 27) (om-make-color 0 0 0)) (list (list 10 27 0) (om-make-color 0 0 0)) (list (list 10 27 0 0) (om-make-color 0 0 0)) (list (list 10 28) (om-make-color 0 0 0)) (list (list 10 28 0) (om-make-color 0 0 0)) (list (list 10 28 0 0) (om-make-color 0 0 0)) (list (list 10 29) (om-make-color 0 0 0)) (list (list 10 29 0) (om-make-color 0 0 0)) (list (list 10 29 0 0) (om-make-color 0 0 0)) (list (list 10 30) (om-make-color 0 0 0)) (list (list 10 30 0) (om-make-color 0 0 0)) (list (list 10 30 0 0) (om-make-color 0 0 0)) (list (list 10 31) (om-make-color 0 0 0)) (list (list 10 31 0) (om-make-color 0 0 0)) (list (list 10 31 0 0) (om-make-color 0 0 0)) (list (list 10 32) (om-make-color 0 0 0)) (list (list 10 32 0) (om-make-color 0 0 0)) (list (list 10 32 0 0) (om-make-color 0 0 0)) (list (list 10 32 1) (om-make-color 0 0 0)) (list (list 10 32 1 0) (om-make-color 0 0 0)) (list (list 10 33) (om-make-color 0 0 0)) (list (list 10 33 0) (om-make-color 0 0 0)) (list (list 10 33 0 0) (om-make-color 0 0 0)) (list (list 10 34) (om-make-color 0 0 0)) (list (list 10 34 0) (om-make-color 0 0 0)) (list (list 10 34 0 0) (om-make-color 0 0 0)) (list (list 10 35) (om-make-color 0 0 0)) (list (list 10 35 0) (om-make-color 0 0 0)) (list (list 10 35 0 0) (om-make-color 0 0 0)) (list (list 10 35 1) (om-make-color 0 0 0)) (list (list 10 35 1 0) (om-make-color 0 0 0)) (list (list 10 35 2) (om-make-color 0 0 0)) (list (list 10 35 2 0) (om-make-color 0 0 0)) (list (list 10 36) (om-make-color 0 0 0)) (list (list 10 36 0) (om-make-color 0 0 0)) (list (list 10 36 0 0) (om-make-color 0 0 0)) (list (list 10 37) (om-make-color 0 0 0)) (list (list 10 37 0) (om-make-color 0 0 0)) (list (list 10 37 0 0) (om-make-color 0 0 0)) (list (list 10 38) (om-make-color 0 0 0)) (list (list 10 38 0) (om-make-color 0 0 0)) (list (list 10 38 0 0) (om-make-color 0 0 0)) (list (list 10 38 1) (om-make-color 0 0 0)) (list (list 10 38 1 0) (om-make-color 0 0 0)) (list (list 10 39) (om-make-color 0 0 0)) (list (list 10 39 0) (om-make-color 0 0 0)) (list (list 10 39 0 0) (om-make-color 0 0 0)) (list (list 10 40) (om-make-color 0 0 0)) (list (list 10 40 0) (om-make-color 0 0 0)) (list (list 10 40 0 0) (om-make-color 0 0 0)) (list (list 10 41) (om-make-color 0 0 0)) (list (list 10 41 0) (om-make-color 0 0 0)) (list (list 10 41 0 0) (om-make-color 0 0 0)) (list (list 10 42) (om-make-color 0 0 0)) (list (list 10 42 0) (om-make-color 0 0 0)) (list (list 10 42 0 0) (om-make-color 0 0 0)) (list (list 10 43) (om-make-color 0 0 0)) (list (list 10 43 0) (om-make-color 0 0 0)) (list (list 10 43 0 0) (om-make-color 0 0 0)) (list (list 10 44) (om-make-color 0 0 0)) (list (list 10 44 0) (om-make-color 0 0 0)) (list (list 10 44 0 0) (om-make-color 0 0 0)) (list (list 10 44 1) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 0 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 1 0) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 2 0) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 3 0) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 4 0) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 5 0) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 6 0) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 7 0) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 11 8 0) (om-make-color 0 0 0)) (list (list 11 8 1) (om-make-color 0 0 0)) (list (list 11 8 2) (om-make-color 0 0 0)) (list (list 11 8 2 0) (om-make-color 0 0 0)) (list (list 11 9) (om-make-color 0 0 0)) (list (list 11 9 0) (om-make-color 0 0 0)) (list (list 11 9 0 0) (om-make-color 0 0 0)) (list (list 11 10) (om-make-color 0 0 0)) (list (list 11 10 0) (om-make-color 0 0 0)) (list (list 11 10 0 0) (om-make-color 0 0 0)) (list (list 11 10 1) (om-make-color 0 0 0)) (list (list 11 10 1 0) (om-make-color 0 0 0)) (list (list 11 10 2) (om-make-color 0 0 0)) (list (list 11 10 2 0) (om-make-color 0 0 0)) (list (list 11 11) (om-make-color 0 0 0)) (list (list 11 11 0) (om-make-color 0 0 0)) (list (list 11 11 0 0) (om-make-color 0 0 0)) (list (list 11 11 1) (om-make-color 0 0 0)) (list (list 11 11 1 0) (om-make-color 0 0 0)) (list (list 11 11 2) (om-make-color 0 0 0)) (list (list 11 11 2 0) (om-make-color 0 0 0)) (list (list 11 12) (om-make-color 0 0 0)) (list (list 11 12 0) (om-make-color 0 0 0)) (list (list 11 12 0 0) (om-make-color 0 0 0)) (list (list 11 13) (om-make-color 0 0 0)) (list (list 11 13 0) (om-make-color 0 0 0)) (list (list 11 13 0 0) (om-make-color 0 0 0)) (list (list 11 13 1) (om-make-color 0 0 0)) (list (list 11 13 1 0) (om-make-color 0 0 0)) (list (list 11 13 2) (om-make-color 0 0 0)) (list (list 11 13 2 0) (om-make-color 0 0 0)) (list (list 11 14) (om-make-color 0 0 0)) (list (list 11 14 0) (om-make-color 0 0 0)) (list (list 11 14 0 0) (om-make-color 0 0 0)) (list (list 11 14 1) (om-make-color 0 0 0)) (list (list 11 14 1 0) (om-make-color 0 0 0)) (list (list 11 15) (om-make-color 0 0 0)) (list (list 11 15 0) (om-make-color 0 0 0)) (list (list 11 15 0 0) (om-make-color 0 0 0)) (list (list 11 16) (om-make-color 0 0 0)) (list (list 11 16 0) (om-make-color 0 0 0)) (list (list 11 16 0 0) (om-make-color 0 0 0)) (list (list 11 17) (om-make-color 0 0 0)) (list (list 11 17 0) (om-make-color 0 0 0)) (list (list 11 17 0 0) (om-make-color 0 0 0)) (list (list 11 18) (om-make-color 0 0 0)) (list (list 11 18 0) (om-make-color 0 0 0)) (list (list 11 18 0 0) (om-make-color 0 0 0)) (list (list 11 19) (om-make-color 0 0 0)) (list (list 11 19 0) (om-make-color 0 0 0)) (list (list 11 19 0 0) (om-make-color 0 0 0)) (list (list 11 20) (om-make-color 0 0 0)) (list (list 11 20 0) (om-make-color 0 0 0)) (list (list 11 20 0 0) (om-make-color 0 0 0)) (list (list 11 20 1) (om-make-color 0 0 0)) (list (list 11 20 1 0) (om-make-color 0 0 0)) (list (list 11 20 2) (om-make-color 0 0 0)) (list (list 11 20 2 0) (om-make-color 0 0 0)) (list (list 11 21) (om-make-color 0 0 0)) (list (list 11 21 0) (om-make-color 0 0 0)) (list (list 11 21 0 0) (om-make-color 0 0 0)) (list (list 11 22) (om-make-color 0 0 0)) (list (list 11 22 0) (om-make-color 0 0 0)) (list (list 11 22 0 0) (om-make-color 0 0 0)) (list (list 11 22 1) (om-make-color 0 0 0)) (list (list 11 22 1 0) (om-make-color 0 0 0)) (list (list 11 22 2) (om-make-color 0 0 0)) (list (list 11 22 2 0) (om-make-color 0 0 0)) (list (list 11 23) (om-make-color 0 0 0)) (list (list 11 23 0) (om-make-color 0 0 0)) (list (list 11 23 0 0) (om-make-color 0 0 0)) (list (list 11 23 1) (om-make-color 0 0 0)) (list (list 11 23 1 0) (om-make-color 0 0 0)) (list (list 11 23 2) (om-make-color 0 0 0)) (list (list 11 23 2 0) (om-make-color 0 0 0)) (list (list 11 24) (om-make-color 0 0 0)) (list (list 11 24 0) (om-make-color 0 0 0)) (list (list 11 24 0 0) (om-make-color 0 0 0)) (list (list 11 25) (om-make-color 0 0 0)) (list (list 11 25 0) (om-make-color 0 0 0)) (list (list 11 25 0 0) (om-make-color 0 0 0)) (list (list 11 25 1) (om-make-color 0 0 0)) (list (list 11 25 1 0) (om-make-color 0 0 0)) (list (list 11 25 2) (om-make-color 0 0 0)) (list (list 11 25 2 0) (om-make-color 0 0 0)) (list (list 11 26) (om-make-color 0 0 0)) (list (list 11 26 0) (om-make-color 0 0 0)) (list (list 11 26 0 0) (om-make-color 0 0 0)) (list (list 11 26 1) (om-make-color 0 0 0)) (list (list 11 26 1 0) (om-make-color 0 0 0)) (list (list 11 27) (om-make-color 0 0 0)) (list (list 11 27 0) (om-make-color 0 0 0)) (list (list 11 27 0 0) (om-make-color 0 0 0)) (list (list 11 28) (om-make-color 0 0 0)) (list (list 11 28 0) (om-make-color 0 0 0)) (list (list 11 28 0 0) (om-make-color 0 0 0)) (list (list 11 29) (om-make-color 0 0 0)) (list (list 11 29 0) (om-make-color 0 0 0)) (list (list 11 29 0 0) (om-make-color 0 0 0)) (list (list 11 30) (om-make-color 0 0 0)) (list (list 11 30 0) (om-make-color 0 0 0)) (list (list 11 30 0 0) (om-make-color 0 0 0)) (list (list 11 31) (om-make-color 0 0 0)) (list (list 11 31 0) (om-make-color 0 0 0)) (list (list 11 31 0 0) (om-make-color 0 0 0)) (list (list 11 32) (om-make-color 0 0 0)) (list (list 11 32 0) (om-make-color 0 0 0)) (list (list 11 32 0 0) (om-make-color 0 0 0)) (list (list 11 32 1) (om-make-color 0 0 0)) (list (list 11 32 1 0) (om-make-color 0 0 0)) (list (list 11 32 2) (om-make-color 0 0 0)) (list (list 11 32 2 0) (om-make-color 0 0 0)) (list (list 11 33) (om-make-color 0 0 0)) (list (list 11 33 0) (om-make-color 0 0 0)) (list (list 11 33 0 0) (om-make-color 0 0 0)) (list (list 11 34) (om-make-color 0 0 0)) (list (list 11 34 0) (om-make-color 0 0 0)) (list (list 11 34 0 0) (om-make-color 0 0 0)) (list (list 11 34 1) (om-make-color 0 0 0)) (list (list 11 34 1 0) (om-make-color 0 0 0)) (list (list 11 34 2) (om-make-color 0 0 0)) (list (list 11 34 2 0) (om-make-color 0 0 0)) (list (list 11 35) (om-make-color 0 0 0)) (list (list 11 35 0) (om-make-color 0 0 0)) (list (list 11 35 0 0) (om-make-color 0 0 0)) (list (list 11 35 1) (om-make-color 0 0 0)) (list (list 11 35 1 0) (om-make-color 0 0 0)) (list (list 11 35 2) (om-make-color 0 0 0)) (list (list 11 35 2 0) (om-make-color 0 0 0)) (list (list 11 36) (om-make-color 0 0 0)) (list (list 11 36 0) (om-make-color 0 0 0)) (list (list 11 36 0 0) (om-make-color 0 0 0)) (list (list 11 37) (om-make-color 0 0 0)) (list (list 11 37 0) (om-make-color 0 0 0)) (list (list 11 37 0 0) (om-make-color 0 0 0)) (list (list 11 37 1) (om-make-color 0 0 0)) (list (list 11 37 1 0) (om-make-color 0 0 0)) (list (list 11 37 2) (om-make-color 0 0 0)) (list (list 11 37 2 0) (om-make-color 0 0 0)) (list (list 11 38) (om-make-color 0 0 0)) (list (list 11 38 0) (om-make-color 0 0 0)) (list (list 11 38 0 0) (om-make-color 0 0 0)) (list (list 11 38 1) (om-make-color 0 0 0)) (list (list 11 38 1 0) (om-make-color 0 0 0)) (list (list 11 39) (om-make-color 0 0 0)) (list (list 11 39 0) (om-make-color 0 0 0)) (list (list 11 39 0 0) (om-make-color 0 0 0)) (list (list 11 40) (om-make-color 0 0 0)) (list (list 11 40 0) (om-make-color 0 0 0)) (list (list 11 40 0 0) (om-make-color 0 0 0)) (list (list 11 41) (om-make-color 0 0 0)) (list (list 11 41 0) (om-make-color 0 0 0)) (list (list 11 41 0 0) (om-make-color 0 0 0)) (list (list 11 42) (om-make-color 0 0 0)) (list (list 11 42 0) (om-make-color 0 0 0)) (list (list 11 42 0 0) (om-make-color 0 0 0)) (list (list 11 43) (om-make-color 0 0 0)) (list (list 11 43 0) (om-make-color 0 0 0)) (list (list 11 43 0 0) (om-make-color 0 0 0)) (list (list 11 44) (om-make-color 0 0 0)) (list (list 11 44 0) (om-make-color 0 0 0)) (list (list 11 44 0 0) (om-make-color 0 0 0)) (list (list 11 44 1) (om-make-color 0 0 0)) (list (list 11 44 1 0) (om-make-color 0 0 0)) (list (list 11 44 2) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode) (list 't 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(2 2 2 2 2 2 2 2 2 2 2 12)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g) 24 4 0 0))) t nil nil) (om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 182 395) (om-make-point 35 20) (list 6 8) "(6 8)" nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 159 376) (om-make-point 20 20) 8 "8" nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 127 373) (om-make-point 21 20) 't "t" nil) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" (list 8 8 2 8 8 38)) (om-load-inputfun 'input-funbox "no documentation" "S" (list 4 1 6 6 7 4 13 6 1 4 1 19)) (om-load-inputfun 'input-funbox "no documentation" "TIMES" 3) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':poly?) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':mindiv) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':sign)) (om-make-point 41 418) (om-make-point 168 61) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 212 55) '"Try to change the tempo, evaluate the multi-seq and you will hear a different canon..." "" (om-make-point 544 331) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 206 72) '"We just need two more informations:$$- The number of times that the rhythmic pattern is repeated (3 times)$- The tempo (100 in this exemple)." "" (om-make-point 540 254) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 270 109) '"By means of two rhythmic patterns:$$R = (8 8 2 8 8 38)$S = (4 1 6 6 7 4 13 6 1 4 1 19)$$we can construct the corresponding Regular Complementary Canon of Maximal Category.$" "" (om-make-point 539 151) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 6 34) (om-make-point 89 20) (list 8 8 2 8 8 38) "(8 8 2 8 8 38)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 67 8) (om-make-point 168 20) (list 4 1 6 6 7 4 13 6 1 4 1 19) "(4 1 6 6 7 4 13 6 1 4 1 19)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 171 45) (om-make-point 11 20) 3 "3" nil) (om-load-boxcomment "comment" (om-make-point 94 28) '" multi-seq" "" (om-make-point 331 157) nil (om-make-color 4/15 59/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "MULTI-SEQ" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 128 186) (om-make-point 282 150) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100)) :lonset '(0 800 1600 1800 2600 3400 7200 8000 8800 9000 9800 10600 14400 15200 16000 16200 17000 17800 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200)) :lonset '(400 1200 2000 2200 3000 3800 7600 8400 9200 9400 10200 11000 14800 15600 16400 16600 17400 18200 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300)) :lonset '(500 1300 2100 2300 3100 3900 7700 8500 9300 9500 10300 11100 14900 15700 16500 16700 17500 18300 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400)) :lonset '(1100 1900 2700 2900 3700 4500 8300 9100 9900 10100 10900 11700 15500 16300 17100 17300 18100 18900 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500)) :lonset '(1700 2500 3300 3500 4300 5100 8900 9700 10500 10700 11500 12300 16100 16900 17700 17900 18700 19500 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600)) :lonset '(2400 3200 4000 4200 5000 5800 9600 10400 11200 11400 12200 13000 16800 17600 18400 18600 19400 20200 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700)) :lonset '(2800 3600 4400 4600 5400 6200 10000 10800 11600 11800 12600 13400 17200 18000 18800 19000 19800 20600 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800)) :lonset '(4100 4900 5700 5900 6700 7500 11300 12100 12900 13100 13900 14700 18500 19300 20100 20300 21100 21900 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900)) :lonset '(4700 5500 6300 6500 7300 8100 11900 12700 13500 13700 14500 15300 19100 19900 20700 20900 21700 22500 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000)) :lonset '(4800 5600 6400 6600 7400 8200 12000 12800 13600 13800 14600 15400 19200 20000 20800 21000 21800 22600 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100)) :lonset '(5200 6000 6800 7000 7800 8600 12400 13200 14000 14200 15000 15800 19600 20400 21200 21400 22200 23000 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200)) :lonset '(5300 6100 6900 7100 7900 8700 12500 13300 14100 14300 15100 15900 19700 20500 21300 21500 22300 23100 23900) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 0 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 1 0) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 2 0) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 3 0) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 4 0) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 5 0) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 6 0) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 7 0) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 8 0) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 6 9 0) (om-make-color 0 0 0)) (list (list 6 10) (om-make-color 0 0 0)) (list (list 6 10 0) (om-make-color 0 0 0)) (list (list 6 11) (om-make-color 0 0 0)) (list (list 6 11 0) (om-make-color 0 0 0)) (list (list 6 12) (om-make-color 0 0 0)) (list (list 6 12 0) (om-make-color 0 0 0)) (list (list 6 13) (om-make-color 0 0 0)) (list (list 6 13 0) (om-make-color 0 0 0)) (list (list 6 14) (om-make-color 0 0 0)) (list (list 6 14 0) (om-make-color 0 0 0)) (list (list 6 15) (om-make-color 0 0 0)) (list (list 6 15 0) (om-make-color 0 0 0)) (list (list 6 16) (om-make-color 0 0 0)) (list (list 6 16 0) (om-make-color 0 0 0)) (list (list 6 17) (om-make-color 0 0 0)) (list (list 6 17 0) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 0 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 1 0) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 2 0) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 3 0) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 4 0) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 5 0) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 6 0) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 7 0) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 8 0) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 7 9 0) (om-make-color 0 0 0)) (list (list 7 10) (om-make-color 0 0 0)) (list (list 7 10 0) (om-make-color 0 0 0)) (list (list 7 11) (om-make-color 0 0 0)) (list (list 7 11 0) (om-make-color 0 0 0)) (list (list 7 12) (om-make-color 0 0 0)) (list (list 7 12 0) (om-make-color 0 0 0)) (list (list 7 13) (om-make-color 0 0 0)) (list (list 7 13 0) (om-make-color 0 0 0)) (list (list 7 14) (om-make-color 0 0 0)) (list (list 7 14 0) (om-make-color 0 0 0)) (list (list 7 15) (om-make-color 0 0 0)) (list (list 7 15 0) (om-make-color 0 0 0)) (list (list 7 16) (om-make-color 0 0 0)) (list (list 7 16 0) (om-make-color 0 0 0)) (list (list 7 17) (om-make-color 0 0 0)) (list (list 7 17 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 0 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 1 0) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 2 0) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 3 0) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 4 0) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 5 0) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 6 0) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 7 0) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 8 0) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 8 9 0) (om-make-color 0 0 0)) (list (list 8 10) (om-make-color 0 0 0)) (list (list 8 10 0) (om-make-color 0 0 0)) (list (list 8 11) (om-make-color 0 0 0)) (list (list 8 11 0) (om-make-color 0 0 0)) (list (list 8 12) (om-make-color 0 0 0)) (list (list 8 12 0) (om-make-color 0 0 0)) (list (list 8 13) (om-make-color 0 0 0)) (list (list 8 13 0) (om-make-color 0 0 0)) (list (list 8 14) (om-make-color 0 0 0)) (list (list 8 14 0) (om-make-color 0 0 0)) (list (list 8 15) (om-make-color 0 0 0)) (list (list 8 15 0) (om-make-color 0 0 0)) (list (list 8 16) (om-make-color 0 0 0)) (list (list 8 16 0) (om-make-color 0 0 0)) (list (list 8 17) (om-make-color 0 0 0)) (list (list 8 17 0) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 0 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 1 0) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 2 0) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 3 0) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 4 0) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 5 0) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 6 0) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 7 0) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 8 0) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 9 9 0) (om-make-color 0 0 0)) (list (list 9 10) (om-make-color 0 0 0)) (list (list 9 10 0) (om-make-color 0 0 0)) (list (list 9 11) (om-make-color 0 0 0)) (list (list 9 11 0) (om-make-color 0 0 0)) (list (list 9 12) (om-make-color 0 0 0)) (list (list 9 12 0) (om-make-color 0 0 0)) (list (list 9 13) (om-make-color 0 0 0)) (list (list 9 13 0) (om-make-color 0 0 0)) (list (list 9 14) (om-make-color 0 0 0)) (list (list 9 14 0) (om-make-color 0 0 0)) (list (list 9 15) (om-make-color 0 0 0)) (list (list 9 15 0) (om-make-color 0 0 0)) (list (list 9 16) (om-make-color 0 0 0)) (list (list 9 16 0) (om-make-color 0 0 0)) (list (list 9 17) (om-make-color 0 0 0)) (list (list 9 17 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 0 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 1 0) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 2 0) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 3 0) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 4 0) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 5 0) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 6 0) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 7 0) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 8 0) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)) (list (list 10 9 0) (om-make-color 0 0 0)) (list (list 10 10) (om-make-color 0 0 0)) (list (list 10 10 0) (om-make-color 0 0 0)) (list (list 10 11) (om-make-color 0 0 0)) (list (list 10 11 0) (om-make-color 0 0 0)) (list (list 10 12) (om-make-color 0 0 0)) (list (list 10 12 0) (om-make-color 0 0 0)) (list (list 10 13) (om-make-color 0 0 0)) (list (list 10 13 0) (om-make-color 0 0 0)) (list (list 10 14) (om-make-color 0 0 0)) (list (list 10 14 0) (om-make-color 0 0 0)) (list (list 10 15) (om-make-color 0 0 0)) (list (list 10 15 0) (om-make-color 0 0 0)) (list (list 10 16) (om-make-color 0 0 0)) (list (list 10 16 0) (om-make-color 0 0 0)) (list (list 10 17) (om-make-color 0 0 0)) (list (list 10 17 0) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 0 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 1 0) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 2 0) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 3 0) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 4 0) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 5 0) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 6 0) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 7 0) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 11 8 0) (om-make-color 0 0 0)) (list (list 11 9) (om-make-color 0 0 0)) (list (list 11 9 0) (om-make-color 0 0 0)) (list (list 11 10) (om-make-color 0 0 0)) (list (list 11 10 0) (om-make-color 0 0 0)) (list (list 11 11) (om-make-color 0 0 0)) (list (list 11 11 0) (om-make-color 0 0 0)) (list (list 11 12) (om-make-color 0 0 0)) (list (list 11 12 0) (om-make-color 0 0 0)) (list (list 11 13) (om-make-color 0 0 0)) (list (list 11 13 0) (om-make-color 0 0 0)) (list (list 11 14) (om-make-color 0 0 0)) (list (list 11 14 0) (om-make-color 0 0 0)) (list (list 11 15) (om-make-color 0 0 0)) (list (list 11 15 0) (om-make-color 0 0 0)) (list (list 11 16) (om-make-color 0 0 0)) (list (list 11 16 0) (om-make-color 0 0 0)) (list (list 11 17) (om-make-color 0 0 0)) (list (list 11 17 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode) (list 't 2621450 18350450 0 1000 nil 21/25 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1 1 1 1 1 1 12)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g) 24 4 0 0))) t nil nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 207 64) (om-make-point 22 20) 100 "100" nil) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" nil) (om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" 3) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':beats)) (om-make-point 71 93) (om-make-point 143 61) nil nil nil 1)) '((11 0 7 0 nil 3) (3 0 11 0 nil 0) (4 0 11 1 nil 0) (5 0 11 2 nil 0) (10 0 11 3 nil 2) (9 0 11 4 nil 2) (8 0 11 5 nil 2) (21 0 19 0 nil 0) (15 0 21 0 nil 0) (16 0 21 1 nil 0) (17 0 21 2 nil 0) (20 0 21 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 23 498)) (setf (pict-size newpict) (om-make-point 629 196)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 12 61)) (setf (pict-size newpict) (om-make-point 323 306)) newpict)) 5.0))
