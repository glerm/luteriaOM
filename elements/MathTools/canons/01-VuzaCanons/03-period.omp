; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 204 13) (om-make-point 50 50) (om-make-point 883 597) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "03-period" '((om-load-boxcomment "comment2" (om-make-point 229 101) '"(72 108 120 144 168 180 200 216 240 252 264 270 280 288 300 312 324 336 360 378 392 396 400 408 420 432 440 450 456 468 480 500)" "" (om-make-point 566 16) nil (om-make-color 0 0 0) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment1" (om-make-point 323 54) '"The good periods" "" (om-make-point 186 24) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 281 94) '"Surprisingly enough, the smallest period is 72, as you see by evaluating the output." "" (om-make-point 562 366) nil (om-make-color 5/17 59/255 1) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 269 88) '"In this example we ask for 'good periods' in the intervals between 0 and 500. " "" (om-make-point 561 264) nil (om-make-color 5/17 59/255 1) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 234 128) '"In order to have a Regular Complementary Canon of Maximal Category, we need rhythmic patterns having a 'good period'." "" (om-make-point 566 125) nil (om-make-color 5/17 59/255 1) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 390 126) (om-make-point 23 20) 500 "500" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 188 126) (om-make-point 11 20) 0 "0" nil) (om-load-boxcall 'genfun "CANON-N1" 'canon-n '((om-load-inputfun 'input-funbox "min" "A" 0) (om-load-inputfun 'input-funbox "max" "B" 500)) (om-make-point 278 241) nil nil nil nil 1)) '((6 0 7 0 nil 0) (5 0 7 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 65 112)) (setf (pict-size newpict) (om-make-point 465 351)) newpict)) 5.0))
