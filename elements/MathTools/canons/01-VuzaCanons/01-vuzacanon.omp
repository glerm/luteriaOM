; OM File Header - Saved 2014/04/26 5:39:38
; (6.04 :patc (om-make-point 15 11) (om-make-point 1 46) (om-make-point 1246 764) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "01-vuzacanon" '((om-load-boxcomment "comment" (om-make-point 221 145) '"...an example of Vuza Canon" "" (om-make-point 937 210) nil (om-make-color 0 0 0) (om-make-font "Arial" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 294 33) '"R=(13 6 1 4 1 19 4 1 6 6 7 4 )" "" (om-make-point 34 219) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 40 74) '"+" "" (om-make-point 312 76) nil (om-make-color 0 0 0) (om-make-font "Geneva" 48 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" (list 1 4 1 19 4 1 6 6 7 4 13 6)) (om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" 3) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':poly?)) (om-make-point 81 640) (om-make-point 143 61) nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 10 556) (om-make-point 197 20) (list 13 6 1 4 1 19 4 1 6 6 7 4) "(13 6 1 4 1 19 4 1 6 6 7 4 )" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 131 592) (om-make-point 167 20) (list 8 8 2 8 8 38) "(8 8 2 8 8 38)" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 236 610) (om-make-point 41 20) 't "t" nil) (om-load-editor-box1 "POLY" 'poly '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "VOICES" (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(1 (((4 4) (1 1 1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 278 630) (om-make-point 130 65) (if (find-class 'poly nil) (let ((newobj (make-instance 'poly :voices (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(28 (((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(29 (((4 4) (-4)) ((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(30 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (4)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2)) ((4 4) ((1 (1 1)) 3.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) ((1 (1 1)) 2.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 2)) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(30 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 -3)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(31 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 -3)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(32 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 3)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (1.0 (1 (1 1)) 2.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 1)))) ((4 4) (3.0 1)) ((4 4) (1.0 -3)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '((((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) (nil)) ((nil) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) (nil)) ((nil) (nil) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0) (0)) (((0) (0)) (0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) (0)) (nil)) ((nil) (nil) (nil (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) nil)) ((nil) (nil) (nil) (nil (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) nil)) ((nil) (nil) (nil) (nil) (nil (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) (0)) ((0) ((0) (0))) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0) (0)) ((0) ((0) (0)) (0)) (((0) (0)) (0) ((0) (0))) ((0) (0)) ((0) nil)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 1 0 0) (om-make-color 0 0 0)) (list (list 0 1 1) (om-make-color 0 0 0)) (list (list 0 1 1 0) (om-make-color 0 0 0)) (list (list 0 1 1 0 0) (om-make-color 0 0 0)) (list (list 0 1 1 1) (om-make-color 0 0 0)) (list (list 0 1 1 1 0) (om-make-color 0 0 0)) (list (list 0 1 2) (om-make-color 0 0 0)) (list (list 0 1 2 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 2 0 0) (om-make-color 0 0 0)) (list (list 0 2 1) (om-make-color 0 0 0)) (list (list 0 2 1 0) (om-make-color 0 0 0)) (list (list 0 2 1 0 0) (om-make-color 0 0 0)) (list (list 0 2 1 1) (om-make-color 0 0 0)) (list (list 0 2 1 1 0) (om-make-color 0 0 0)) (list (list 0 2 2) (om-make-color 0 0 0)) (list (list 0 2 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 3 0 0) (om-make-color 0 0 0)) (list (list 0 3 0 0 0) (om-make-color 0 0 0)) (list (list 0 3 0 1) (om-make-color 0 0 0)) (list (list 0 3 0 1 0) (om-make-color 0 0 0)) (list (list 0 3 1) (om-make-color 0 0 0)) (list (list 0 3 1 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 4 0 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 5 0 0) (om-make-color 0 0 0)) (list (list 0 5 1) (om-make-color 0 0 0)) (list (list 0 5 1 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 6 0 0) (om-make-color 0 0 0)) (list (list 0 6 0 0 0) (om-make-color 0 0 0)) (list (list 0 6 0 1) (om-make-color 0 0 0)) (list (list 0 6 0 1 0) (om-make-color 0 0 0)) (list (list 0 6 1) (om-make-color 0 0 0)) (list (list 0 6 1 0) (om-make-color 0 0 0)) (list (list 0 6 2) (om-make-color 0 0 0)) (list (list 0 6 2 0) (om-make-color 0 0 0)) (list (list 0 6 2 0 0) (om-make-color 0 0 0)) (list (list 0 6 2 1) (om-make-color 0 0 0)) (list (list 0 6 2 1 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 7 0 0) (om-make-color 0 0 0)) (list (list 0 7 1) (om-make-color 0 0 0)) (list (list 0 7 1 0) (om-make-color 0 0 0)) (list (list 0 7 1 0 0) (om-make-color 0 0 0)) (list (list 0 7 1 1) (om-make-color 0 0 0)) (list (list 0 7 1 1 0) (om-make-color 0 0 0)) (list (list 0 7 2) (om-make-color 0 0 0)) (list (list 0 7 2 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 8 0 0) (om-make-color 0 0 0)) (list (list 0 8 1) (om-make-color 0 0 0)) (list (list 0 8 1 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 9 0 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 10 0 0) (om-make-color 0 0 0)) (list (list 0 10 1) (om-make-color 0 0 0)) (list (list 0 10 1 0) (om-make-color 0 0 0)) (list (list 0 10 1 0 0) (om-make-color 0 0 0)) (list (list 0 10 1 1) (om-make-color 0 0 0)) (list (list 0 10 1 1 0) (om-make-color 0 0 0)) (list (list 0 10 2) (om-make-color 0 0 0)) (list (list 0 10 2 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 11 0 0) (om-make-color 0 0 0)) (list (list 0 11 1) (om-make-color 0 0 0)) (list (list 0 11 1 0) (om-make-color 0 0 0)) (list (list 0 11 1 0 0) (om-make-color 0 0 0)) (list (list 0 11 1 1) (om-make-color 0 0 0)) (list (list 0 11 1 1 0) (om-make-color 0 0 0)) (list (list 0 11 2) (om-make-color 0 0 0)) (list (list 0 11 2 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 12 0 0) (om-make-color 0 0 0)) (list (list 0 12 0 0 0) (om-make-color 0 0 0)) (list (list 0 12 0 1) (om-make-color 0 0 0)) (list (list 0 12 0 1 0) (om-make-color 0 0 0)) (list (list 0 12 1) (om-make-color 0 0 0)) (list (list 0 12 1 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 13 0 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 14 0 0) (om-make-color 0 0 0)) (list (list 0 14 1) (om-make-color 0 0 0)) (list (list 0 14 1 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 15 0 0) (om-make-color 0 0 0)) (list (list 0 15 0 0 0) (om-make-color 0 0 0)) (list (list 0 15 0 1) (om-make-color 0 0 0)) (list (list 0 15 0 1 0) (om-make-color 0 0 0)) (list (list 0 15 1) (om-make-color 0 0 0)) (list (list 0 15 1 0) (om-make-color 0 0 0)) (list (list 0 15 2) (om-make-color 0 0 0)) (list (list 0 15 2 0) (om-make-color 0 0 0)) (list (list 0 15 2 0 0) (om-make-color 0 0 0)) (list (list 0 15 2 1) (om-make-color 0 0 0)) (list (list 0 15 2 1 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 16 0 0) (om-make-color 0 0 0)) (list (list 0 16 1) (om-make-color 0 0 0)) (list (list 0 16 1 0) (om-make-color 0 0 0)) (list (list 0 16 1 0 0) (om-make-color 0 0 0)) (list (list 0 16 1 1) (om-make-color 0 0 0)) (list (list 0 16 1 1 0) (om-make-color 0 0 0)) (list (list 0 16 2) (om-make-color 0 0 0)) (list (list 0 16 2 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 17 0 0) (om-make-color 0 0 0)) (list (list 0 17 1) (om-make-color 0 0 0)) (list (list 0 17 1 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 18 0 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 19 0 0) (om-make-color 0 0 0)) (list (list 0 19 1) (om-make-color 0 0 0)) (list (list 0 19 1 0) (om-make-color 0 0 0)) (list (list 0 19 1 0 0) (om-make-color 0 0 0)) (list (list 0 19 1 1) (om-make-color 0 0 0)) (list (list 0 19 1 1 0) (om-make-color 0 0 0)) (list (list 0 19 2) (om-make-color 0 0 0)) (list (list 0 19 2 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 20 0 0) (om-make-color 0 0 0)) (list (list 0 20 1) (om-make-color 0 0 0)) (list (list 0 20 1 0) (om-make-color 0 0 0)) (list (list 0 20 1 0 0) (om-make-color 0 0 0)) (list (list 0 20 1 1) (om-make-color 0 0 0)) (list (list 0 20 1 1 0) (om-make-color 0 0 0)) (list (list 0 20 2) (om-make-color 0 0 0)) (list (list 0 20 2 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 21 0 0) (om-make-color 0 0 0)) (list (list 0 21 0 0 0) (om-make-color 0 0 0)) (list (list 0 21 0 1) (om-make-color 0 0 0)) (list (list 0 21 0 1 0) (om-make-color 0 0 0)) (list (list 0 21 1) (om-make-color 0 0 0)) (list (list 0 21 1 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 22 0 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 23 0 0) (om-make-color 0 0 0)) (list (list 0 23 1) (om-make-color 0 0 0)) (list (list 0 23 1 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 24 0 0) (om-make-color 0 0 0)) (list (list 0 24 0 0 0) (om-make-color 0 0 0)) (list (list 0 24 0 1) (om-make-color 0 0 0)) (list (list 0 24 0 1 0) (om-make-color 0 0 0)) (list (list 0 24 1) (om-make-color 0 0 0)) (list (list 0 24 1 0) (om-make-color 0 0 0)) (list (list 0 24 2) (om-make-color 0 0 0)) (list (list 0 24 2 0) (om-make-color 0 0 0)) (list (list 0 24 2 0 0) (om-make-color 0 0 0)) (list (list 0 24 2 1) (om-make-color 0 0 0)) (list (list 0 24 2 1 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 25 0 0) (om-make-color 0 0 0)) (list (list 0 25 1) (om-make-color 0 0 0)) (list (list 0 25 1 0) (om-make-color 0 0 0)) (list (list 0 25 1 0 0) (om-make-color 0 0 0)) (list (list 0 25 1 1) (om-make-color 0 0 0)) (list (list 0 25 1 1 0) (om-make-color 0 0 0)) (list (list 0 25 2) (om-make-color 0 0 0)) (list (list 0 25 2 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 26 0 0) (om-make-color 0 0 0)) (list (list 0 26 1) (om-make-color 0 0 0)) (list (list 0 26 1 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 0 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 2 0 0) (om-make-color 0 0 0)) (list (list 1 2 1) (om-make-color 0 0 0)) (list (list 1 2 1 0) (om-make-color 0 0 0)) (list (list 1 2 1 0 0) (om-make-color 0 0 0)) (list (list 1 2 1 1) (om-make-color 0 0 0)) (list (list 1 2 1 1 0) (om-make-color 0 0 0)) (list (list 1 2 2) (om-make-color 0 0 0)) (list (list 1 2 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 3 0 0) (om-make-color 0 0 0)) (list (list 1 3 1) (om-make-color 0 0 0)) (list (list 1 3 1 0) (om-make-color 0 0 0)) (list (list 1 3 1 0 0) (om-make-color 0 0 0)) (list (list 1 3 1 1) (om-make-color 0 0 0)) (list (list 1 3 1 1 0) (om-make-color 0 0 0)) (list (list 1 3 2) (om-make-color 0 0 0)) (list (list 1 3 2 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 4 0 0) (om-make-color 0 0 0)) (list (list 1 4 0 0 0) (om-make-color 0 0 0)) (list (list 1 4 0 1) (om-make-color 0 0 0)) (list (list 1 4 0 1 0) (om-make-color 0 0 0)) (list (list 1 4 1) (om-make-color 0 0 0)) (list (list 1 4 1 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 5 0 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 6 0 0) (om-make-color 0 0 0)) (list (list 1 6 1) (om-make-color 0 0 0)) (list (list 1 6 1 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 7 0 0) (om-make-color 0 0 0)) (list (list 1 7 0 0 0) (om-make-color 0 0 0)) (list (list 1 7 0 1) (om-make-color 0 0 0)) (list (list 1 7 0 1 0) (om-make-color 0 0 0)) (list (list 1 7 1) (om-make-color 0 0 0)) (list (list 1 7 1 0) (om-make-color 0 0 0)) (list (list 1 7 2) (om-make-color 0 0 0)) (list (list 1 7 2 0) (om-make-color 0 0 0)) (list (list 1 7 2 0 0) (om-make-color 0 0 0)) (list (list 1 7 2 1) (om-make-color 0 0 0)) (list (list 1 7 2 1 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 8 0 0) (om-make-color 0 0 0)) (list (list 1 8 1) (om-make-color 0 0 0)) (list (list 1 8 1 0) (om-make-color 0 0 0)) (list (list 1 8 1 0 0) (om-make-color 0 0 0)) (list (list 1 8 1 1) (om-make-color 0 0 0)) (list (list 1 8 1 1 0) (om-make-color 0 0 0)) (list (list 1 8 2) (om-make-color 0 0 0)) (list (list 1 8 2 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 9 0 0) (om-make-color 0 0 0)) (list (list 1 9 1) (om-make-color 0 0 0)) (list (list 1 9 1 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 10 0 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 11 0 0) (om-make-color 0 0 0)) (list (list 1 11 1) (om-make-color 0 0 0)) (list (list 1 11 1 0) (om-make-color 0 0 0)) (list (list 1 11 1 0 0) (om-make-color 0 0 0)) (list (list 1 11 1 1) (om-make-color 0 0 0)) (list (list 1 11 1 1 0) (om-make-color 0 0 0)) (list (list 1 11 2) (om-make-color 0 0 0)) (list (list 1 11 2 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 12 0 0) (om-make-color 0 0 0)) (list (list 1 12 1) (om-make-color 0 0 0)) (list (list 1 12 1 0) (om-make-color 0 0 0)) (list (list 1 12 1 0 0) (om-make-color 0 0 0)) (list (list 1 12 1 1) (om-make-color 0 0 0)) (list (list 1 12 1 1 0) (om-make-color 0 0 0)) (list (list 1 12 2) (om-make-color 0 0 0)) (list (list 1 12 2 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 13 0 0) (om-make-color 0 0 0)) (list (list 1 13 0 0 0) (om-make-color 0 0 0)) (list (list 1 13 0 1) (om-make-color 0 0 0)) (list (list 1 13 0 1 0) (om-make-color 0 0 0)) (list (list 1 13 1) (om-make-color 0 0 0)) (list (list 1 13 1 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 14 0 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 15 0 0) (om-make-color 0 0 0)) (list (list 1 15 1) (om-make-color 0 0 0)) (list (list 1 15 1 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 16 0 0) (om-make-color 0 0 0)) (list (list 1 16 0 0 0) (om-make-color 0 0 0)) (list (list 1 16 0 1) (om-make-color 0 0 0)) (list (list 1 16 0 1 0) (om-make-color 0 0 0)) (list (list 1 16 1) (om-make-color 0 0 0)) (list (list 1 16 1 0) (om-make-color 0 0 0)) (list (list 1 16 2) (om-make-color 0 0 0)) (list (list 1 16 2 0) (om-make-color 0 0 0)) (list (list 1 16 2 0 0) (om-make-color 0 0 0)) (list (list 1 16 2 1) (om-make-color 0 0 0)) (list (list 1 16 2 1 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 17 0 0) (om-make-color 0 0 0)) (list (list 1 17 1) (om-make-color 0 0 0)) (list (list 1 17 1 0) (om-make-color 0 0 0)) (list (list 1 17 1 0 0) (om-make-color 0 0 0)) (list (list 1 17 1 1) (om-make-color 0 0 0)) (list (list 1 17 1 1 0) (om-make-color 0 0 0)) (list (list 1 17 2) (om-make-color 0 0 0)) (list (list 1 17 2 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 18 0 0) (om-make-color 0 0 0)) (list (list 1 18 1) (om-make-color 0 0 0)) (list (list 1 18 1 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 19 0 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 20 0 0) (om-make-color 0 0 0)) (list (list 1 20 1) (om-make-color 0 0 0)) (list (list 1 20 1 0) (om-make-color 0 0 0)) (list (list 1 20 1 0 0) (om-make-color 0 0 0)) (list (list 1 20 1 1) (om-make-color 0 0 0)) (list (list 1 20 1 1 0) (om-make-color 0 0 0)) (list (list 1 20 2) (om-make-color 0 0 0)) (list (list 1 20 2 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 21 0 0) (om-make-color 0 0 0)) (list (list 1 21 1) (om-make-color 0 0 0)) (list (list 1 21 1 0) (om-make-color 0 0 0)) (list (list 1 21 1 0 0) (om-make-color 0 0 0)) (list (list 1 21 1 1) (om-make-color 0 0 0)) (list (list 1 21 1 1 0) (om-make-color 0 0 0)) (list (list 1 21 2) (om-make-color 0 0 0)) (list (list 1 21 2 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 22 0 0) (om-make-color 0 0 0)) (list (list 1 22 0 0 0) (om-make-color 0 0 0)) (list (list 1 22 0 1) (om-make-color 0 0 0)) (list (list 1 22 0 1 0) (om-make-color 0 0 0)) (list (list 1 22 1) (om-make-color 0 0 0)) (list (list 1 22 1 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 23 0 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 24 0 0) (om-make-color 0 0 0)) (list (list 1 24 1) (om-make-color 0 0 0)) (list (list 1 24 1 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 25 0 0) (om-make-color 0 0 0)) (list (list 1 25 0 0 0) (om-make-color 0 0 0)) (list (list 1 25 0 1) (om-make-color 0 0 0)) (list (list 1 25 0 1 0) (om-make-color 0 0 0)) (list (list 1 25 1) (om-make-color 0 0 0)) (list (list 1 25 1 0) (om-make-color 0 0 0)) (list (list 1 25 2) (om-make-color 0 0 0)) (list (list 1 25 2 0) (om-make-color 0 0 0)) (list (list 1 25 2 0 0) (om-make-color 0 0 0)) (list (list 1 25 2 1) (om-make-color 0 0 0)) (list (list 1 25 2 1 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 26 0 0) (om-make-color 0 0 0)) (list (list 1 26 1) (om-make-color 0 0 0)) (list (list 1 26 1 0) (om-make-color 0 0 0)) (list (list 1 26 1 0 0) (om-make-color 0 0 0)) (list (list 1 26 1 1) (om-make-color 0 0 0)) (list (list 1 26 1 1 0) (om-make-color 0 0 0)) (list (list 1 26 2) (om-make-color 0 0 0)) (list (list 1 26 2 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 27 0 0) (om-make-color 0 0 0)) (list (list 1 27 1) (om-make-color 0 0 0)) (list (list 1 27 1 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 2 0 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 3 0 0) (om-make-color 0 0 0)) (list (list 2 3 1) (om-make-color 0 0 0)) (list (list 2 3 1 0) (om-make-color 0 0 0)) (list (list 2 3 1 0 0) (om-make-color 0 0 0)) (list (list 2 3 1 1) (om-make-color 0 0 0)) (list (list 2 3 1 1 0) (om-make-color 0 0 0)) (list (list 2 3 2) (om-make-color 0 0 0)) (list (list 2 3 2 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 4 0 0) (om-make-color 0 0 0)) (list (list 2 4 1) (om-make-color 0 0 0)) (list (list 2 4 1 0) (om-make-color 0 0 0)) (list (list 2 4 1 0 0) (om-make-color 0 0 0)) (list (list 2 4 1 1) (om-make-color 0 0 0)) (list (list 2 4 1 1 0) (om-make-color 0 0 0)) (list (list 2 4 2) (om-make-color 0 0 0)) (list (list 2 4 2 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 5 0 0) (om-make-color 0 0 0)) (list (list 2 5 0 0 0) (om-make-color 0 0 0)) (list (list 2 5 0 1) (om-make-color 0 0 0)) (list (list 2 5 0 1 0) (om-make-color 0 0 0)) (list (list 2 5 1) (om-make-color 0 0 0)) (list (list 2 5 1 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 6 0 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 7 0 0) (om-make-color 0 0 0)) (list (list 2 7 1) (om-make-color 0 0 0)) (list (list 2 7 1 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 8 0 0) (om-make-color 0 0 0)) (list (list 2 8 0 0 0) (om-make-color 0 0 0)) (list (list 2 8 0 1) (om-make-color 0 0 0)) (list (list 2 8 0 1 0) (om-make-color 0 0 0)) (list (list 2 8 1) (om-make-color 0 0 0)) (list (list 2 8 1 0) (om-make-color 0 0 0)) (list (list 2 8 2) (om-make-color 0 0 0)) (list (list 2 8 2 0) (om-make-color 0 0 0)) (list (list 2 8 2 0 0) (om-make-color 0 0 0)) (list (list 2 8 2 1) (om-make-color 0 0 0)) (list (list 2 8 2 1 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 9 0 0) (om-make-color 0 0 0)) (list (list 2 9 1) (om-make-color 0 0 0)) (list (list 2 9 1 0) (om-make-color 0 0 0)) (list (list 2 9 1 0 0) (om-make-color 0 0 0)) (list (list 2 9 1 1) (om-make-color 0 0 0)) (list (list 2 9 1 1 0) (om-make-color 0 0 0)) (list (list 2 9 2) (om-make-color 0 0 0)) (list (list 2 9 2 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 10 0 0) (om-make-color 0 0 0)) (list (list 2 10 1) (om-make-color 0 0 0)) (list (list 2 10 1 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 11 0 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 12 0 0) (om-make-color 0 0 0)) (list (list 2 12 1) (om-make-color 0 0 0)) (list (list 2 12 1 0) (om-make-color 0 0 0)) (list (list 2 12 1 0 0) (om-make-color 0 0 0)) (list (list 2 12 1 1) (om-make-color 0 0 0)) (list (list 2 12 1 1 0) (om-make-color 0 0 0)) (list (list 2 12 2) (om-make-color 0 0 0)) (list (list 2 12 2 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 13 0 0) (om-make-color 0 0 0)) (list (list 2 13 1) (om-make-color 0 0 0)) (list (list 2 13 1 0) (om-make-color 0 0 0)) (list (list 2 13 1 0 0) (om-make-color 0 0 0)) (list (list 2 13 1 1) (om-make-color 0 0 0)) (list (list 2 13 1 1 0) (om-make-color 0 0 0)) (list (list 2 13 2) (om-make-color 0 0 0)) (list (list 2 13 2 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 14 0 0) (om-make-color 0 0 0)) (list (list 2 14 0 0 0) (om-make-color 0 0 0)) (list (list 2 14 0 1) (om-make-color 0 0 0)) (list (list 2 14 0 1 0) (om-make-color 0 0 0)) (list (list 2 14 1) (om-make-color 0 0 0)) (list (list 2 14 1 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 15 0 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 16 0 0) (om-make-color 0 0 0)) (list (list 2 16 1) (om-make-color 0 0 0)) (list (list 2 16 1 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 17 0 0) (om-make-color 0 0 0)) (list (list 2 17 0 0 0) (om-make-color 0 0 0)) (list (list 2 17 0 1) (om-make-color 0 0 0)) (list (list 2 17 0 1 0) (om-make-color 0 0 0)) (list (list 2 17 1) (om-make-color 0 0 0)) (list (list 2 17 1 0) (om-make-color 0 0 0)) (list (list 2 17 2) (om-make-color 0 0 0)) (list (list 2 17 2 0) (om-make-color 0 0 0)) (list (list 2 17 2 0 0) (om-make-color 0 0 0)) (list (list 2 17 2 1) (om-make-color 0 0 0)) (list (list 2 17 2 1 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 18 0 0) (om-make-color 0 0 0)) (list (list 2 18 1) (om-make-color 0 0 0)) (list (list 2 18 1 0) (om-make-color 0 0 0)) (list (list 2 18 1 0 0) (om-make-color 0 0 0)) (list (list 2 18 1 1) (om-make-color 0 0 0)) (list (list 2 18 1 1 0) (om-make-color 0 0 0)) (list (list 2 18 2) (om-make-color 0 0 0)) (list (list 2 18 2 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 19 0 0) (om-make-color 0 0 0)) (list (list 2 19 1) (om-make-color 0 0 0)) (list (list 2 19 1 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 20 0 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 21 0 0) (om-make-color 0 0 0)) (list (list 2 21 1) (om-make-color 0 0 0)) (list (list 2 21 1 0) (om-make-color 0 0 0)) (list (list 2 21 1 0 0) (om-make-color 0 0 0)) (list (list 2 21 1 1) (om-make-color 0 0 0)) (list (list 2 21 1 1 0) (om-make-color 0 0 0)) (list (list 2 21 2) (om-make-color 0 0 0)) (list (list 2 21 2 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 22 0 0) (om-make-color 0 0 0)) (list (list 2 22 1) (om-make-color 0 0 0)) (list (list 2 22 1 0) (om-make-color 0 0 0)) (list (list 2 22 1 0 0) (om-make-color 0 0 0)) (list (list 2 22 1 1) (om-make-color 0 0 0)) (list (list 2 22 1 1 0) (om-make-color 0 0 0)) (list (list 2 22 2) (om-make-color 0 0 0)) (list (list 2 22 2 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 23 0 0) (om-make-color 0 0 0)) (list (list 2 23 0 0 0) (om-make-color 0 0 0)) (list (list 2 23 0 1) (om-make-color 0 0 0)) (list (list 2 23 0 1 0) (om-make-color 0 0 0)) (list (list 2 23 1) (om-make-color 0 0 0)) (list (list 2 23 1 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 24 0 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 25 0 0) (om-make-color 0 0 0)) (list (list 2 25 1) (om-make-color 0 0 0)) (list (list 2 25 1 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 26 0 0) (om-make-color 0 0 0)) (list (list 2 26 0 0 0) (om-make-color 0 0 0)) (list (list 2 26 0 1) (om-make-color 0 0 0)) (list (list 2 26 0 1 0) (om-make-color 0 0 0)) (list (list 2 26 1) (om-make-color 0 0 0)) (list (list 2 26 1 0) (om-make-color 0 0 0)) (list (list 2 26 2) (om-make-color 0 0 0)) (list (list 2 26 2 0) (om-make-color 0 0 0)) (list (list 2 26 2 0 0) (om-make-color 0 0 0)) (list (list 2 26 2 1) (om-make-color 0 0 0)) (list (list 2 26 2 1 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 27 0 0) (om-make-color 0 0 0)) (list (list 2 27 1) (om-make-color 0 0 0)) (list (list 2 27 1 0) (om-make-color 0 0 0)) (list (list 2 27 1 0 0) (om-make-color 0 0 0)) (list (list 2 27 1 1) (om-make-color 0 0 0)) (list (list 2 27 1 1 0) (om-make-color 0 0 0)) (list (list 2 27 2) (om-make-color 0 0 0)) (list (list 2 27 2 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 28 0 0) (om-make-color 0 0 0)) (list (list 2 28 1) (om-make-color 0 0 0)) (list (list 2 28 1 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 2 1) (om-make-color 0 0 0)) (list (list 3 2 1 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 3 0 0) (om-make-color 0 0 0)) (list (list 3 3 1) (om-make-color 0 0 0)) (list (list 3 3 1 0) (om-make-color 0 0 0)) (list (list 3 3 1 0 0) (om-make-color 0 0 0)) (list (list 3 3 1 1) (om-make-color 0 0 0)) (list (list 3 3 1 1 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 4 0 0) (om-make-color 0 0 0)) (list (list 3 4 1) (om-make-color 0 0 0)) (list (list 3 4 1 0) (om-make-color 0 0 0)) (list (list 3 4 1 0 0) (om-make-color 0 0 0)) (list (list 3 4 1 1) (om-make-color 0 0 0)) (list (list 3 4 1 1 0) (om-make-color 0 0 0)) (list (list 3 4 2) (om-make-color 0 0 0)) (list (list 3 4 2 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 5 0 0) (om-make-color 0 0 0)) (list (list 3 5 1) (om-make-color 0 0 0)) (list (list 3 5 1 0) (om-make-color 0 0 0)) (list (list 3 5 1 0 0) (om-make-color 0 0 0)) (list (list 3 5 1 1) (om-make-color 0 0 0)) (list (list 3 5 1 1 0) (om-make-color 0 0 0)) (list (list 3 5 2) (om-make-color 0 0 0)) (list (list 3 5 2 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 6 0 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 7 0 0) (om-make-color 0 0 0)) (list (list 3 7 1) (om-make-color 0 0 0)) (list (list 3 7 1 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 8 0 0) (om-make-color 0 0 0)) (list (list 3 8 1) (om-make-color 0 0 0)) (list (list 3 8 1 0) (om-make-color 0 0 0)) (list (list 3 8 1 0 0) (om-make-color 0 0 0)) (list (list 3 8 1 1) (om-make-color 0 0 0)) (list (list 3 8 1 1 0) (om-make-color 0 0 0)) (list (list 3 8 2) (om-make-color 0 0 0)) (list (list 3 8 2 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 9 0 0) (om-make-color 0 0 0)) (list (list 3 9 0 0 0) (om-make-color 0 0 0)) (list (list 3 9 0 1) (om-make-color 0 0 0)) (list (list 3 9 0 1 0) (om-make-color 0 0 0)) (list (list 3 9 1) (om-make-color 0 0 0)) (list (list 3 9 1 0) (om-make-color 0 0 0)) (list (list 3 9 2) (om-make-color 0 0 0)) (list (list 3 9 2 0) (om-make-color 0 0 0)) (list (list 3 9 2 0 0) (om-make-color 0 0 0)) (list (list 3 9 2 1) (om-make-color 0 0 0)) (list (list 3 9 2 1 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 10 0 0) (om-make-color 0 0 0)) (list (list 3 10 1) (om-make-color 0 0 0)) (list (list 3 10 1 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 11 0 0) (om-make-color 0 0 0)) (list (list 3 11 1) (om-make-color 0 0 0)) (list (list 3 11 1 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 12 0 0) (om-make-color 0 0 0)) (list (list 3 12 1) (om-make-color 0 0 0)) (list (list 3 12 1 0) (om-make-color 0 0 0)) (list (list 3 12 1 0 0) (om-make-color 0 0 0)) (list (list 3 12 1 1) (om-make-color 0 0 0)) (list (list 3 12 1 1 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 13 0 0) (om-make-color 0 0 0)) (list (list 3 13 1) (om-make-color 0 0 0)) (list (list 3 13 1 0) (om-make-color 0 0 0)) (list (list 3 13 1 0 0) (om-make-color 0 0 0)) (list (list 3 13 1 1) (om-make-color 0 0 0)) (list (list 3 13 1 1 0) (om-make-color 0 0 0)) (list (list 3 13 2) (om-make-color 0 0 0)) (list (list 3 13 2 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 14 0 0) (om-make-color 0 0 0)) (list (list 3 14 1) (om-make-color 0 0 0)) (list (list 3 14 1 0) (om-make-color 0 0 0)) (list (list 3 14 1 0 0) (om-make-color 0 0 0)) (list (list 3 14 1 1) (om-make-color 0 0 0)) (list (list 3 14 1 1 0) (om-make-color 0 0 0)) (list (list 3 14 2) (om-make-color 0 0 0)) (list (list 3 14 2 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 15 0 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 16 0 0) (om-make-color 0 0 0)) (list (list 3 16 1) (om-make-color 0 0 0)) (list (list 3 16 1 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 3 17 0 0) (om-make-color 0 0 0)) (list (list 3 17 1) (om-make-color 0 0 0)) (list (list 3 17 1 0) (om-make-color 0 0 0)) (list (list 3 17 1 0 0) (om-make-color 0 0 0)) (list (list 3 17 1 1) (om-make-color 0 0 0)) (list (list 3 17 1 1 0) (om-make-color 0 0 0)) (list (list 3 17 2) (om-make-color 0 0 0)) (list (list 3 17 2 0) (om-make-color 0 0 0)) (list (list 3 18) (om-make-color 0 0 0)) (list (list 3 18 0) (om-make-color 0 0 0)) (list (list 3 18 0 0) (om-make-color 0 0 0)) (list (list 3 18 0 0 0) (om-make-color 0 0 0)) (list (list 3 18 0 1) (om-make-color 0 0 0)) (list (list 3 18 0 1 0) (om-make-color 0 0 0)) (list (list 3 18 1) (om-make-color 0 0 0)) (list (list 3 18 1 0) (om-make-color 0 0 0)) (list (list 3 18 2) (om-make-color 0 0 0)) (list (list 3 18 2 0) (om-make-color 0 0 0)) (list (list 3 18 2 0 0) (om-make-color 0 0 0)) (list (list 3 18 2 1) (om-make-color 0 0 0)) (list (list 3 18 2 1 0) (om-make-color 0 0 0)) (list (list 3 19) (om-make-color 0 0 0)) (list (list 3 19 0) (om-make-color 0 0 0)) (list (list 3 19 0 0) (om-make-color 0 0 0)) (list (list 3 19 1) (om-make-color 0 0 0)) (list (list 3 19 1 0) (om-make-color 0 0 0)) (list (list 3 20) (om-make-color 0 0 0)) (list (list 3 20 0) (om-make-color 0 0 0)) (list (list 3 20 0 0) (om-make-color 0 0 0)) (list (list 3 20 1) (om-make-color 0 0 0)) (list (list 3 20 1 0) (om-make-color 0 0 0)) (list (list 3 21) (om-make-color 0 0 0)) (list (list 3 21 0) (om-make-color 0 0 0)) (list (list 3 21 0 0) (om-make-color 0 0 0)) (list (list 3 21 1) (om-make-color 0 0 0)) (list (list 3 21 1 0) (om-make-color 0 0 0)) (list (list 3 21 1 0 0) (om-make-color 0 0 0)) (list (list 3 21 1 1) (om-make-color 0 0 0)) (list (list 3 21 1 1 0) (om-make-color 0 0 0)) (list (list 3 22) (om-make-color 0 0 0)) (list (list 3 22 0) (om-make-color 0 0 0)) (list (list 3 22 0 0) (om-make-color 0 0 0)) (list (list 3 22 1) (om-make-color 0 0 0)) (list (list 3 22 1 0) (om-make-color 0 0 0)) (list (list 3 22 1 0 0) (om-make-color 0 0 0)) (list (list 3 22 1 1) (om-make-color 0 0 0)) (list (list 3 22 1 1 0) (om-make-color 0 0 0)) (list (list 3 22 2) (om-make-color 0 0 0)) (list (list 3 22 2 0) (om-make-color 0 0 0)) (list (list 3 23) (om-make-color 0 0 0)) (list (list 3 23 0) (om-make-color 0 0 0)) (list (list 3 23 0 0) (om-make-color 0 0 0)) (list (list 3 23 1) (om-make-color 0 0 0)) (list (list 3 23 1 0) (om-make-color 0 0 0)) (list (list 3 23 1 0 0) (om-make-color 0 0 0)) (list (list 3 23 1 1) (om-make-color 0 0 0)) (list (list 3 23 1 1 0) (om-make-color 0 0 0)) (list (list 3 23 2) (om-make-color 0 0 0)) (list (list 3 23 2 0) (om-make-color 0 0 0)) (list (list 3 24) (om-make-color 0 0 0)) (list (list 3 24 0) (om-make-color 0 0 0)) (list (list 3 24 0 0) (om-make-color 0 0 0)) (list (list 3 25) (om-make-color 0 0 0)) (list (list 3 25 0) (om-make-color 0 0 0)) (list (list 3 25 0 0) (om-make-color 0 0 0)) (list (list 3 25 1) (om-make-color 0 0 0)) (list (list 3 25 1 0) (om-make-color 0 0 0)) (list (list 3 26) (om-make-color 0 0 0)) (list (list 3 26 0) (om-make-color 0 0 0)) (list (list 3 26 0 0) (om-make-color 0 0 0)) (list (list 3 26 1) (om-make-color 0 0 0)) (list (list 3 26 1 0) (om-make-color 0 0 0)) (list (list 3 26 1 0 0) (om-make-color 0 0 0)) (list (list 3 26 1 1) (om-make-color 0 0 0)) (list (list 3 26 1 1 0) (om-make-color 0 0 0)) (list (list 3 26 2) (om-make-color 0 0 0)) (list (list 3 26 2 0) (om-make-color 0 0 0)) (list (list 3 27) (om-make-color 0 0 0)) (list (list 3 27 0) (om-make-color 0 0 0)) (list (list 3 27 0 0) (om-make-color 0 0 0)) (list (list 3 27 0 0 0) (om-make-color 0 0 0)) (list (list 3 27 0 1) (om-make-color 0 0 0)) (list (list 3 27 0 1 0) (om-make-color 0 0 0)) (list (list 3 27 1) (om-make-color 0 0 0)) (list (list 3 27 1 0) (om-make-color 0 0 0)) (list (list 3 27 2) (om-make-color 0 0 0)) (list (list 3 27 2 0) (om-make-color 0 0 0)) (list (list 3 27 2 0 0) (om-make-color 0 0 0)) (list (list 3 27 2 1) (om-make-color 0 0 0)) (list (list 3 27 2 1 0) (om-make-color 0 0 0)) (list (list 3 28) (om-make-color 0 0 0)) (list (list 3 28 0) (om-make-color 0 0 0)) (list (list 3 28 0 0) (om-make-color 0 0 0)) (list (list 3 28 1) (om-make-color 0 0 0)) (list (list 3 28 1 0) (om-make-color 0 0 0)) (list (list 3 29) (om-make-color 0 0 0)) (list (list 3 29 0) (om-make-color 0 0 0)) (list (list 3 29 0 0) (om-make-color 0 0 0)) (list (list 3 29 1) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 3 1) (om-make-color 0 0 0)) (list (list 4 3 1 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 4 0 0) (om-make-color 0 0 0)) (list (list 4 4 1) (om-make-color 0 0 0)) (list (list 4 4 1 0) (om-make-color 0 0 0)) (list (list 4 4 1 0 0) (om-make-color 0 0 0)) (list (list 4 4 1 1) (om-make-color 0 0 0)) (list (list 4 4 1 1 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 5 0 0) (om-make-color 0 0 0)) (list (list 4 5 1) (om-make-color 0 0 0)) (list (list 4 5 1 0) (om-make-color 0 0 0)) (list (list 4 5 1 0 0) (om-make-color 0 0 0)) (list (list 4 5 1 1) (om-make-color 0 0 0)) (list (list 4 5 1 1 0) (om-make-color 0 0 0)) (list (list 4 5 2) (om-make-color 0 0 0)) (list (list 4 5 2 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 6 0 0) (om-make-color 0 0 0)) (list (list 4 6 1) (om-make-color 0 0 0)) (list (list 4 6 1 0) (om-make-color 0 0 0)) (list (list 4 6 1 0 0) (om-make-color 0 0 0)) (list (list 4 6 1 1) (om-make-color 0 0 0)) (list (list 4 6 1 1 0) (om-make-color 0 0 0)) (list (list 4 6 2) (om-make-color 0 0 0)) (list (list 4 6 2 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 7 0 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 8 0 0) (om-make-color 0 0 0)) (list (list 4 8 1) (om-make-color 0 0 0)) (list (list 4 8 1 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 9 0 0) (om-make-color 0 0 0)) (list (list 4 9 1) (om-make-color 0 0 0)) (list (list 4 9 1 0) (om-make-color 0 0 0)) (list (list 4 9 1 0 0) (om-make-color 0 0 0)) (list (list 4 9 1 1) (om-make-color 0 0 0)) (list (list 4 9 1 1 0) (om-make-color 0 0 0)) (list (list 4 9 2) (om-make-color 0 0 0)) (list (list 4 9 2 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 10 0 0) (om-make-color 0 0 0)) (list (list 4 10 0 0 0) (om-make-color 0 0 0)) (list (list 4 10 0 1) (om-make-color 0 0 0)) (list (list 4 10 0 1 0) (om-make-color 0 0 0)) (list (list 4 10 1) (om-make-color 0 0 0)) (list (list 4 10 1 0) (om-make-color 0 0 0)) (list (list 4 10 2) (om-make-color 0 0 0)) (list (list 4 10 2 0) (om-make-color 0 0 0)) (list (list 4 10 2 0 0) (om-make-color 0 0 0)) (list (list 4 10 2 1) (om-make-color 0 0 0)) (list (list 4 10 2 1 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 11 0 0) (om-make-color 0 0 0)) (list (list 4 11 1) (om-make-color 0 0 0)) (list (list 4 11 1 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 12 0 0) (om-make-color 0 0 0)) (list (list 4 12 1) (om-make-color 0 0 0)) (list (list 4 12 1 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 13 0 0) (om-make-color 0 0 0)) (list (list 4 13 1) (om-make-color 0 0 0)) (list (list 4 13 1 0) (om-make-color 0 0 0)) (list (list 4 13 1 0 0) (om-make-color 0 0 0)) (list (list 4 13 1 1) (om-make-color 0 0 0)) (list (list 4 13 1 1 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 14 0 0) (om-make-color 0 0 0)) (list (list 4 14 1) (om-make-color 0 0 0)) (list (list 4 14 1 0) (om-make-color 0 0 0)) (list (list 4 14 1 0 0) (om-make-color 0 0 0)) (list (list 4 14 1 1) (om-make-color 0 0 0)) (list (list 4 14 1 1 0) (om-make-color 0 0 0)) (list (list 4 14 2) (om-make-color 0 0 0)) (list (list 4 14 2 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 15 0 0) (om-make-color 0 0 0)) (list (list 4 15 1) (om-make-color 0 0 0)) (list (list 4 15 1 0) (om-make-color 0 0 0)) (list (list 4 15 1 0 0) (om-make-color 0 0 0)) (list (list 4 15 1 1) (om-make-color 0 0 0)) (list (list 4 15 1 1 0) (om-make-color 0 0 0)) (list (list 4 15 2) (om-make-color 0 0 0)) (list (list 4 15 2 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 16 0 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 4 17 0 0) (om-make-color 0 0 0)) (list (list 4 17 1) (om-make-color 0 0 0)) (list (list 4 17 1 0) (om-make-color 0 0 0)) (list (list 4 18) (om-make-color 0 0 0)) (list (list 4 18 0) (om-make-color 0 0 0)) (list (list 4 18 0 0) (om-make-color 0 0 0)) (list (list 4 18 1) (om-make-color 0 0 0)) (list (list 4 18 1 0) (om-make-color 0 0 0)) (list (list 4 18 1 0 0) (om-make-color 0 0 0)) (list (list 4 18 1 1) (om-make-color 0 0 0)) (list (list 4 18 1 1 0) (om-make-color 0 0 0)) (list (list 4 18 2) (om-make-color 0 0 0)) (list (list 4 18 2 0) (om-make-color 0 0 0)) (list (list 4 19) (om-make-color 0 0 0)) (list (list 4 19 0) (om-make-color 0 0 0)) (list (list 4 19 0 0) (om-make-color 0 0 0)) (list (list 4 19 0 0 0) (om-make-color 0 0 0)) (list (list 4 19 0 1) (om-make-color 0 0 0)) (list (list 4 19 0 1 0) (om-make-color 0 0 0)) (list (list 4 19 1) (om-make-color 0 0 0)) (list (list 4 19 1 0) (om-make-color 0 0 0)) (list (list 4 19 2) (om-make-color 0 0 0)) (list (list 4 19 2 0) (om-make-color 0 0 0)) (list (list 4 19 2 0 0) (om-make-color 0 0 0)) (list (list 4 19 2 1) (om-make-color 0 0 0)) (list (list 4 19 2 1 0) (om-make-color 0 0 0)) (list (list 4 20) (om-make-color 0 0 0)) (list (list 4 20 0) (om-make-color 0 0 0)) (list (list 4 20 0 0) (om-make-color 0 0 0)) (list (list 4 20 1) (om-make-color 0 0 0)) (list (list 4 20 1 0) (om-make-color 0 0 0)) (list (list 4 21) (om-make-color 0 0 0)) (list (list 4 21 0) (om-make-color 0 0 0)) (list (list 4 21 0 0) (om-make-color 0 0 0)) (list (list 4 21 1) (om-make-color 0 0 0)) (list (list 4 21 1 0) (om-make-color 0 0 0)) (list (list 4 22) (om-make-color 0 0 0)) (list (list 4 22 0) (om-make-color 0 0 0)) (list (list 4 22 0 0) (om-make-color 0 0 0)) (list (list 4 22 1) (om-make-color 0 0 0)) (list (list 4 22 1 0) (om-make-color 0 0 0)) (list (list 4 22 1 0 0) (om-make-color 0 0 0)) (list (list 4 22 1 1) (om-make-color 0 0 0)) (list (list 4 22 1 1 0) (om-make-color 0 0 0)) (list (list 4 23) (om-make-color 0 0 0)) (list (list 4 23 0) (om-make-color 0 0 0)) (list (list 4 23 0 0) (om-make-color 0 0 0)) (list (list 4 23 1) (om-make-color 0 0 0)) (list (list 4 23 1 0) (om-make-color 0 0 0)) (list (list 4 23 1 0 0) (om-make-color 0 0 0)) (list (list 4 23 1 1) (om-make-color 0 0 0)) (list (list 4 23 1 1 0) (om-make-color 0 0 0)) (list (list 4 23 2) (om-make-color 0 0 0)) (list (list 4 23 2 0) (om-make-color 0 0 0)) (list (list 4 24) (om-make-color 0 0 0)) (list (list 4 24 0) (om-make-color 0 0 0)) (list (list 4 24 0 0) (om-make-color 0 0 0)) (list (list 4 24 1) (om-make-color 0 0 0)) (list (list 4 24 1 0) (om-make-color 0 0 0)) (list (list 4 24 1 0 0) (om-make-color 0 0 0)) (list (list 4 24 1 1) (om-make-color 0 0 0)) (list (list 4 24 1 1 0) (om-make-color 0 0 0)) (list (list 4 24 2) (om-make-color 0 0 0)) (list (list 4 24 2 0) (om-make-color 0 0 0)) (list (list 4 25) (om-make-color 0 0 0)) (list (list 4 25 0) (om-make-color 0 0 0)) (list (list 4 25 0 0) (om-make-color 0 0 0)) (list (list 4 26) (om-make-color 0 0 0)) (list (list 4 26 0) (om-make-color 0 0 0)) (list (list 4 26 0 0) (om-make-color 0 0 0)) (list (list 4 26 1) (om-make-color 0 0 0)) (list (list 4 26 1 0) (om-make-color 0 0 0)) (list (list 4 27) (om-make-color 0 0 0)) (list (list 4 27 0) (om-make-color 0 0 0)) (list (list 4 27 0 0) (om-make-color 0 0 0)) (list (list 4 27 1) (om-make-color 0 0 0)) (list (list 4 27 1 0) (om-make-color 0 0 0)) (list (list 4 27 1 0 0) (om-make-color 0 0 0)) (list (list 4 27 1 1) (om-make-color 0 0 0)) (list (list 4 27 1 1 0) (om-make-color 0 0 0)) (list (list 4 27 2) (om-make-color 0 0 0)) (list (list 4 27 2 0) (om-make-color 0 0 0)) (list (list 4 28) (om-make-color 0 0 0)) (list (list 4 28 0) (om-make-color 0 0 0)) (list (list 4 28 0 0) (om-make-color 0 0 0)) (list (list 4 28 0 0 0) (om-make-color 0 0 0)) (list (list 4 28 0 1) (om-make-color 0 0 0)) (list (list 4 28 0 1 0) (om-make-color 0 0 0)) (list (list 4 28 1) (om-make-color 0 0 0)) (list (list 4 28 1 0) (om-make-color 0 0 0)) (list (list 4 28 2) (om-make-color 0 0 0)) (list (list 4 28 2 0) (om-make-color 0 0 0)) (list (list 4 28 2 0 0) (om-make-color 0 0 0)) (list (list 4 28 2 1) (om-make-color 0 0 0)) (list (list 4 28 2 1 0) (om-make-color 0 0 0)) (list (list 4 29) (om-make-color 0 0 0)) (list (list 4 29 0) (om-make-color 0 0 0)) (list (list 4 29 0 0) (om-make-color 0 0 0)) (list (list 4 29 1) (om-make-color 0 0 0)) (list (list 4 29 1 0) (om-make-color 0 0 0)) (list (list 4 30) (om-make-color 0 0 0)) (list (list 4 30 0) (om-make-color 0 0 0)) (list (list 4 30 0 0) (om-make-color 0 0 0)) (list (list 4 30 1) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 4 1) (om-make-color 0 0 0)) (list (list 5 4 1 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 5 0 0) (om-make-color 0 0 0)) (list (list 5 5 1) (om-make-color 0 0 0)) (list (list 5 5 1 0) (om-make-color 0 0 0)) (list (list 5 5 1 0 0) (om-make-color 0 0 0)) (list (list 5 5 1 1) (om-make-color 0 0 0)) (list (list 5 5 1 1 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 6 0 0) (om-make-color 0 0 0)) (list (list 5 6 1) (om-make-color 0 0 0)) (list (list 5 6 1 0) (om-make-color 0 0 0)) (list (list 5 6 1 0 0) (om-make-color 0 0 0)) (list (list 5 6 1 1) (om-make-color 0 0 0)) (list (list 5 6 1 1 0) (om-make-color 0 0 0)) (list (list 5 6 2) (om-make-color 0 0 0)) (list (list 5 6 2 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 7 0 0) (om-make-color 0 0 0)) (list (list 5 7 1) (om-make-color 0 0 0)) (list (list 5 7 1 0) (om-make-color 0 0 0)) (list (list 5 7 1 0 0) (om-make-color 0 0 0)) (list (list 5 7 1 1) (om-make-color 0 0 0)) (list (list 5 7 1 1 0) (om-make-color 0 0 0)) (list (list 5 7 2) (om-make-color 0 0 0)) (list (list 5 7 2 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 8 0 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 9 0 0) (om-make-color 0 0 0)) (list (list 5 9 1) (om-make-color 0 0 0)) (list (list 5 9 1 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 10 0 0) (om-make-color 0 0 0)) (list (list 5 10 1) (om-make-color 0 0 0)) (list (list 5 10 1 0) (om-make-color 0 0 0)) (list (list 5 10 1 0 0) (om-make-color 0 0 0)) (list (list 5 10 1 1) (om-make-color 0 0 0)) (list (list 5 10 1 1 0) (om-make-color 0 0 0)) (list (list 5 10 2) (om-make-color 0 0 0)) (list (list 5 10 2 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 11 0 0) (om-make-color 0 0 0)) (list (list 5 11 0 0 0) (om-make-color 0 0 0)) (list (list 5 11 0 1) (om-make-color 0 0 0)) (list (list 5 11 0 1 0) (om-make-color 0 0 0)) (list (list 5 11 1) (om-make-color 0 0 0)) (list (list 5 11 1 0) (om-make-color 0 0 0)) (list (list 5 11 2) (om-make-color 0 0 0)) (list (list 5 11 2 0) (om-make-color 0 0 0)) (list (list 5 11 2 0 0) (om-make-color 0 0 0)) (list (list 5 11 2 1) (om-make-color 0 0 0)) (list (list 5 11 2 1 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 12 0 0) (om-make-color 0 0 0)) (list (list 5 12 1) (om-make-color 0 0 0)) (list (list 5 12 1 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 13 0 0) (om-make-color 0 0 0)) (list (list 5 13 1) (om-make-color 0 0 0)) (list (list 5 13 1 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 14 0 0) (om-make-color 0 0 0)) (list (list 5 14 1) (om-make-color 0 0 0)) (list (list 5 14 1 0) (om-make-color 0 0 0)) (list (list 5 14 1 0 0) (om-make-color 0 0 0)) (list (list 5 14 1 1) (om-make-color 0 0 0)) (list (list 5 14 1 1 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 15 0 0) (om-make-color 0 0 0)) (list (list 5 15 1) (om-make-color 0 0 0)) (list (list 5 15 1 0) (om-make-color 0 0 0)) (list (list 5 15 1 0 0) (om-make-color 0 0 0)) (list (list 5 15 1 1) (om-make-color 0 0 0)) (list (list 5 15 1 1 0) (om-make-color 0 0 0)) (list (list 5 15 2) (om-make-color 0 0 0)) (list (list 5 15 2 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 16 0 0) (om-make-color 0 0 0)) (list (list 5 16 1) (om-make-color 0 0 0)) (list (list 5 16 1 0) (om-make-color 0 0 0)) (list (list 5 16 1 0 0) (om-make-color 0 0 0)) (list (list 5 16 1 1) (om-make-color 0 0 0)) (list (list 5 16 1 1 0) (om-make-color 0 0 0)) (list (list 5 16 2) (om-make-color 0 0 0)) (list (list 5 16 2 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 5 17 0 0) (om-make-color 0 0 0)) (list (list 5 18) (om-make-color 0 0 0)) (list (list 5 18 0) (om-make-color 0 0 0)) (list (list 5 18 0 0) (om-make-color 0 0 0)) (list (list 5 18 1) (om-make-color 0 0 0)) (list (list 5 18 1 0) (om-make-color 0 0 0)) (list (list 5 19) (om-make-color 0 0 0)) (list (list 5 19 0) (om-make-color 0 0 0)) (list (list 5 19 0 0) (om-make-color 0 0 0)) (list (list 5 19 1) (om-make-color 0 0 0)) (list (list 5 19 1 0) (om-make-color 0 0 0)) (list (list 5 19 1 0 0) (om-make-color 0 0 0)) (list (list 5 19 1 1) (om-make-color 0 0 0)) (list (list 5 19 1 1 0) (om-make-color 0 0 0)) (list (list 5 19 2) (om-make-color 0 0 0)) (list (list 5 19 2 0) (om-make-color 0 0 0)) (list (list 5 20) (om-make-color 0 0 0)) (list (list 5 20 0) (om-make-color 0 0 0)) (list (list 5 20 0 0) (om-make-color 0 0 0)) (list (list 5 20 0 0 0) (om-make-color 0 0 0)) (list (list 5 20 0 1) (om-make-color 0 0 0)) (list (list 5 20 0 1 0) (om-make-color 0 0 0)) (list (list 5 20 1) (om-make-color 0 0 0)) (list (list 5 20 1 0) (om-make-color 0 0 0)) (list (list 5 20 2) (om-make-color 0 0 0)) (list (list 5 20 2 0) (om-make-color 0 0 0)) (list (list 5 20 2 0 0) (om-make-color 0 0 0)) (list (list 5 20 2 1) (om-make-color 0 0 0)) (list (list 5 20 2 1 0) (om-make-color 0 0 0)) (list (list 5 21) (om-make-color 0 0 0)) (list (list 5 21 0) (om-make-color 0 0 0)) (list (list 5 21 0 0) (om-make-color 0 0 0)) (list (list 5 21 1) (om-make-color 0 0 0)) (list (list 5 21 1 0) (om-make-color 0 0 0)) (list (list 5 22) (om-make-color 0 0 0)) (list (list 5 22 0) (om-make-color 0 0 0)) (list (list 5 22 0 0) (om-make-color 0 0 0)) (list (list 5 22 1) (om-make-color 0 0 0)) (list (list 5 22 1 0) (om-make-color 0 0 0)) (list (list 5 23) (om-make-color 0 0 0)) (list (list 5 23 0) (om-make-color 0 0 0)) (list (list 5 23 0 0) (om-make-color 0 0 0)) (list (list 5 23 1) (om-make-color 0 0 0)) (list (list 5 23 1 0) (om-make-color 0 0 0)) (list (list 5 23 1 0 0) (om-make-color 0 0 0)) (list (list 5 23 1 1) (om-make-color 0 0 0)) (list (list 5 23 1 1 0) (om-make-color 0 0 0)) (list (list 5 24) (om-make-color 0 0 0)) (list (list 5 24 0) (om-make-color 0 0 0)) (list (list 5 24 0 0) (om-make-color 0 0 0)) (list (list 5 24 1) (om-make-color 0 0 0)) (list (list 5 24 1 0) (om-make-color 0 0 0)) (list (list 5 24 1 0 0) (om-make-color 0 0 0)) (list (list 5 24 1 1) (om-make-color 0 0 0)) (list (list 5 24 1 1 0) (om-make-color 0 0 0)) (list (list 5 24 2) (om-make-color 0 0 0)) (list (list 5 24 2 0) (om-make-color 0 0 0)) (list (list 5 25) (om-make-color 0 0 0)) (list (list 5 25 0) (om-make-color 0 0 0)) (list (list 5 25 0 0) (om-make-color 0 0 0)) (list (list 5 25 1) (om-make-color 0 0 0)) (list (list 5 25 1 0) (om-make-color 0 0 0)) (list (list 5 25 1 0 0) (om-make-color 0 0 0)) (list (list 5 25 1 1) (om-make-color 0 0 0)) (list (list 5 25 1 1 0) (om-make-color 0 0 0)) (list (list 5 25 2) (om-make-color 0 0 0)) (list (list 5 25 2 0) (om-make-color 0 0 0)) (list (list 5 26) (om-make-color 0 0 0)) (list (list 5 26 0) (om-make-color 0 0 0)) (list (list 5 26 0 0) (om-make-color 0 0 0)) (list (list 5 27) (om-make-color 0 0 0)) (list (list 5 27 0) (om-make-color 0 0 0)) (list (list 5 27 0 0) (om-make-color 0 0 0)) (list (list 5 27 1) (om-make-color 0 0 0)) (list (list 5 27 1 0) (om-make-color 0 0 0)) (list (list 5 28) (om-make-color 0 0 0)) (list (list 5 28 0) (om-make-color 0 0 0)) (list (list 5 28 0 0) (om-make-color 0 0 0)) (list (list 5 28 1) (om-make-color 0 0 0)) (list (list 5 28 1 0) (om-make-color 0 0 0)) (list (list 5 28 1 0 0) (om-make-color 0 0 0)) (list (list 5 28 1 1) (om-make-color 0 0 0)) (list (list 5 28 1 1 0) (om-make-color 0 0 0)) (list (list 5 28 2) (om-make-color 0 0 0)) (list (list 5 28 2 0) (om-make-color 0 0 0)) (list (list 5 29) (om-make-color 0 0 0)) (list (list 5 29 0) (om-make-color 0 0 0)) (list (list 5 29 0 0) (om-make-color 0 0 0)) (list (list 5 29 0 0 0) (om-make-color 0 0 0)) (list (list 5 29 0 1) (om-make-color 0 0 0)) (list (list 5 29 0 1 0) (om-make-color 0 0 0)) (list (list 5 29 1) (om-make-color 0 0 0)) (list (list 5 29 1 0) (om-make-color 0 0 0)) (list (list 5 29 2) (om-make-color 0 0 0)) (list (list 5 29 2 0) (om-make-color 0 0 0)) (list (list 5 29 2 0 0) (om-make-color 0 0 0)) (list (list 5 29 2 1) (om-make-color 0 0 0)) (list (list 5 29 2 1 0) (om-make-color 0 0 0)) (list (list 5 30) (om-make-color 0 0 0)) (list (list 5 30 0) (om-make-color 0 0 0)) (list (list 5 30 0 0) (om-make-color 0 0 0)) (list (list 5 30 1) (om-make-color 0 0 0)) (list (list 5 30 1 0) (om-make-color 0 0 0)) (list (list 5 31) (om-make-color 0 0 0)) (list (list 5 31 0) (om-make-color 0 0 0)) (list (list 5 31 0 0) (om-make-color 0 0 0)) (list (list 5 31 1) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 1000 nil 1 1 1 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g) 24 2 't))) nil nil nil) (om-load-editor-box1 "POLY" 'poly '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "VOICES" (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(1 (((4 4) (1 1 1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 708 615) (om-make-point 130 65) (if (find-class 'poly nil) (let ((newobj (make-instance 'poly :voices (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(28 (((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(29 (((4 4) (-4)) ((4 4) (-2 (1 (-1 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (1.0 -1)) -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil (nil (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) nil) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(30 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-1 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (1.0 -1)) -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil (nil (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) ((0) ((0) nil) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(30 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-2 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(31 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(31 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) ((1 (-1 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (1.0 -1)) -3)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) ((nil (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) nil) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(33 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-2 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(34 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (1 3)) ((4 4) (1.0 3)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (-4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 2000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(34 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) ((1 (-1 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (1.0 -1)) -3)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) ((nil (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) nil) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(34 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-3 (1 (-1 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (1.0 -1)))))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil (nil (0))) ((0) ((0) (0))) ((0) ((0) (0))) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0)) ((0)) ((0) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0)) ((0)) ((0) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0)) ((0)) ((0) ((0) nil)))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(35 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-2 (1 (-1 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (2.0 (1 (1.0 1)) (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (3.0 (1 (1.0 1)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (1.0 -1)) -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil (nil (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) nil) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(36 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-2 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) (2.0 2)) ((4 4) (2.0 1 1)) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '((((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil) (nil (nil (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) nil) nil)) ((nil) (nil) (nil (nil (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) ((0) ((0) nil) nil)) ((nil) (nil) (nil (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)) ((nil) (nil) (nil) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil) (nil) (nil) ((nil (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) nil) nil)) ((nil) (nil) (nil) (nil) (nil) (nil (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) ((nil (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0)) ((0)) ((0)) ((0)) (((0) nil) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil (nil (0))) ((0) ((0) (0))) ((0) ((0) (0))) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0)) ((0)) ((0) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0)) ((0)) ((0) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) (((0) (0)) (0)) (((0) (0)) (0)) (((0) (0)) (0)) ((0)) ((0)) ((0)) ((0) ((0) nil))) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil (nil (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) (0)) ((0) ((0) (0)) ((0) (0))) ((0) ((0) (0))) ((0) ((0) (0))) ((0)) ((0)) ((0)) ((0)) ((0) ((0) nil) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0) (0) (0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 1 0 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 2 0 0) (om-make-color 0 0 0)) (list (list 0 2 1) (om-make-color 0 0 0)) (list (list 0 2 1 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 3 0 0) (om-make-color 0 0 0)) (list (list 0 3 1) (om-make-color 0 0 0)) (list (list 0 3 1 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 4 0 0) (om-make-color 0 0 0)) (list (list 0 4 1) (om-make-color 0 0 0)) (list (list 0 4 1 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 5 0 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 6 0 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 7 0 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 8 0 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 9 0 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 10 0 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 11 0 0) (om-make-color 0 0 0)) (list (list 0 11 1) (om-make-color 0 0 0)) (list (list 0 11 1 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 12 0 0) (om-make-color 0 0 0)) (list (list 0 12 1) (om-make-color 0 0 0)) (list (list 0 12 1 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 13 0 0) (om-make-color 0 0 0)) (list (list 0 13 1) (om-make-color 0 0 0)) (list (list 0 13 1 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 14 0 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 15 0 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 16 0 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 17 0 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 18 0 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 19 0 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 20 0 0) (om-make-color 0 0 0)) (list (list 0 20 1) (om-make-color 0 0 0)) (list (list 0 20 1 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 21 0 0) (om-make-color 0 0 0)) (list (list 0 21 1) (om-make-color 0 0 0)) (list (list 0 21 1 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 22 0 0) (om-make-color 0 0 0)) (list (list 0 22 1) (om-make-color 0 0 0)) (list (list 0 22 1 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 23 0 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 24 0 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 25 0 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 26 0 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 1) (om-make-color 0 0 0)) (list (list 1 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 1 1) (om-make-color 0 0 0)) (list (list 1 1 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 2) (om-make-color 0 0 0)) (list (list 1 1 2 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 2 0 0) (om-make-color 0 0 0)) (list (list 1 2 1) (om-make-color 0 0 0)) (list (list 1 2 1 0) (om-make-color 0 0 0)) (list (list 1 2 1 0 0) (om-make-color 0 0 0)) (list (list 1 2 1 1) (om-make-color 0 0 0)) (list (list 1 2 1 1 0) (om-make-color 0 0 0)) (list (list 1 2 2) (om-make-color 0 0 0)) (list (list 1 2 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 3 0 0) (om-make-color 0 0 0)) (list (list 1 3 1) (om-make-color 0 0 0)) (list (list 1 3 1 0) (om-make-color 0 0 0)) (list (list 1 3 1 0 0) (om-make-color 0 0 0)) (list (list 1 3 1 1) (om-make-color 0 0 0)) (list (list 1 3 1 1 0) (om-make-color 0 0 0)) (list (list 1 3 2) (om-make-color 0 0 0)) (list (list 1 3 2 0) (om-make-color 0 0 0)) (list (list 1 3 2 0 0) (om-make-color 0 0 0)) (list (list 1 3 2 1) (om-make-color 0 0 0)) (list (list 1 3 2 1 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 4 0 0) (om-make-color 0 0 0)) (list (list 1 4 1) (om-make-color 0 0 0)) (list (list 1 4 1 0) (om-make-color 0 0 0)) (list (list 1 4 1 0 0) (om-make-color 0 0 0)) (list (list 1 4 1 1) (om-make-color 0 0 0)) (list (list 1 4 1 1 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 5 0 0) (om-make-color 0 0 0)) (list (list 1 5 1) (om-make-color 0 0 0)) (list (list 1 5 1 0) (om-make-color 0 0 0)) (list (list 1 5 1 0 0) (om-make-color 0 0 0)) (list (list 1 5 1 1) (om-make-color 0 0 0)) (list (list 1 5 1 1 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 6 0 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 7 0 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 8 0 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 9 0 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 10 0 0) (om-make-color 0 0 0)) (list (list 1 10 1) (om-make-color 0 0 0)) (list (list 1 10 1 0) (om-make-color 0 0 0)) (list (list 1 10 1 0 0) (om-make-color 0 0 0)) (list (list 1 10 1 1) (om-make-color 0 0 0)) (list (list 1 10 1 1 0) (om-make-color 0 0 0)) (list (list 1 10 2) (om-make-color 0 0 0)) (list (list 1 10 2 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 11 0 0) (om-make-color 0 0 0)) (list (list 1 11 1) (om-make-color 0 0 0)) (list (list 1 11 1 0) (om-make-color 0 0 0)) (list (list 1 11 1 0 0) (om-make-color 0 0 0)) (list (list 1 11 1 1) (om-make-color 0 0 0)) (list (list 1 11 1 1 0) (om-make-color 0 0 0)) (list (list 1 11 2) (om-make-color 0 0 0)) (list (list 1 11 2 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 12 0 0) (om-make-color 0 0 0)) (list (list 1 12 1) (om-make-color 0 0 0)) (list (list 1 12 1 0) (om-make-color 0 0 0)) (list (list 1 12 1 0 0) (om-make-color 0 0 0)) (list (list 1 12 1 1) (om-make-color 0 0 0)) (list (list 1 12 1 1 0) (om-make-color 0 0 0)) (list (list 1 12 2) (om-make-color 0 0 0)) (list (list 1 12 2 0) (om-make-color 0 0 0)) (list (list 1 12 2 0 0) (om-make-color 0 0 0)) (list (list 1 12 2 1) (om-make-color 0 0 0)) (list (list 1 12 2 1 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 13 0 0) (om-make-color 0 0 0)) (list (list 1 13 1) (om-make-color 0 0 0)) (list (list 1 13 1 0) (om-make-color 0 0 0)) (list (list 1 13 1 0 0) (om-make-color 0 0 0)) (list (list 1 13 1 1) (om-make-color 0 0 0)) (list (list 1 13 1 1 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 14 0 0) (om-make-color 0 0 0)) (list (list 1 14 1) (om-make-color 0 0 0)) (list (list 1 14 1 0) (om-make-color 0 0 0)) (list (list 1 14 1 0 0) (om-make-color 0 0 0)) (list (list 1 14 1 1) (om-make-color 0 0 0)) (list (list 1 14 1 1 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 15 0 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 16 0 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 17 0 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 18 0 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 19 0 0) (om-make-color 0 0 0)) (list (list 1 19 1) (om-make-color 0 0 0)) (list (list 1 19 1 0) (om-make-color 0 0 0)) (list (list 1 19 1 0 0) (om-make-color 0 0 0)) (list (list 1 19 1 1) (om-make-color 0 0 0)) (list (list 1 19 1 1 0) (om-make-color 0 0 0)) (list (list 1 19 2) (om-make-color 0 0 0)) (list (list 1 19 2 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 20 0 0) (om-make-color 0 0 0)) (list (list 1 20 1) (om-make-color 0 0 0)) (list (list 1 20 1 0) (om-make-color 0 0 0)) (list (list 1 20 1 0 0) (om-make-color 0 0 0)) (list (list 1 20 1 1) (om-make-color 0 0 0)) (list (list 1 20 1 1 0) (om-make-color 0 0 0)) (list (list 1 20 2) (om-make-color 0 0 0)) (list (list 1 20 2 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 21 0 0) (om-make-color 0 0 0)) (list (list 1 21 1) (om-make-color 0 0 0)) (list (list 1 21 1 0) (om-make-color 0 0 0)) (list (list 1 21 1 0 0) (om-make-color 0 0 0)) (list (list 1 21 1 1) (om-make-color 0 0 0)) (list (list 1 21 1 1 0) (om-make-color 0 0 0)) (list (list 1 21 2) (om-make-color 0 0 0)) (list (list 1 21 2 0) (om-make-color 0 0 0)) (list (list 1 21 2 0 0) (om-make-color 0 0 0)) (list (list 1 21 2 1) (om-make-color 0 0 0)) (list (list 1 21 2 1 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 22 0 0) (om-make-color 0 0 0)) (list (list 1 22 1) (om-make-color 0 0 0)) (list (list 1 22 1 0) (om-make-color 0 0 0)) (list (list 1 22 1 0 0) (om-make-color 0 0 0)) (list (list 1 22 1 1) (om-make-color 0 0 0)) (list (list 1 22 1 1 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 23 0 0) (om-make-color 0 0 0)) (list (list 1 23 1) (om-make-color 0 0 0)) (list (list 1 23 1 0) (om-make-color 0 0 0)) (list (list 1 23 1 0 0) (om-make-color 0 0 0)) (list (list 1 23 1 1) (om-make-color 0 0 0)) (list (list 1 23 1 1 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 24 0 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 25 0 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 26 0 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 27 0 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 1 28 0 0) (om-make-color 0 0 0)) (list (list 1 28 1) (om-make-color 0 0 0)) (list (list 1 28 1 0) (om-make-color 0 0 0)) (list (list 1 28 1 0 0) (om-make-color 0 0 0)) (list (list 1 28 1 1) (om-make-color 0 0 0)) (list (list 1 28 2) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 2 1) (om-make-color 0 0 0)) (list (list 2 2 1 0) (om-make-color 0 0 0)) (list (list 2 2 1 1) (om-make-color 0 0 0)) (list (list 2 2 1 1 0) (om-make-color 0 0 0)) (list (list 2 2 2) (om-make-color 0 0 0)) (list (list 2 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 3 0 0) (om-make-color 0 0 0)) (list (list 2 3 1) (om-make-color 0 0 0)) (list (list 2 3 1 0) (om-make-color 0 0 0)) (list (list 2 3 1 0 0) (om-make-color 0 0 0)) (list (list 2 3 1 1) (om-make-color 0 0 0)) (list (list 2 3 1 1 0) (om-make-color 0 0 0)) (list (list 2 3 2) (om-make-color 0 0 0)) (list (list 2 3 2 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 4 0 0) (om-make-color 0 0 0)) (list (list 2 4 1) (om-make-color 0 0 0)) (list (list 2 4 1 0) (om-make-color 0 0 0)) (list (list 2 4 1 0 0) (om-make-color 0 0 0)) (list (list 2 4 1 1) (om-make-color 0 0 0)) (list (list 2 4 1 1 0) (om-make-color 0 0 0)) (list (list 2 4 2) (om-make-color 0 0 0)) (list (list 2 4 2 0) (om-make-color 0 0 0)) (list (list 2 4 2 0 0) (om-make-color 0 0 0)) (list (list 2 4 2 1) (om-make-color 0 0 0)) (list (list 2 4 2 1 0) (om-make-color 0 0 0)) (list (list 2 4 3) (om-make-color 0 0 0)) (list (list 2 4 3 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 5 0 0) (om-make-color 0 0 0)) (list (list 2 5 1) (om-make-color 0 0 0)) (list (list 2 5 1 0) (om-make-color 0 0 0)) (list (list 2 5 1 0 0) (om-make-color 0 0 0)) (list (list 2 5 1 1) (om-make-color 0 0 0)) (list (list 2 5 1 1 0) (om-make-color 0 0 0)) (list (list 2 5 2) (om-make-color 0 0 0)) (list (list 2 5 2 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 6 0 0) (om-make-color 0 0 0)) (list (list 2 6 1) (om-make-color 0 0 0)) (list (list 2 6 1 0) (om-make-color 0 0 0)) (list (list 2 6 1 0 0) (om-make-color 0 0 0)) (list (list 2 6 1 1) (om-make-color 0 0 0)) (list (list 2 6 1 1 0) (om-make-color 0 0 0)) (list (list 2 6 2) (om-make-color 0 0 0)) (list (list 2 6 2 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 7 0 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 8 0 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 9 0 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 10 0 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 11 0 0) (om-make-color 0 0 0)) (list (list 2 11 1) (om-make-color 0 0 0)) (list (list 2 11 1 0) (om-make-color 0 0 0)) (list (list 2 11 1 0 0) (om-make-color 0 0 0)) (list (list 2 11 1 1) (om-make-color 0 0 0)) (list (list 2 11 1 1 0) (om-make-color 0 0 0)) (list (list 2 11 2) (om-make-color 0 0 0)) (list (list 2 11 2 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 12 0 0) (om-make-color 0 0 0)) (list (list 2 12 1) (om-make-color 0 0 0)) (list (list 2 12 1 0) (om-make-color 0 0 0)) (list (list 2 12 1 0 0) (om-make-color 0 0 0)) (list (list 2 12 1 1) (om-make-color 0 0 0)) (list (list 2 12 1 1 0) (om-make-color 0 0 0)) (list (list 2 12 2) (om-make-color 0 0 0)) (list (list 2 12 2 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 13 0 0) (om-make-color 0 0 0)) (list (list 2 13 1) (om-make-color 0 0 0)) (list (list 2 13 1 0) (om-make-color 0 0 0)) (list (list 2 13 1 0 0) (om-make-color 0 0 0)) (list (list 2 13 1 1) (om-make-color 0 0 0)) (list (list 2 13 1 1 0) (om-make-color 0 0 0)) (list (list 2 13 2) (om-make-color 0 0 0)) (list (list 2 13 2 0) (om-make-color 0 0 0)) (list (list 2 13 2 0 0) (om-make-color 0 0 0)) (list (list 2 13 2 1) (om-make-color 0 0 0)) (list (list 2 13 2 1 0) (om-make-color 0 0 0)) (list (list 2 13 3) (om-make-color 0 0 0)) (list (list 2 13 3 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 14 0 0) (om-make-color 0 0 0)) (list (list 2 14 1) (om-make-color 0 0 0)) (list (list 2 14 1 0) (om-make-color 0 0 0)) (list (list 2 14 1 0 0) (om-make-color 0 0 0)) (list (list 2 14 1 1) (om-make-color 0 0 0)) (list (list 2 14 1 1 0) (om-make-color 0 0 0)) (list (list 2 14 2) (om-make-color 0 0 0)) (list (list 2 14 2 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 15 0 0) (om-make-color 0 0 0)) (list (list 2 15 1) (om-make-color 0 0 0)) (list (list 2 15 1 0) (om-make-color 0 0 0)) (list (list 2 15 1 0 0) (om-make-color 0 0 0)) (list (list 2 15 1 1) (om-make-color 0 0 0)) (list (list 2 15 1 1 0) (om-make-color 0 0 0)) (list (list 2 15 2) (om-make-color 0 0 0)) (list (list 2 15 2 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 16 0 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 17 0 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 18 0 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 19 0 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 20 0 0) (om-make-color 0 0 0)) (list (list 2 20 1) (om-make-color 0 0 0)) (list (list 2 20 1 0) (om-make-color 0 0 0)) (list (list 2 20 1 0 0) (om-make-color 0 0 0)) (list (list 2 20 1 1) (om-make-color 0 0 0)) (list (list 2 20 1 1 0) (om-make-color 0 0 0)) (list (list 2 20 2) (om-make-color 0 0 0)) (list (list 2 20 2 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 21 0 0) (om-make-color 0 0 0)) (list (list 2 21 1) (om-make-color 0 0 0)) (list (list 2 21 1 0) (om-make-color 0 0 0)) (list (list 2 21 1 0 0) (om-make-color 0 0 0)) (list (list 2 21 1 1) (om-make-color 0 0 0)) (list (list 2 21 1 1 0) (om-make-color 0 0 0)) (list (list 2 21 2) (om-make-color 0 0 0)) (list (list 2 21 2 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 22 0 0) (om-make-color 0 0 0)) (list (list 2 22 1) (om-make-color 0 0 0)) (list (list 2 22 1 0) (om-make-color 0 0 0)) (list (list 2 22 1 0 0) (om-make-color 0 0 0)) (list (list 2 22 1 1) (om-make-color 0 0 0)) (list (list 2 22 1 1 0) (om-make-color 0 0 0)) (list (list 2 22 2) (om-make-color 0 0 0)) (list (list 2 22 2 0) (om-make-color 0 0 0)) (list (list 2 22 2 0 0) (om-make-color 0 0 0)) (list (list 2 22 2 1) (om-make-color 0 0 0)) (list (list 2 22 2 1 0) (om-make-color 0 0 0)) (list (list 2 22 3) (om-make-color 0 0 0)) (list (list 2 22 3 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 23 0 0) (om-make-color 0 0 0)) (list (list 2 23 1) (om-make-color 0 0 0)) (list (list 2 23 1 0) (om-make-color 0 0 0)) (list (list 2 23 1 0 0) (om-make-color 0 0 0)) (list (list 2 23 1 1) (om-make-color 0 0 0)) (list (list 2 23 1 1 0) (om-make-color 0 0 0)) (list (list 2 23 2) (om-make-color 0 0 0)) (list (list 2 23 2 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 24 0 0) (om-make-color 0 0 0)) (list (list 2 24 1) (om-make-color 0 0 0)) (list (list 2 24 1 0) (om-make-color 0 0 0)) (list (list 2 24 1 0 0) (om-make-color 0 0 0)) (list (list 2 24 1 1) (om-make-color 0 0 0)) (list (list 2 24 1 1 0) (om-make-color 0 0 0)) (list (list 2 24 2) (om-make-color 0 0 0)) (list (list 2 24 2 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 25 0 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 26 0 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 27 0 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 28 0 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 2 29 0 0) (om-make-color 0 0 0)) (list (list 2 29 1) (om-make-color 0 0 0)) (list (list 2 29 1 0) (om-make-color 0 0 0)) (list (list 2 29 1 0 0) (om-make-color 0 0 0)) (list (list 2 29 1 1) (om-make-color 0 0 0)) (list (list 2 29 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 2 1) (om-make-color 0 0 0)) (list (list 3 2 1 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 3 0 0) (om-make-color 0 0 0)) (list (list 3 3 1) (om-make-color 0 0 0)) (list (list 3 3 1 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 4 0 0) (om-make-color 0 0 0)) (list (list 3 4 1) (om-make-color 0 0 0)) (list (list 3 4 1 0) (om-make-color 0 0 0)) (list (list 3 4 2) (om-make-color 0 0 0)) (list (list 3 4 2 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 5 0 0) (om-make-color 0 0 0)) (list (list 3 5 1) (om-make-color 0 0 0)) (list (list 3 5 1 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 6 0 0) (om-make-color 0 0 0)) (list (list 3 6 1) (om-make-color 0 0 0)) (list (list 3 6 1 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 7 0 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 8 0 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 9 0 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 10 0 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 11 0 0) (om-make-color 0 0 0)) (list (list 3 11 1) (om-make-color 0 0 0)) (list (list 3 11 1 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 12 0 0) (om-make-color 0 0 0)) (list (list 3 12 1) (om-make-color 0 0 0)) (list (list 3 12 1 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 13 0 0) (om-make-color 0 0 0)) (list (list 3 13 1) (om-make-color 0 0 0)) (list (list 3 13 1 0) (om-make-color 0 0 0)) (list (list 3 13 2) (om-make-color 0 0 0)) (list (list 3 13 2 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 14 0 0) (om-make-color 0 0 0)) (list (list 3 14 1) (om-make-color 0 0 0)) (list (list 3 14 1 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 15 0 0) (om-make-color 0 0 0)) (list (list 3 15 1) (om-make-color 0 0 0)) (list (list 3 15 1 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 16 0 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 3 17 0 0) (om-make-color 0 0 0)) (list (list 3 18) (om-make-color 0 0 0)) (list (list 3 18 0) (om-make-color 0 0 0)) (list (list 3 18 0 0) (om-make-color 0 0 0)) (list (list 3 19) (om-make-color 0 0 0)) (list (list 3 19 0) (om-make-color 0 0 0)) (list (list 3 19 0 0) (om-make-color 0 0 0)) (list (list 3 20) (om-make-color 0 0 0)) (list (list 3 20 0) (om-make-color 0 0 0)) (list (list 3 20 0 0) (om-make-color 0 0 0)) (list (list 3 20 1) (om-make-color 0 0 0)) (list (list 3 20 1 0) (om-make-color 0 0 0)) (list (list 3 21) (om-make-color 0 0 0)) (list (list 3 21 0) (om-make-color 0 0 0)) (list (list 3 21 0 0) (om-make-color 0 0 0)) (list (list 3 21 1) (om-make-color 0 0 0)) (list (list 3 21 1 0) (om-make-color 0 0 0)) (list (list 3 22) (om-make-color 0 0 0)) (list (list 3 22 0) (om-make-color 0 0 0)) (list (list 3 22 0 0) (om-make-color 0 0 0)) (list (list 3 22 1) (om-make-color 0 0 0)) (list (list 3 22 1 0) (om-make-color 0 0 0)) (list (list 3 22 2) (om-make-color 0 0 0)) (list (list 3 22 2 0) (om-make-color 0 0 0)) (list (list 3 23) (om-make-color 0 0 0)) (list (list 3 23 0) (om-make-color 0 0 0)) (list (list 3 23 0 0) (om-make-color 0 0 0)) (list (list 3 23 1) (om-make-color 0 0 0)) (list (list 3 23 1 0) (om-make-color 0 0 0)) (list (list 3 24) (om-make-color 0 0 0)) (list (list 3 24 0) (om-make-color 0 0 0)) (list (list 3 24 0 0) (om-make-color 0 0 0)) (list (list 3 24 1) (om-make-color 0 0 0)) (list (list 3 24 1 0) (om-make-color 0 0 0)) (list (list 3 25) (om-make-color 0 0 0)) (list (list 3 25 0) (om-make-color 0 0 0)) (list (list 3 25 0 0) (om-make-color 0 0 0)) (list (list 3 26) (om-make-color 0 0 0)) (list (list 3 26 0) (om-make-color 0 0 0)) (list (list 3 26 0 0) (om-make-color 0 0 0)) (list (list 3 27) (om-make-color 0 0 0)) (list (list 3 27 0) (om-make-color 0 0 0)) (list (list 3 27 0 0) (om-make-color 0 0 0)) (list (list 3 28) (om-make-color 0 0 0)) (list (list 3 28 0) (om-make-color 0 0 0)) (list (list 3 28 0 0) (om-make-color 0 0 0)) (list (list 3 29) (om-make-color 0 0 0)) (list (list 3 29 0) (om-make-color 0 0 0)) (list (list 3 29 0 0) (om-make-color 0 0 0)) (list (list 3 29 1) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 3 0 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 4 0 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 5 0 0) (om-make-color 0 0 0)) (list (list 4 5 1) (om-make-color 0 0 0)) (list (list 4 5 1 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 6 0 0) (om-make-color 0 0 0)) (list (list 4 6 1) (om-make-color 0 0 0)) (list (list 4 6 1 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 7 0 0) (om-make-color 0 0 0)) (list (list 4 7 1) (om-make-color 0 0 0)) (list (list 4 7 1 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 8 0 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 9 0 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 10 0 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 11 0 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 12 0 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 13 0 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 14 0 0) (om-make-color 0 0 0)) (list (list 4 14 1) (om-make-color 0 0 0)) (list (list 4 14 1 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 15 0 0) (om-make-color 0 0 0)) (list (list 4 15 1) (om-make-color 0 0 0)) (list (list 4 15 1 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 16 0 0) (om-make-color 0 0 0)) (list (list 4 16 1) (om-make-color 0 0 0)) (list (list 4 16 1 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 4 17 0 0) (om-make-color 0 0 0)) (list (list 4 18) (om-make-color 0 0 0)) (list (list 4 18 0) (om-make-color 0 0 0)) (list (list 4 18 0 0) (om-make-color 0 0 0)) (list (list 4 19) (om-make-color 0 0 0)) (list (list 4 19 0) (om-make-color 0 0 0)) (list (list 4 19 0 0) (om-make-color 0 0 0)) (list (list 4 20) (om-make-color 0 0 0)) (list (list 4 20 0) (om-make-color 0 0 0)) (list (list 4 20 0 0) (om-make-color 0 0 0)) (list (list 4 21) (om-make-color 0 0 0)) (list (list 4 21 0) (om-make-color 0 0 0)) (list (list 4 21 0 0) (om-make-color 0 0 0)) (list (list 4 22) (om-make-color 0 0 0)) (list (list 4 22 0) (om-make-color 0 0 0)) (list (list 4 22 0 0) (om-make-color 0 0 0)) (list (list 4 23) (om-make-color 0 0 0)) (list (list 4 23 0) (om-make-color 0 0 0)) (list (list 4 23 0 0) (om-make-color 0 0 0)) (list (list 4 23 1) (om-make-color 0 0 0)) (list (list 4 23 1 0) (om-make-color 0 0 0)) (list (list 4 24) (om-make-color 0 0 0)) (list (list 4 24 0) (om-make-color 0 0 0)) (list (list 4 24 0 0) (om-make-color 0 0 0)) (list (list 4 24 1) (om-make-color 0 0 0)) (list (list 4 24 1 0) (om-make-color 0 0 0)) (list (list 4 25) (om-make-color 0 0 0)) (list (list 4 25 0) (om-make-color 0 0 0)) (list (list 4 25 0 0) (om-make-color 0 0 0)) (list (list 4 25 1) (om-make-color 0 0 0)) (list (list 4 25 1 0) (om-make-color 0 0 0)) (list (list 4 26) (om-make-color 0 0 0)) (list (list 4 26 0) (om-make-color 0 0 0)) (list (list 4 26 0 0) (om-make-color 0 0 0)) (list (list 4 27) (om-make-color 0 0 0)) (list (list 4 27 0) (om-make-color 0 0 0)) (list (list 4 27 0 0) (om-make-color 0 0 0)) (list (list 4 28) (om-make-color 0 0 0)) (list (list 4 28 0) (om-make-color 0 0 0)) (list (list 4 28 0 0) (om-make-color 0 0 0)) (list (list 4 29) (om-make-color 0 0 0)) (list (list 4 29 0) (om-make-color 0 0 0)) (list (list 4 29 0 0) (om-make-color 0 0 0)) (list (list 4 30) (om-make-color 0 0 0)) (list (list 4 30 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 3 0 0) (om-make-color 0 0 0)) (list (list 5 3 0 1) (om-make-color 0 0 0)) (list (list 5 3 0 1 0) (om-make-color 0 0 0)) (list (list 5 3 1) (om-make-color 0 0 0)) (list (list 5 3 1 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 4 0 0) (om-make-color 0 0 0)) (list (list 5 4 0 0 0) (om-make-color 0 0 0)) (list (list 5 4 0 1) (om-make-color 0 0 0)) (list (list 5 4 0 1 0) (om-make-color 0 0 0)) (list (list 5 4 1) (om-make-color 0 0 0)) (list (list 5 4 1 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 5 0 0) (om-make-color 0 0 0)) (list (list 5 5 0 0 0) (om-make-color 0 0 0)) (list (list 5 5 0 1) (om-make-color 0 0 0)) (list (list 5 5 0 1 0) (om-make-color 0 0 0)) (list (list 5 5 1) (om-make-color 0 0 0)) (list (list 5 5 1 0) (om-make-color 0 0 0)) (list (list 5 5 1 0 0) (om-make-color 0 0 0)) (list (list 5 5 1 1) (om-make-color 0 0 0)) (list (list 5 5 1 1 0) (om-make-color 0 0 0)) (list (list 5 5 2) (om-make-color 0 0 0)) (list (list 5 5 2 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 6 0 0) (om-make-color 0 0 0)) (list (list 5 6 1) (om-make-color 0 0 0)) (list (list 5 6 1 0) (om-make-color 0 0 0)) (list (list 5 6 1 0 0) (om-make-color 0 0 0)) (list (list 5 6 1 1) (om-make-color 0 0 0)) (list (list 5 6 1 1 0) (om-make-color 0 0 0)) (list (list 5 6 2) (om-make-color 0 0 0)) (list (list 5 6 2 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 7 0 0) (om-make-color 0 0 0)) (list (list 5 7 1) (om-make-color 0 0 0)) (list (list 5 7 1 0) (om-make-color 0 0 0)) (list (list 5 7 1 0 0) (om-make-color 0 0 0)) (list (list 5 7 1 1) (om-make-color 0 0 0)) (list (list 5 7 1 1 0) (om-make-color 0 0 0)) (list (list 5 7 2) (om-make-color 0 0 0)) (list (list 5 7 2 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 8 0 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 9 0 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 10 0 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 11 0 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 12 0 0) (om-make-color 0 0 0)) (list (list 5 12 0 0 0) (om-make-color 0 0 0)) (list (list 5 12 0 1) (om-make-color 0 0 0)) (list (list 5 12 0 1 0) (om-make-color 0 0 0)) (list (list 5 12 1) (om-make-color 0 0 0)) (list (list 5 12 1 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 13 0 0) (om-make-color 0 0 0)) (list (list 5 13 0 0 0) (om-make-color 0 0 0)) (list (list 5 13 0 1) (om-make-color 0 0 0)) (list (list 5 13 0 1 0) (om-make-color 0 0 0)) (list (list 5 13 1) (om-make-color 0 0 0)) (list (list 5 13 1 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 14 0 0) (om-make-color 0 0 0)) (list (list 5 14 0 0 0) (om-make-color 0 0 0)) (list (list 5 14 0 1) (om-make-color 0 0 0)) (list (list 5 14 0 1 0) (om-make-color 0 0 0)) (list (list 5 14 1) (om-make-color 0 0 0)) (list (list 5 14 1 0) (om-make-color 0 0 0)) (list (list 5 14 1 0 0) (om-make-color 0 0 0)) (list (list 5 14 1 1) (om-make-color 0 0 0)) (list (list 5 14 1 1 0) (om-make-color 0 0 0)) (list (list 5 14 2) (om-make-color 0 0 0)) (list (list 5 14 2 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 15 0 0) (om-make-color 0 0 0)) (list (list 5 15 1) (om-make-color 0 0 0)) (list (list 5 15 1 0) (om-make-color 0 0 0)) (list (list 5 15 1 0 0) (om-make-color 0 0 0)) (list (list 5 15 1 1) (om-make-color 0 0 0)) (list (list 5 15 1 1 0) (om-make-color 0 0 0)) (list (list 5 15 2) (om-make-color 0 0 0)) (list (list 5 15 2 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 16 0 0) (om-make-color 0 0 0)) (list (list 5 16 1) (om-make-color 0 0 0)) (list (list 5 16 1 0) (om-make-color 0 0 0)) (list (list 5 16 1 0 0) (om-make-color 0 0 0)) (list (list 5 16 1 1) (om-make-color 0 0 0)) (list (list 5 16 1 1 0) (om-make-color 0 0 0)) (list (list 5 16 2) (om-make-color 0 0 0)) (list (list 5 16 2 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 5 17 0 0) (om-make-color 0 0 0)) (list (list 5 18) (om-make-color 0 0 0)) (list (list 5 18 0) (om-make-color 0 0 0)) (list (list 5 18 0 0) (om-make-color 0 0 0)) (list (list 5 19) (om-make-color 0 0 0)) (list (list 5 19 0) (om-make-color 0 0 0)) (list (list 5 19 0 0) (om-make-color 0 0 0)) (list (list 5 20) (om-make-color 0 0 0)) (list (list 5 20 0) (om-make-color 0 0 0)) (list (list 5 20 0 0) (om-make-color 0 0 0)) (list (list 5 21) (om-make-color 0 0 0)) (list (list 5 21 0) (om-make-color 0 0 0)) (list (list 5 21 0 0) (om-make-color 0 0 0)) (list (list 5 21 0 0 0) (om-make-color 0 0 0)) (list (list 5 21 0 1) (om-make-color 0 0 0)) (list (list 5 21 0 1 0) (om-make-color 0 0 0)) (list (list 5 21 1) (om-make-color 0 0 0)) (list (list 5 21 1 0) (om-make-color 0 0 0)) (list (list 5 22) (om-make-color 0 0 0)) (list (list 5 22 0) (om-make-color 0 0 0)) (list (list 5 22 0 0) (om-make-color 0 0 0)) (list (list 5 22 0 0 0) (om-make-color 0 0 0)) (list (list 5 22 0 1) (om-make-color 0 0 0)) (list (list 5 22 0 1 0) (om-make-color 0 0 0)) (list (list 5 22 1) (om-make-color 0 0 0)) (list (list 5 22 1 0) (om-make-color 0 0 0)) (list (list 5 23) (om-make-color 0 0 0)) (list (list 5 23 0) (om-make-color 0 0 0)) (list (list 5 23 0 0) (om-make-color 0 0 0)) (list (list 5 23 0 0 0) (om-make-color 0 0 0)) (list (list 5 23 0 1) (om-make-color 0 0 0)) (list (list 5 23 0 1 0) (om-make-color 0 0 0)) (list (list 5 23 1) (om-make-color 0 0 0)) (list (list 5 23 1 0) (om-make-color 0 0 0)) (list (list 5 23 1 0 0) (om-make-color 0 0 0)) (list (list 5 23 1 1) (om-make-color 0 0 0)) (list (list 5 23 1 1 0) (om-make-color 0 0 0)) (list (list 5 23 2) (om-make-color 0 0 0)) (list (list 5 23 2 0) (om-make-color 0 0 0)) (list (list 5 24) (om-make-color 0 0 0)) (list (list 5 24 0) (om-make-color 0 0 0)) (list (list 5 24 0 0) (om-make-color 0 0 0)) (list (list 5 24 1) (om-make-color 0 0 0)) (list (list 5 24 1 0) (om-make-color 0 0 0)) (list (list 5 24 1 0 0) (om-make-color 0 0 0)) (list (list 5 24 1 1) (om-make-color 0 0 0)) (list (list 5 24 1 1 0) (om-make-color 0 0 0)) (list (list 5 24 2) (om-make-color 0 0 0)) (list (list 5 24 2 0) (om-make-color 0 0 0)) (list (list 5 25) (om-make-color 0 0 0)) (list (list 5 25 0) (om-make-color 0 0 0)) (list (list 5 25 0 0) (om-make-color 0 0 0)) (list (list 5 25 1) (om-make-color 0 0 0)) (list (list 5 25 1 0) (om-make-color 0 0 0)) (list (list 5 25 1 0 0) (om-make-color 0 0 0)) (list (list 5 25 1 1) (om-make-color 0 0 0)) (list (list 5 25 1 1 0) (om-make-color 0 0 0)) (list (list 5 25 2) (om-make-color 0 0 0)) (list (list 5 25 2 0) (om-make-color 0 0 0)) (list (list 5 26) (om-make-color 0 0 0)) (list (list 5 26 0) (om-make-color 0 0 0)) (list (list 5 26 0 0) (om-make-color 0 0 0)) (list (list 5 27) (om-make-color 0 0 0)) (list (list 5 27 0) (om-make-color 0 0 0)) (list (list 5 27 0 0) (om-make-color 0 0 0)) (list (list 5 28) (om-make-color 0 0 0)) (list (list 5 28 0) (om-make-color 0 0 0)) (list (list 5 28 0 0) (om-make-color 0 0 0)) (list (list 5 29) (om-make-color 0 0 0)) (list (list 5 29 0) (om-make-color 0 0 0)) (list (list 5 29 0 0) (om-make-color 0 0 0)) (list (list 5 30) (om-make-color 0 0 0)) (list (list 5 30 0) (om-make-color 0 0 0)) (list (list 5 30 0 0) (om-make-color 0 0 0)) (list (list 5 30 0 0 0) (om-make-color 0 0 0)) (list (list 5 30 0 1) (om-make-color 0 0 0)) (list (list 5 30 1) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 0 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 1 0) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 2 0) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 3 0) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 4 0) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 5 0) (om-make-color 0 0 0)) (list (list 6 5 1) (om-make-color 0 0 0)) (list (list 6 5 1 0) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 6 0) (om-make-color 0 0 0)) (list (list 6 6 0 0) (om-make-color 0 0 0)) (list (list 6 6 1) (om-make-color 0 0 0)) (list (list 6 6 1 0) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 7 0) (om-make-color 0 0 0)) (list (list 6 7 0 0) (om-make-color 0 0 0)) (list (list 6 7 1) (om-make-color 0 0 0)) (list (list 6 7 1 0) (om-make-color 0 0 0)) (list (list 6 7 2) (om-make-color 0 0 0)) (list (list 6 7 2 0) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 8 0) (om-make-color 0 0 0)) (list (list 6 8 0 0) (om-make-color 0 0 0)) (list (list 6 8 1) (om-make-color 0 0 0)) (list (list 6 8 1 0) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 6 9 0) (om-make-color 0 0 0)) (list (list 6 9 0 0) (om-make-color 0 0 0)) (list (list 6 9 1) (om-make-color 0 0 0)) (list (list 6 9 1 0) (om-make-color 0 0 0)) (list (list 6 10) (om-make-color 0 0 0)) (list (list 6 10 0) (om-make-color 0 0 0)) (list (list 6 10 0 0) (om-make-color 0 0 0)) (list (list 6 11) (om-make-color 0 0 0)) (list (list 6 11 0) (om-make-color 0 0 0)) (list (list 6 11 0 0) (om-make-color 0 0 0)) (list (list 6 12) (om-make-color 0 0 0)) (list (list 6 12 0) (om-make-color 0 0 0)) (list (list 6 12 0 0) (om-make-color 0 0 0)) (list (list 6 13) (om-make-color 0 0 0)) (list (list 6 13 0) (om-make-color 0 0 0)) (list (list 6 13 0 0) (om-make-color 0 0 0)) (list (list 6 14) (om-make-color 0 0 0)) (list (list 6 14 0) (om-make-color 0 0 0)) (list (list 6 14 0 0) (om-make-color 0 0 0)) (list (list 6 14 1) (om-make-color 0 0 0)) (list (list 6 14 1 0) (om-make-color 0 0 0)) (list (list 6 15) (om-make-color 0 0 0)) (list (list 6 15 0) (om-make-color 0 0 0)) (list (list 6 15 0 0) (om-make-color 0 0 0)) (list (list 6 15 1) (om-make-color 0 0 0)) (list (list 6 15 1 0) (om-make-color 0 0 0)) (list (list 6 16) (om-make-color 0 0 0)) (list (list 6 16 0) (om-make-color 0 0 0)) (list (list 6 16 0 0) (om-make-color 0 0 0)) (list (list 6 16 1) (om-make-color 0 0 0)) (list (list 6 16 1 0) (om-make-color 0 0 0)) (list (list 6 16 2) (om-make-color 0 0 0)) (list (list 6 16 2 0) (om-make-color 0 0 0)) (list (list 6 17) (om-make-color 0 0 0)) (list (list 6 17 0) (om-make-color 0 0 0)) (list (list 6 17 0 0) (om-make-color 0 0 0)) (list (list 6 17 1) (om-make-color 0 0 0)) (list (list 6 17 1 0) (om-make-color 0 0 0)) (list (list 6 18) (om-make-color 0 0 0)) (list (list 6 18 0) (om-make-color 0 0 0)) (list (list 6 18 0 0) (om-make-color 0 0 0)) (list (list 6 18 1) (om-make-color 0 0 0)) (list (list 6 18 1 0) (om-make-color 0 0 0)) (list (list 6 19) (om-make-color 0 0 0)) (list (list 6 19 0) (om-make-color 0 0 0)) (list (list 6 19 0 0) (om-make-color 0 0 0)) (list (list 6 20) (om-make-color 0 0 0)) (list (list 6 20 0) (om-make-color 0 0 0)) (list (list 6 20 0 0) (om-make-color 0 0 0)) (list (list 6 21) (om-make-color 0 0 0)) (list (list 6 21 0) (om-make-color 0 0 0)) (list (list 6 21 0 0) (om-make-color 0 0 0)) (list (list 6 22) (om-make-color 0 0 0)) (list (list 6 22 0) (om-make-color 0 0 0)) (list (list 6 22 0 0) (om-make-color 0 0 0)) (list (list 6 23) (om-make-color 0 0 0)) (list (list 6 23 0) (om-make-color 0 0 0)) (list (list 6 23 0 0) (om-make-color 0 0 0)) (list (list 6 23 1) (om-make-color 0 0 0)) (list (list 6 23 1 0) (om-make-color 0 0 0)) (list (list 6 24) (om-make-color 0 0 0)) (list (list 6 24 0) (om-make-color 0 0 0)) (list (list 6 24 0 0) (om-make-color 0 0 0)) (list (list 6 24 1) (om-make-color 0 0 0)) (list (list 6 24 1 0) (om-make-color 0 0 0)) (list (list 6 25) (om-make-color 0 0 0)) (list (list 6 25 0) (om-make-color 0 0 0)) (list (list 6 25 0 0) (om-make-color 0 0 0)) (list (list 6 25 1) (om-make-color 0 0 0)) (list (list 6 25 1 0) (om-make-color 0 0 0)) (list (list 6 25 2) (om-make-color 0 0 0)) (list (list 6 25 2 0) (om-make-color 0 0 0)) (list (list 6 26) (om-make-color 0 0 0)) (list (list 6 26 0) (om-make-color 0 0 0)) (list (list 6 26 0 0) (om-make-color 0 0 0)) (list (list 6 26 1) (om-make-color 0 0 0)) (list (list 6 26 1 0) (om-make-color 0 0 0)) (list (list 6 27) (om-make-color 0 0 0)) (list (list 6 27 0) (om-make-color 0 0 0)) (list (list 6 27 0 0) (om-make-color 0 0 0)) (list (list 6 27 1) (om-make-color 0 0 0)) (list (list 6 27 1 0) (om-make-color 0 0 0)) (list (list 6 28) (om-make-color 0 0 0)) (list (list 6 28 0) (om-make-color 0 0 0)) (list (list 6 28 0 0) (om-make-color 0 0 0)) (list (list 6 29) (om-make-color 0 0 0)) (list (list 6 29 0) (om-make-color 0 0 0)) (list (list 6 29 0 0) (om-make-color 0 0 0)) (list (list 6 30) (om-make-color 0 0 0)) (list (list 6 30 0) (om-make-color 0 0 0)) (list (list 6 30 0 0) (om-make-color 0 0 0)) (list (list 6 31) (om-make-color 0 0 0)) (list (list 6 31 0) (om-make-color 0 0 0)) (list (list 6 31 0 0) (om-make-color 0 0 0)) (list (list 6 32) (om-make-color 0 0 0)) (list (list 6 32 0) (om-make-color 0 0 0)) (list (list 6 32 0 0) (om-make-color 0 0 0)) (list (list 6 32 1) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 0 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 1 0) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 2 0) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 3 0) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 4 0) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 5 0) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 6 0) (om-make-color 0 0 0)) (list (list 7 6 0 0) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 7 0) (om-make-color 0 0 0)) (list (list 7 7 0 0) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 8 0) (om-make-color 0 0 0)) (list (list 7 8 0 0) (om-make-color 0 0 0)) (list (list 7 8 1) (om-make-color 0 0 0)) (list (list 7 8 1 0) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 7 9 0) (om-make-color 0 0 0)) (list (list 7 9 0 0) (om-make-color 0 0 0)) (list (list 7 9 1) (om-make-color 0 0 0)) (list (list 7 9 1 0) (om-make-color 0 0 0)) (list (list 7 10) (om-make-color 0 0 0)) (list (list 7 10 0) (om-make-color 0 0 0)) (list (list 7 10 0 0) (om-make-color 0 0 0)) (list (list 7 10 1) (om-make-color 0 0 0)) (list (list 7 10 1 0) (om-make-color 0 0 0)) (list (list 7 11) (om-make-color 0 0 0)) (list (list 7 11 0) (om-make-color 0 0 0)) (list (list 7 11 0 0) (om-make-color 0 0 0)) (list (list 7 12) (om-make-color 0 0 0)) (list (list 7 12 0) (om-make-color 0 0 0)) (list (list 7 12 0 0) (om-make-color 0 0 0)) (list (list 7 13) (om-make-color 0 0 0)) (list (list 7 13 0) (om-make-color 0 0 0)) (list (list 7 13 0 0) (om-make-color 0 0 0)) (list (list 7 14) (om-make-color 0 0 0)) (list (list 7 14 0) (om-make-color 0 0 0)) (list (list 7 14 0 0) (om-make-color 0 0 0)) (list (list 7 15) (om-make-color 0 0 0)) (list (list 7 15 0) (om-make-color 0 0 0)) (list (list 7 15 0 0) (om-make-color 0 0 0)) (list (list 7 16) (om-make-color 0 0 0)) (list (list 7 16 0) (om-make-color 0 0 0)) (list (list 7 16 0 0) (om-make-color 0 0 0)) (list (list 7 17) (om-make-color 0 0 0)) (list (list 7 17 0) (om-make-color 0 0 0)) (list (list 7 17 0 0) (om-make-color 0 0 0)) (list (list 7 17 1) (om-make-color 0 0 0)) (list (list 7 17 1 0) (om-make-color 0 0 0)) (list (list 7 18) (om-make-color 0 0 0)) (list (list 7 18 0) (om-make-color 0 0 0)) (list (list 7 18 0 0) (om-make-color 0 0 0)) (list (list 7 18 1) (om-make-color 0 0 0)) (list (list 7 18 1 0) (om-make-color 0 0 0)) (list (list 7 19) (om-make-color 0 0 0)) (list (list 7 19 0) (om-make-color 0 0 0)) (list (list 7 19 0 0) (om-make-color 0 0 0)) (list (list 7 19 1) (om-make-color 0 0 0)) (list (list 7 19 1 0) (om-make-color 0 0 0)) (list (list 7 20) (om-make-color 0 0 0)) (list (list 7 20 0) (om-make-color 0 0 0)) (list (list 7 20 0 0) (om-make-color 0 0 0)) (list (list 7 21) (om-make-color 0 0 0)) (list (list 7 21 0) (om-make-color 0 0 0)) (list (list 7 21 0 0) (om-make-color 0 0 0)) (list (list 7 22) (om-make-color 0 0 0)) (list (list 7 22 0) (om-make-color 0 0 0)) (list (list 7 22 0 0) (om-make-color 0 0 0)) (list (list 7 23) (om-make-color 0 0 0)) (list (list 7 23 0) (om-make-color 0 0 0)) (list (list 7 23 0 0) (om-make-color 0 0 0)) (list (list 7 24) (om-make-color 0 0 0)) (list (list 7 24 0) (om-make-color 0 0 0)) (list (list 7 24 0 0) (om-make-color 0 0 0)) (list (list 7 25) (om-make-color 0 0 0)) (list (list 7 25 0) (om-make-color 0 0 0)) (list (list 7 25 0 0) (om-make-color 0 0 0)) (list (list 7 26) (om-make-color 0 0 0)) (list (list 7 26 0) (om-make-color 0 0 0)) (list (list 7 26 0 0) (om-make-color 0 0 0)) (list (list 7 26 1) (om-make-color 0 0 0)) (list (list 7 26 1 0) (om-make-color 0 0 0)) (list (list 7 27) (om-make-color 0 0 0)) (list (list 7 27 0) (om-make-color 0 0 0)) (list (list 7 27 0 0) (om-make-color 0 0 0)) (list (list 7 27 1) (om-make-color 0 0 0)) (list (list 7 27 1 0) (om-make-color 0 0 0)) (list (list 7 28) (om-make-color 0 0 0)) (list (list 7 28 0) (om-make-color 0 0 0)) (list (list 7 28 0 0) (om-make-color 0 0 0)) (list (list 7 28 1) (om-make-color 0 0 0)) (list (list 7 28 1 0) (om-make-color 0 0 0)) (list (list 7 29) (om-make-color 0 0 0)) (list (list 7 29 0) (om-make-color 0 0 0)) (list (list 7 29 0 0) (om-make-color 0 0 0)) (list (list 7 30) (om-make-color 0 0 0)) (list (list 7 30 0) (om-make-color 0 0 0)) (list (list 7 30 0 0) (om-make-color 0 0 0)) (list (list 7 31) (om-make-color 0 0 0)) (list (list 7 31 0) (om-make-color 0 0 0)) (list (list 7 31 0 0) (om-make-color 0 0 0)) (list (list 7 32) (om-make-color 0 0 0)) (list (list 7 32 0) (om-make-color 0 0 0)) (list (list 7 32 0 0) (om-make-color 0 0 0)) (list (list 7 33) (om-make-color 0 0 0)) (list (list 7 33 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 0 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 1 0) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 2 0) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 3 0) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 4 0) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 5 0) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 6 0) (om-make-color 0 0 0)) (list (list 8 6 0 0) (om-make-color 0 0 0)) (list (list 8 6 0 1) (om-make-color 0 0 0)) (list (list 8 6 0 1 0) (om-make-color 0 0 0)) (list (list 8 6 1) (om-make-color 0 0 0)) (list (list 8 6 1 0) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 7 0) (om-make-color 0 0 0)) (list (list 8 7 0 0) (om-make-color 0 0 0)) (list (list 8 7 0 0 0) (om-make-color 0 0 0)) (list (list 8 7 0 1) (om-make-color 0 0 0)) (list (list 8 7 0 1 0) (om-make-color 0 0 0)) (list (list 8 7 1) (om-make-color 0 0 0)) (list (list 8 7 1 0) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 8 0) (om-make-color 0 0 0)) (list (list 8 8 0 0) (om-make-color 0 0 0)) (list (list 8 8 0 0 0) (om-make-color 0 0 0)) (list (list 8 8 0 1) (om-make-color 0 0 0)) (list (list 8 8 0 1 0) (om-make-color 0 0 0)) (list (list 8 8 1) (om-make-color 0 0 0)) (list (list 8 8 1 0) (om-make-color 0 0 0)) (list (list 8 8 1 0 0) (om-make-color 0 0 0)) (list (list 8 8 1 1) (om-make-color 0 0 0)) (list (list 8 8 1 1 0) (om-make-color 0 0 0)) (list (list 8 8 2) (om-make-color 0 0 0)) (list (list 8 8 2 0) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 8 9 0) (om-make-color 0 0 0)) (list (list 8 9 0 0) (om-make-color 0 0 0)) (list (list 8 9 1) (om-make-color 0 0 0)) (list (list 8 9 1 0) (om-make-color 0 0 0)) (list (list 8 9 1 0 0) (om-make-color 0 0 0)) (list (list 8 9 1 1) (om-make-color 0 0 0)) (list (list 8 9 1 1 0) (om-make-color 0 0 0)) (list (list 8 9 2) (om-make-color 0 0 0)) (list (list 8 9 2 0) (om-make-color 0 0 0)) (list (list 8 10) (om-make-color 0 0 0)) (list (list 8 10 0) (om-make-color 0 0 0)) (list (list 8 10 0 0) (om-make-color 0 0 0)) (list (list 8 10 1) (om-make-color 0 0 0)) (list (list 8 10 1 0) (om-make-color 0 0 0)) (list (list 8 10 1 0 0) (om-make-color 0 0 0)) (list (list 8 10 1 1) (om-make-color 0 0 0)) (list (list 8 10 1 1 0) (om-make-color 0 0 0)) (list (list 8 10 2) (om-make-color 0 0 0)) (list (list 8 10 2 0) (om-make-color 0 0 0)) (list (list 8 11) (om-make-color 0 0 0)) (list (list 8 11 0) (om-make-color 0 0 0)) (list (list 8 11 0 0) (om-make-color 0 0 0)) (list (list 8 12) (om-make-color 0 0 0)) (list (list 8 12 0) (om-make-color 0 0 0)) (list (list 8 12 0 0) (om-make-color 0 0 0)) (list (list 8 13) (om-make-color 0 0 0)) (list (list 8 13 0) (om-make-color 0 0 0)) (list (list 8 13 0 0) (om-make-color 0 0 0)) (list (list 8 14) (om-make-color 0 0 0)) (list (list 8 14 0) (om-make-color 0 0 0)) (list (list 8 14 0 0) (om-make-color 0 0 0)) (list (list 8 15) (om-make-color 0 0 0)) (list (list 8 15 0) (om-make-color 0 0 0)) (list (list 8 15 0 0) (om-make-color 0 0 0)) (list (list 8 15 0 0 0) (om-make-color 0 0 0)) (list (list 8 15 0 1) (om-make-color 0 0 0)) (list (list 8 15 0 1 0) (om-make-color 0 0 0)) (list (list 8 15 1) (om-make-color 0 0 0)) (list (list 8 15 1 0) (om-make-color 0 0 0)) (list (list 8 16) (om-make-color 0 0 0)) (list (list 8 16 0) (om-make-color 0 0 0)) (list (list 8 16 0 0) (om-make-color 0 0 0)) (list (list 8 16 0 0 0) (om-make-color 0 0 0)) (list (list 8 16 0 1) (om-make-color 0 0 0)) (list (list 8 16 0 1 0) (om-make-color 0 0 0)) (list (list 8 16 1) (om-make-color 0 0 0)) (list (list 8 16 1 0) (om-make-color 0 0 0)) (list (list 8 17) (om-make-color 0 0 0)) (list (list 8 17 0) (om-make-color 0 0 0)) (list (list 8 17 0 0) (om-make-color 0 0 0)) (list (list 8 17 0 0 0) (om-make-color 0 0 0)) (list (list 8 17 0 1) (om-make-color 0 0 0)) (list (list 8 17 0 1 0) (om-make-color 0 0 0)) (list (list 8 17 1) (om-make-color 0 0 0)) (list (list 8 17 1 0) (om-make-color 0 0 0)) (list (list 8 17 1 0 0) (om-make-color 0 0 0)) (list (list 8 17 1 1) (om-make-color 0 0 0)) (list (list 8 17 1 1 0) (om-make-color 0 0 0)) (list (list 8 17 2) (om-make-color 0 0 0)) (list (list 8 17 2 0) (om-make-color 0 0 0)) (list (list 8 18) (om-make-color 0 0 0)) (list (list 8 18 0) (om-make-color 0 0 0)) (list (list 8 18 0 0) (om-make-color 0 0 0)) (list (list 8 18 1) (om-make-color 0 0 0)) (list (list 8 18 1 0) (om-make-color 0 0 0)) (list (list 8 18 1 0 0) (om-make-color 0 0 0)) (list (list 8 18 1 1) (om-make-color 0 0 0)) (list (list 8 18 1 1 0) (om-make-color 0 0 0)) (list (list 8 18 2) (om-make-color 0 0 0)) (list (list 8 18 2 0) (om-make-color 0 0 0)) (list (list 8 19) (om-make-color 0 0 0)) (list (list 8 19 0) (om-make-color 0 0 0)) (list (list 8 19 0 0) (om-make-color 0 0 0)) (list (list 8 19 1) (om-make-color 0 0 0)) (list (list 8 19 1 0) (om-make-color 0 0 0)) (list (list 8 19 1 0 0) (om-make-color 0 0 0)) (list (list 8 19 1 1) (om-make-color 0 0 0)) (list (list 8 19 1 1 0) (om-make-color 0 0 0)) (list (list 8 19 2) (om-make-color 0 0 0)) (list (list 8 19 2 0) (om-make-color 0 0 0)) (list (list 8 20) (om-make-color 0 0 0)) (list (list 8 20 0) (om-make-color 0 0 0)) (list (list 8 20 0 0) (om-make-color 0 0 0)) (list (list 8 21) (om-make-color 0 0 0)) (list (list 8 21 0) (om-make-color 0 0 0)) (list (list 8 21 0 0) (om-make-color 0 0 0)) (list (list 8 22) (om-make-color 0 0 0)) (list (list 8 22 0) (om-make-color 0 0 0)) (list (list 8 22 0 0) (om-make-color 0 0 0)) (list (list 8 23) (om-make-color 0 0 0)) (list (list 8 23 0) (om-make-color 0 0 0)) (list (list 8 23 0 0) (om-make-color 0 0 0)) (list (list 8 24) (om-make-color 0 0 0)) (list (list 8 24 0) (om-make-color 0 0 0)) (list (list 8 24 0 0) (om-make-color 0 0 0)) (list (list 8 24 0 0 0) (om-make-color 0 0 0)) (list (list 8 24 0 1) (om-make-color 0 0 0)) (list (list 8 24 0 1 0) (om-make-color 0 0 0)) (list (list 8 24 1) (om-make-color 0 0 0)) (list (list 8 24 1 0) (om-make-color 0 0 0)) (list (list 8 25) (om-make-color 0 0 0)) (list (list 8 25 0) (om-make-color 0 0 0)) (list (list 8 25 0 0) (om-make-color 0 0 0)) (list (list 8 25 0 0 0) (om-make-color 0 0 0)) (list (list 8 25 0 1) (om-make-color 0 0 0)) (list (list 8 25 0 1 0) (om-make-color 0 0 0)) (list (list 8 25 1) (om-make-color 0 0 0)) (list (list 8 25 1 0) (om-make-color 0 0 0)) (list (list 8 26) (om-make-color 0 0 0)) (list (list 8 26 0) (om-make-color 0 0 0)) (list (list 8 26 0 0) (om-make-color 0 0 0)) (list (list 8 26 0 0 0) (om-make-color 0 0 0)) (list (list 8 26 0 1) (om-make-color 0 0 0)) (list (list 8 26 0 1 0) (om-make-color 0 0 0)) (list (list 8 26 1) (om-make-color 0 0 0)) (list (list 8 26 1 0) (om-make-color 0 0 0)) (list (list 8 26 1 0 0) (om-make-color 0 0 0)) (list (list 8 26 1 1) (om-make-color 0 0 0)) (list (list 8 26 1 1 0) (om-make-color 0 0 0)) (list (list 8 26 2) (om-make-color 0 0 0)) (list (list 8 26 2 0) (om-make-color 0 0 0)) (list (list 8 27) (om-make-color 0 0 0)) (list (list 8 27 0) (om-make-color 0 0 0)) (list (list 8 27 0 0) (om-make-color 0 0 0)) (list (list 8 27 1) (om-make-color 0 0 0)) (list (list 8 27 1 0) (om-make-color 0 0 0)) (list (list 8 27 1 0 0) (om-make-color 0 0 0)) (list (list 8 27 1 1) (om-make-color 0 0 0)) (list (list 8 27 1 1 0) (om-make-color 0 0 0)) (list (list 8 27 2) (om-make-color 0 0 0)) (list (list 8 27 2 0) (om-make-color 0 0 0)) (list (list 8 28) (om-make-color 0 0 0)) (list (list 8 28 0) (om-make-color 0 0 0)) (list (list 8 28 0 0) (om-make-color 0 0 0)) (list (list 8 28 1) (om-make-color 0 0 0)) (list (list 8 28 1 0) (om-make-color 0 0 0)) (list (list 8 28 1 0 0) (om-make-color 0 0 0)) (list (list 8 28 1 1) (om-make-color 0 0 0)) (list (list 8 28 1 1 0) (om-make-color 0 0 0)) (list (list 8 28 2) (om-make-color 0 0 0)) (list (list 8 28 2 0) (om-make-color 0 0 0)) (list (list 8 29) (om-make-color 0 0 0)) (list (list 8 29 0) (om-make-color 0 0 0)) (list (list 8 29 0 0) (om-make-color 0 0 0)) (list (list 8 30) (om-make-color 0 0 0)) (list (list 8 30 0) (om-make-color 0 0 0)) (list (list 8 30 0 0) (om-make-color 0 0 0)) (list (list 8 31) (om-make-color 0 0 0)) (list (list 8 31 0) (om-make-color 0 0 0)) (list (list 8 31 0 0) (om-make-color 0 0 0)) (list (list 8 32) (om-make-color 0 0 0)) (list (list 8 32 0) (om-make-color 0 0 0)) (list (list 8 32 0 0) (om-make-color 0 0 0)) (list (list 8 33) (om-make-color 0 0 0)) (list (list 8 33 0) (om-make-color 0 0 0)) (list (list 8 33 0 0) (om-make-color 0 0 0)) (list (list 8 33 0 0 0) (om-make-color 0 0 0)) (list (list 8 33 0 1) (om-make-color 0 0 0)) (list (list 8 33 1) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 0 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 1 0) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 2 0) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 3 0) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 4 0) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 5 0) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 6 0) (om-make-color 0 0 0)) (list (list 9 6 1) (om-make-color 0 0 0)) (list (list 9 6 1 0) (om-make-color 0 0 0)) (list (list 9 6 1 1) (om-make-color 0 0 0)) (list (list 9 6 1 1 0) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 7 0) (om-make-color 0 0 0)) (list (list 9 7 0 0) (om-make-color 0 0 0)) (list (list 9 7 1) (om-make-color 0 0 0)) (list (list 9 7 1 0) (om-make-color 0 0 0)) (list (list 9 7 1 0 0) (om-make-color 0 0 0)) (list (list 9 7 1 1) (om-make-color 0 0 0)) (list (list 9 7 1 1 0) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 8 0) (om-make-color 0 0 0)) (list (list 9 8 0 0) (om-make-color 0 0 0)) (list (list 9 8 1) (om-make-color 0 0 0)) (list (list 9 8 1 0) (om-make-color 0 0 0)) (list (list 9 8 1 0 0) (om-make-color 0 0 0)) (list (list 9 8 1 1) (om-make-color 0 0 0)) (list (list 9 8 1 1 0) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 9 9 0) (om-make-color 0 0 0)) (list (list 9 9 0 0) (om-make-color 0 0 0)) (list (list 9 9 0 0 0) (om-make-color 0 0 0)) (list (list 9 9 0 1) (om-make-color 0 0 0)) (list (list 9 9 0 1 0) (om-make-color 0 0 0)) (list (list 9 9 1) (om-make-color 0 0 0)) (list (list 9 9 1 0) (om-make-color 0 0 0)) (list (list 9 10) (om-make-color 0 0 0)) (list (list 9 10 0) (om-make-color 0 0 0)) (list (list 9 10 0 0) (om-make-color 0 0 0)) (list (list 9 10 0 0 0) (om-make-color 0 0 0)) (list (list 9 10 0 1) (om-make-color 0 0 0)) (list (list 9 10 0 1 0) (om-make-color 0 0 0)) (list (list 9 10 1) (om-make-color 0 0 0)) (list (list 9 10 1 0) (om-make-color 0 0 0)) (list (list 9 11) (om-make-color 0 0 0)) (list (list 9 11 0) (om-make-color 0 0 0)) (list (list 9 11 0 0) (om-make-color 0 0 0)) (list (list 9 11 0 0 0) (om-make-color 0 0 0)) (list (list 9 11 0 1) (om-make-color 0 0 0)) (list (list 9 11 0 1 0) (om-make-color 0 0 0)) (list (list 9 11 1) (om-make-color 0 0 0)) (list (list 9 11 1 0) (om-make-color 0 0 0)) (list (list 9 12) (om-make-color 0 0 0)) (list (list 9 12 0) (om-make-color 0 0 0)) (list (list 9 12 0 0) (om-make-color 0 0 0)) (list (list 9 13) (om-make-color 0 0 0)) (list (list 9 13 0) (om-make-color 0 0 0)) (list (list 9 13 0 0) (om-make-color 0 0 0)) (list (list 9 14) (om-make-color 0 0 0)) (list (list 9 14 0) (om-make-color 0 0 0)) (list (list 9 14 0 0) (om-make-color 0 0 0)) (list (list 9 15) (om-make-color 0 0 0)) (list (list 9 15 0) (om-make-color 0 0 0)) (list (list 9 15 0 0) (om-make-color 0 0 0)) (list (list 9 15 1) (om-make-color 0 0 0)) (list (list 9 15 1 0) (om-make-color 0 0 0)) (list (list 9 15 1 0 0) (om-make-color 0 0 0)) (list (list 9 15 1 1) (om-make-color 0 0 0)) (list (list 9 15 1 1 0) (om-make-color 0 0 0)) (list (list 9 16) (om-make-color 0 0 0)) (list (list 9 16 0) (om-make-color 0 0 0)) (list (list 9 16 0 0) (om-make-color 0 0 0)) (list (list 9 16 1) (om-make-color 0 0 0)) (list (list 9 16 1 0) (om-make-color 0 0 0)) (list (list 9 16 1 0 0) (om-make-color 0 0 0)) (list (list 9 16 1 1) (om-make-color 0 0 0)) (list (list 9 16 1 1 0) (om-make-color 0 0 0)) (list (list 9 17) (om-make-color 0 0 0)) (list (list 9 17 0) (om-make-color 0 0 0)) (list (list 9 17 0 0) (om-make-color 0 0 0)) (list (list 9 17 1) (om-make-color 0 0 0)) (list (list 9 17 1 0) (om-make-color 0 0 0)) (list (list 9 17 1 0 0) (om-make-color 0 0 0)) (list (list 9 17 1 1) (om-make-color 0 0 0)) (list (list 9 17 1 1 0) (om-make-color 0 0 0)) (list (list 9 18) (om-make-color 0 0 0)) (list (list 9 18 0) (om-make-color 0 0 0)) (list (list 9 18 0 0) (om-make-color 0 0 0)) (list (list 9 18 0 0 0) (om-make-color 0 0 0)) (list (list 9 18 0 1) (om-make-color 0 0 0)) (list (list 9 18 0 1 0) (om-make-color 0 0 0)) (list (list 9 18 1) (om-make-color 0 0 0)) (list (list 9 18 1 0) (om-make-color 0 0 0)) (list (list 9 19) (om-make-color 0 0 0)) (list (list 9 19 0) (om-make-color 0 0 0)) (list (list 9 19 0 0) (om-make-color 0 0 0)) (list (list 9 19 0 0 0) (om-make-color 0 0 0)) (list (list 9 19 0 1) (om-make-color 0 0 0)) (list (list 9 19 0 1 0) (om-make-color 0 0 0)) (list (list 9 19 1) (om-make-color 0 0 0)) (list (list 9 19 1 0) (om-make-color 0 0 0)) (list (list 9 20) (om-make-color 0 0 0)) (list (list 9 20 0) (om-make-color 0 0 0)) (list (list 9 20 0 0) (om-make-color 0 0 0)) (list (list 9 20 0 0 0) (om-make-color 0 0 0)) (list (list 9 20 0 1) (om-make-color 0 0 0)) (list (list 9 20 0 1 0) (om-make-color 0 0 0)) (list (list 9 20 1) (om-make-color 0 0 0)) (list (list 9 20 1 0) (om-make-color 0 0 0)) (list (list 9 21) (om-make-color 0 0 0)) (list (list 9 21 0) (om-make-color 0 0 0)) (list (list 9 21 0 0) (om-make-color 0 0 0)) (list (list 9 22) (om-make-color 0 0 0)) (list (list 9 22 0) (om-make-color 0 0 0)) (list (list 9 22 0 0) (om-make-color 0 0 0)) (list (list 9 23) (om-make-color 0 0 0)) (list (list 9 23 0) (om-make-color 0 0 0)) (list (list 9 23 0 0) (om-make-color 0 0 0)) (list (list 9 24) (om-make-color 0 0 0)) (list (list 9 24 0) (om-make-color 0 0 0)) (list (list 9 24 0 0) (om-make-color 0 0 0)) (list (list 9 24 1) (om-make-color 0 0 0)) (list (list 9 24 1 0) (om-make-color 0 0 0)) (list (list 9 24 1 0 0) (om-make-color 0 0 0)) (list (list 9 24 1 1) (om-make-color 0 0 0)) (list (list 9 24 1 1 0) (om-make-color 0 0 0)) (list (list 9 25) (om-make-color 0 0 0)) (list (list 9 25 0) (om-make-color 0 0 0)) (list (list 9 25 0 0) (om-make-color 0 0 0)) (list (list 9 25 1) (om-make-color 0 0 0)) (list (list 9 25 1 0) (om-make-color 0 0 0)) (list (list 9 25 1 0 0) (om-make-color 0 0 0)) (list (list 9 25 1 1) (om-make-color 0 0 0)) (list (list 9 25 1 1 0) (om-make-color 0 0 0)) (list (list 9 26) (om-make-color 0 0 0)) (list (list 9 26 0) (om-make-color 0 0 0)) (list (list 9 26 0 0) (om-make-color 0 0 0)) (list (list 9 26 1) (om-make-color 0 0 0)) (list (list 9 26 1 0) (om-make-color 0 0 0)) (list (list 9 26 1 0 0) (om-make-color 0 0 0)) (list (list 9 26 1 1) (om-make-color 0 0 0)) (list (list 9 26 1 1 0) (om-make-color 0 0 0)) (list (list 9 27) (om-make-color 0 0 0)) (list (list 9 27 0) (om-make-color 0 0 0)) (list (list 9 27 0 0) (om-make-color 0 0 0)) (list (list 9 27 0 0 0) (om-make-color 0 0 0)) (list (list 9 27 0 1) (om-make-color 0 0 0)) (list (list 9 27 0 1 0) (om-make-color 0 0 0)) (list (list 9 27 1) (om-make-color 0 0 0)) (list (list 9 27 1 0) (om-make-color 0 0 0)) (list (list 9 28) (om-make-color 0 0 0)) (list (list 9 28 0) (om-make-color 0 0 0)) (list (list 9 28 0 0) (om-make-color 0 0 0)) (list (list 9 28 0 0 0) (om-make-color 0 0 0)) (list (list 9 28 0 1) (om-make-color 0 0 0)) (list (list 9 28 0 1 0) (om-make-color 0 0 0)) (list (list 9 28 1) (om-make-color 0 0 0)) (list (list 9 28 1 0) (om-make-color 0 0 0)) (list (list 9 29) (om-make-color 0 0 0)) (list (list 9 29 0) (om-make-color 0 0 0)) (list (list 9 29 0 0) (om-make-color 0 0 0)) (list (list 9 29 0 0 0) (om-make-color 0 0 0)) (list (list 9 29 0 1) (om-make-color 0 0 0)) (list (list 9 29 0 1 0) (om-make-color 0 0 0)) (list (list 9 29 1) (om-make-color 0 0 0)) (list (list 9 29 1 0) (om-make-color 0 0 0)) (list (list 9 30) (om-make-color 0 0 0)) (list (list 9 30 0) (om-make-color 0 0 0)) (list (list 9 30 0 0) (om-make-color 0 0 0)) (list (list 9 31) (om-make-color 0 0 0)) (list (list 9 31 0) (om-make-color 0 0 0)) (list (list 9 31 0 0) (om-make-color 0 0 0)) (list (list 9 32) (om-make-color 0 0 0)) (list (list 9 32 0) (om-make-color 0 0 0)) (list (list 9 32 0 0) (om-make-color 0 0 0)) (list (list 9 33) (om-make-color 0 0 0)) (list (list 9 33 0) (om-make-color 0 0 0)) (list (list 9 33 0 0) (om-make-color 0 0 0)) (list (list 9 33 1) (om-make-color 0 0 0)) (list (list 9 33 1 0) (om-make-color 0 0 0)) (list (list 9 33 1 0 0) (om-make-color 0 0 0)) (list (list 9 33 1 1) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 0 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 1 0) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 2 0) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 3 0) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 4 0) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 5 0) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 6 0) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 7 0) (om-make-color 0 0 0)) (list (list 10 7 1) (om-make-color 0 0 0)) (list (list 10 7 1 0) (om-make-color 0 0 0)) (list (list 10 7 1 1) (om-make-color 0 0 0)) (list (list 10 7 1 1 0) (om-make-color 0 0 0)) (list (list 10 7 2) (om-make-color 0 0 0)) (list (list 10 7 2 0) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 8 0) (om-make-color 0 0 0)) (list (list 10 8 0 0) (om-make-color 0 0 0)) (list (list 10 8 1) (om-make-color 0 0 0)) (list (list 10 8 1 0) (om-make-color 0 0 0)) (list (list 10 8 1 0 0) (om-make-color 0 0 0)) (list (list 10 8 1 1) (om-make-color 0 0 0)) (list (list 10 8 1 1 0) (om-make-color 0 0 0)) (list (list 10 8 2) (om-make-color 0 0 0)) (list (list 10 8 2 0) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)) (list (list 10 9 0) (om-make-color 0 0 0)) (list (list 10 9 0 0) (om-make-color 0 0 0)) (list (list 10 9 1) (om-make-color 0 0 0)) (list (list 10 9 1 0) (om-make-color 0 0 0)) (list (list 10 9 1 0 0) (om-make-color 0 0 0)) (list (list 10 9 1 1) (om-make-color 0 0 0)) (list (list 10 9 1 1 0) (om-make-color 0 0 0)) (list (list 10 9 2) (om-make-color 0 0 0)) (list (list 10 9 2 0) (om-make-color 0 0 0)) (list (list 10 9 2 0 0) (om-make-color 0 0 0)) (list (list 10 9 2 1) (om-make-color 0 0 0)) (list (list 10 9 2 1 0) (om-make-color 0 0 0)) (list (list 10 10) (om-make-color 0 0 0)) (list (list 10 10 0) (om-make-color 0 0 0)) (list (list 10 10 0 0) (om-make-color 0 0 0)) (list (list 10 10 1) (om-make-color 0 0 0)) (list (list 10 10 1 0) (om-make-color 0 0 0)) (list (list 10 10 1 0 0) (om-make-color 0 0 0)) (list (list 10 10 1 1) (om-make-color 0 0 0)) (list (list 10 10 1 1 0) (om-make-color 0 0 0)) (list (list 10 11) (om-make-color 0 0 0)) (list (list 10 11 0) (om-make-color 0 0 0)) (list (list 10 11 0 0) (om-make-color 0 0 0)) (list (list 10 11 1) (om-make-color 0 0 0)) (list (list 10 11 1 0) (om-make-color 0 0 0)) (list (list 10 11 1 0 0) (om-make-color 0 0 0)) (list (list 10 11 1 1) (om-make-color 0 0 0)) (list (list 10 11 1 1 0) (om-make-color 0 0 0)) (list (list 10 12) (om-make-color 0 0 0)) (list (list 10 12 0) (om-make-color 0 0 0)) (list (list 10 12 0 0) (om-make-color 0 0 0)) (list (list 10 13) (om-make-color 0 0 0)) (list (list 10 13 0) (om-make-color 0 0 0)) (list (list 10 13 0 0) (om-make-color 0 0 0)) (list (list 10 14) (om-make-color 0 0 0)) (list (list 10 14 0) (om-make-color 0 0 0)) (list (list 10 14 0 0) (om-make-color 0 0 0)) (list (list 10 15) (om-make-color 0 0 0)) (list (list 10 15 0) (om-make-color 0 0 0)) (list (list 10 15 0 0) (om-make-color 0 0 0)) (list (list 10 16) (om-make-color 0 0 0)) (list (list 10 16 0) (om-make-color 0 0 0)) (list (list 10 16 0 0) (om-make-color 0 0 0)) (list (list 10 16 1) (om-make-color 0 0 0)) (list (list 10 16 1 0) (om-make-color 0 0 0)) (list (list 10 16 1 0 0) (om-make-color 0 0 0)) (list (list 10 16 1 1) (om-make-color 0 0 0)) (list (list 10 16 1 1 0) (om-make-color 0 0 0)) (list (list 10 16 2) (om-make-color 0 0 0)) (list (list 10 16 2 0) (om-make-color 0 0 0)) (list (list 10 17) (om-make-color 0 0 0)) (list (list 10 17 0) (om-make-color 0 0 0)) (list (list 10 17 0 0) (om-make-color 0 0 0)) (list (list 10 17 1) (om-make-color 0 0 0)) (list (list 10 17 1 0) (om-make-color 0 0 0)) (list (list 10 17 1 0 0) (om-make-color 0 0 0)) (list (list 10 17 1 1) (om-make-color 0 0 0)) (list (list 10 17 1 1 0) (om-make-color 0 0 0)) (list (list 10 17 2) (om-make-color 0 0 0)) (list (list 10 17 2 0) (om-make-color 0 0 0)) (list (list 10 18) (om-make-color 0 0 0)) (list (list 10 18 0) (om-make-color 0 0 0)) (list (list 10 18 0 0) (om-make-color 0 0 0)) (list (list 10 18 1) (om-make-color 0 0 0)) (list (list 10 18 1 0) (om-make-color 0 0 0)) (list (list 10 18 1 0 0) (om-make-color 0 0 0)) (list (list 10 18 1 1) (om-make-color 0 0 0)) (list (list 10 18 1 1 0) (om-make-color 0 0 0)) (list (list 10 18 2) (om-make-color 0 0 0)) (list (list 10 18 2 0) (om-make-color 0 0 0)) (list (list 10 18 2 0 0) (om-make-color 0 0 0)) (list (list 10 18 2 1) (om-make-color 0 0 0)) (list (list 10 18 2 1 0) (om-make-color 0 0 0)) (list (list 10 19) (om-make-color 0 0 0)) (list (list 10 19 0) (om-make-color 0 0 0)) (list (list 10 19 0 0) (om-make-color 0 0 0)) (list (list 10 19 1) (om-make-color 0 0 0)) (list (list 10 19 1 0) (om-make-color 0 0 0)) (list (list 10 19 1 0 0) (om-make-color 0 0 0)) (list (list 10 19 1 1) (om-make-color 0 0 0)) (list (list 10 19 1 1 0) (om-make-color 0 0 0)) (list (list 10 20) (om-make-color 0 0 0)) (list (list 10 20 0) (om-make-color 0 0 0)) (list (list 10 20 0 0) (om-make-color 0 0 0)) (list (list 10 20 1) (om-make-color 0 0 0)) (list (list 10 20 1 0) (om-make-color 0 0 0)) (list (list 10 20 1 0 0) (om-make-color 0 0 0)) (list (list 10 20 1 1) (om-make-color 0 0 0)) (list (list 10 20 1 1 0) (om-make-color 0 0 0)) (list (list 10 21) (om-make-color 0 0 0)) (list (list 10 21 0) (om-make-color 0 0 0)) (list (list 10 21 0 0) (om-make-color 0 0 0)) (list (list 10 22) (om-make-color 0 0 0)) (list (list 10 22 0) (om-make-color 0 0 0)) (list (list 10 22 0 0) (om-make-color 0 0 0)) (list (list 10 23) (om-make-color 0 0 0)) (list (list 10 23 0) (om-make-color 0 0 0)) (list (list 10 23 0 0) (om-make-color 0 0 0)) (list (list 10 24) (om-make-color 0 0 0)) (list (list 10 24 0) (om-make-color 0 0 0)) (list (list 10 24 0 0) (om-make-color 0 0 0)) (list (list 10 25) (om-make-color 0 0 0)) (list (list 10 25 0) (om-make-color 0 0 0)) (list (list 10 25 0 0) (om-make-color 0 0 0)) (list (list 10 25 1) (om-make-color 0 0 0)) (list (list 10 25 1 0) (om-make-color 0 0 0)) (list (list 10 25 1 0 0) (om-make-color 0 0 0)) (list (list 10 25 1 1) (om-make-color 0 0 0)) (list (list 10 25 1 1 0) (om-make-color 0 0 0)) (list (list 10 25 2) (om-make-color 0 0 0)) (list (list 10 25 2 0) (om-make-color 0 0 0)) (list (list 10 26) (om-make-color 0 0 0)) (list (list 10 26 0) (om-make-color 0 0 0)) (list (list 10 26 0 0) (om-make-color 0 0 0)) (list (list 10 26 1) (om-make-color 0 0 0)) (list (list 10 26 1 0) (om-make-color 0 0 0)) (list (list 10 26 1 0 0) (om-make-color 0 0 0)) (list (list 10 26 1 1) (om-make-color 0 0 0)) (list (list 10 26 1 1 0) (om-make-color 0 0 0)) (list (list 10 26 2) (om-make-color 0 0 0)) (list (list 10 26 2 0) (om-make-color 0 0 0)) (list (list 10 27) (om-make-color 0 0 0)) (list (list 10 27 0) (om-make-color 0 0 0)) (list (list 10 27 0 0) (om-make-color 0 0 0)) (list (list 10 27 1) (om-make-color 0 0 0)) (list (list 10 27 1 0) (om-make-color 0 0 0)) (list (list 10 27 1 0 0) (om-make-color 0 0 0)) (list (list 10 27 1 1) (om-make-color 0 0 0)) (list (list 10 27 1 1 0) (om-make-color 0 0 0)) (list (list 10 27 2) (om-make-color 0 0 0)) (list (list 10 27 2 0) (om-make-color 0 0 0)) (list (list 10 27 2 0 0) (om-make-color 0 0 0)) (list (list 10 27 2 1) (om-make-color 0 0 0)) (list (list 10 27 2 1 0) (om-make-color 0 0 0)) (list (list 10 28) (om-make-color 0 0 0)) (list (list 10 28 0) (om-make-color 0 0 0)) (list (list 10 28 0 0) (om-make-color 0 0 0)) (list (list 10 28 1) (om-make-color 0 0 0)) (list (list 10 28 1 0) (om-make-color 0 0 0)) (list (list 10 28 1 0 0) (om-make-color 0 0 0)) (list (list 10 28 1 1) (om-make-color 0 0 0)) (list (list 10 28 1 1 0) (om-make-color 0 0 0)) (list (list 10 29) (om-make-color 0 0 0)) (list (list 10 29 0) (om-make-color 0 0 0)) (list (list 10 29 0 0) (om-make-color 0 0 0)) (list (list 10 29 1) (om-make-color 0 0 0)) (list (list 10 29 1 0) (om-make-color 0 0 0)) (list (list 10 29 1 0 0) (om-make-color 0 0 0)) (list (list 10 29 1 1) (om-make-color 0 0 0)) (list (list 10 29 1 1 0) (om-make-color 0 0 0)) (list (list 10 30) (om-make-color 0 0 0)) (list (list 10 30 0) (om-make-color 0 0 0)) (list (list 10 30 0 0) (om-make-color 0 0 0)) (list (list 10 31) (om-make-color 0 0 0)) (list (list 10 31 0) (om-make-color 0 0 0)) (list (list 10 31 0 0) (om-make-color 0 0 0)) (list (list 10 32) (om-make-color 0 0 0)) (list (list 10 32 0) (om-make-color 0 0 0)) (list (list 10 32 0 0) (om-make-color 0 0 0)) (list (list 10 33) (om-make-color 0 0 0)) (list (list 10 33 0) (om-make-color 0 0 0)) (list (list 10 33 0 0) (om-make-color 0 0 0)) (list (list 10 34) (om-make-color 0 0 0)) (list (list 10 34 0) (om-make-color 0 0 0)) (list (list 10 34 0 0) (om-make-color 0 0 0)) (list (list 10 34 1) (om-make-color 0 0 0)) (list (list 10 34 1 0) (om-make-color 0 0 0)) (list (list 10 34 1 0 0) (om-make-color 0 0 0)) (list (list 10 34 1 1) (om-make-color 0 0 0)) (list (list 10 34 2) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 0 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 1 0) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 2 0) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 3 0) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 4 0) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 5 0) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 6 0) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 7 0) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 11 8 0) (om-make-color 0 0 0)) (list (list 11 8 1) (om-make-color 0 0 0)) (list (list 11 8 1 0) (om-make-color 0 0 0)) (list (list 11 9) (om-make-color 0 0 0)) (list (list 11 9 0) (om-make-color 0 0 0)) (list (list 11 9 0 0) (om-make-color 0 0 0)) (list (list 11 9 1) (om-make-color 0 0 0)) (list (list 11 9 1 0) (om-make-color 0 0 0)) (list (list 11 10) (om-make-color 0 0 0)) (list (list 11 10 0) (om-make-color 0 0 0)) (list (list 11 10 0 0) (om-make-color 0 0 0)) (list (list 11 10 1) (om-make-color 0 0 0)) (list (list 11 10 1 0) (om-make-color 0 0 0)) (list (list 11 10 2) (om-make-color 0 0 0)) (list (list 11 10 2 0) (om-make-color 0 0 0)) (list (list 11 11) (om-make-color 0 0 0)) (list (list 11 11 0) (om-make-color 0 0 0)) (list (list 11 11 0 0) (om-make-color 0 0 0)) (list (list 11 11 1) (om-make-color 0 0 0)) (list (list 11 11 1 0) (om-make-color 0 0 0)) (list (list 11 12) (om-make-color 0 0 0)) (list (list 11 12 0) (om-make-color 0 0 0)) (list (list 11 12 0 0) (om-make-color 0 0 0)) (list (list 11 12 1) (om-make-color 0 0 0)) (list (list 11 12 1 0) (om-make-color 0 0 0)) (list (list 11 13) (om-make-color 0 0 0)) (list (list 11 13 0) (om-make-color 0 0 0)) (list (list 11 13 0 0) (om-make-color 0 0 0)) (list (list 11 14) (om-make-color 0 0 0)) (list (list 11 14 0) (om-make-color 0 0 0)) (list (list 11 14 0 0) (om-make-color 0 0 0)) (list (list 11 15) (om-make-color 0 0 0)) (list (list 11 15 0) (om-make-color 0 0 0)) (list (list 11 15 0 0) (om-make-color 0 0 0)) (list (list 11 16) (om-make-color 0 0 0)) (list (list 11 16 0) (om-make-color 0 0 0)) (list (list 11 16 0 0) (om-make-color 0 0 0)) (list (list 11 17) (om-make-color 0 0 0)) (list (list 11 17 0) (om-make-color 0 0 0)) (list (list 11 17 0 0) (om-make-color 0 0 0)) (list (list 11 17 1) (om-make-color 0 0 0)) (list (list 11 17 1 0) (om-make-color 0 0 0)) (list (list 11 18) (om-make-color 0 0 0)) (list (list 11 18 0) (om-make-color 0 0 0)) (list (list 11 18 0 0) (om-make-color 0 0 0)) (list (list 11 18 1) (om-make-color 0 0 0)) (list (list 11 18 1 0) (om-make-color 0 0 0)) (list (list 11 19) (om-make-color 0 0 0)) (list (list 11 19 0) (om-make-color 0 0 0)) (list (list 11 19 0 0) (om-make-color 0 0 0)) (list (list 11 19 1) (om-make-color 0 0 0)) (list (list 11 19 1 0) (om-make-color 0 0 0)) (list (list 11 19 2) (om-make-color 0 0 0)) (list (list 11 19 2 0) (om-make-color 0 0 0)) (list (list 11 20) (om-make-color 0 0 0)) (list (list 11 20 0) (om-make-color 0 0 0)) (list (list 11 20 0 0) (om-make-color 0 0 0)) (list (list 11 20 1) (om-make-color 0 0 0)) (list (list 11 20 1 0) (om-make-color 0 0 0)) (list (list 11 21) (om-make-color 0 0 0)) (list (list 11 21 0) (om-make-color 0 0 0)) (list (list 11 21 0 0) (om-make-color 0 0 0)) (list (list 11 21 1) (om-make-color 0 0 0)) (list (list 11 21 1 0) (om-make-color 0 0 0)) (list (list 11 22) (om-make-color 0 0 0)) (list (list 11 22 0) (om-make-color 0 0 0)) (list (list 11 22 0 0) (om-make-color 0 0 0)) (list (list 11 23) (om-make-color 0 0 0)) (list (list 11 23 0) (om-make-color 0 0 0)) (list (list 11 23 0 0) (om-make-color 0 0 0)) (list (list 11 24) (om-make-color 0 0 0)) (list (list 11 24 0) (om-make-color 0 0 0)) (list (list 11 24 0 0) (om-make-color 0 0 0)) (list (list 11 25) (om-make-color 0 0 0)) (list (list 11 25 0) (om-make-color 0 0 0)) (list (list 11 25 0 0) (om-make-color 0 0 0)) (list (list 11 26) (om-make-color 0 0 0)) (list (list 11 26 0) (om-make-color 0 0 0)) (list (list 11 26 0 0) (om-make-color 0 0 0)) (list (list 11 26 1) (om-make-color 0 0 0)) (list (list 11 26 1 0) (om-make-color 0 0 0)) (list (list 11 27) (om-make-color 0 0 0)) (list (list 11 27 0) (om-make-color 0 0 0)) (list (list 11 27 0 0) (om-make-color 0 0 0)) (list (list 11 27 1) (om-make-color 0 0 0)) (list (list 11 27 1 0) (om-make-color 0 0 0)) (list (list 11 28) (om-make-color 0 0 0)) (list (list 11 28 0) (om-make-color 0 0 0)) (list (list 11 28 0 0) (om-make-color 0 0 0)) (list (list 11 28 1) (om-make-color 0 0 0)) (list (list 11 28 1 0) (om-make-color 0 0 0)) (list (list 11 28 2) (om-make-color 0 0 0)) (list (list 11 28 2 0) (om-make-color 0 0 0)) (list (list 11 29) (om-make-color 0 0 0)) (list (list 11 29 0) (om-make-color 0 0 0)) (list (list 11 29 0 0) (om-make-color 0 0 0)) (list (list 11 29 1) (om-make-color 0 0 0)) (list (list 11 29 1 0) (om-make-color 0 0 0)) (list (list 11 30) (om-make-color 0 0 0)) (list (list 11 30 0) (om-make-color 0 0 0)) (list (list 11 30 0 0) (om-make-color 0 0 0)) (list (list 11 30 1) (om-make-color 0 0 0)) (list (list 11 30 1 0) (om-make-color 0 0 0)) (list (list 11 31) (om-make-color 0 0 0)) (list (list 11 31 0) (om-make-color 0 0 0)) (list (list 11 31 0 0) (om-make-color 0 0 0)) (list (list 11 32) (om-make-color 0 0 0)) (list (list 11 32 0) (om-make-color 0 0 0)) (list (list 11 32 0 0) (om-make-color 0 0 0)) (list (list 11 33) (om-make-color 0 0 0)) (list (list 11 33 0) (om-make-color 0 0 0)) (list (list 11 33 0 0) (om-make-color 0 0 0)) (list (list 11 34) (om-make-color 0 0 0)) (list (list 11 34 0) (om-make-color 0 0 0)) (list (list 11 34 0 0) (om-make-color 0 0 0)) (list (list 11 35) (om-make-color 0 0 0)) (list (list 11 35 0) (om-make-color 0 0 0)) (list (list 11 35 0 0) (om-make-color 0 0 0)) (list (list 11 35 1) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 1000 nil 1 1 1 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g) 24 2 't))) nil nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 1059 560) (om-make-point 41 20) 't "t" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 954 542) (om-make-point 167 20) (list 8 8 2 8 8 38) "(8 8 2 8 8 38)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 938 427) (om-make-point 197 20) (list 13 6 1 4 1 19 4 1 6 6 7 4) "(13 6 1 4 1 19 4 1 6 6 7 4 )" nil) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" (list 1 4 1 19 4 1 6 6 7 4 13 6)) (om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" 3) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':poly?)) (om-make-point 904 590) (om-make-point 143 61) nil nil nil 1) (om-load-editor-box1 "MULTI-SEQ" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 45 255) (om-make-point 859 304) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000)) :lonset '(0 3750 4750 6000 7500 9000 9750 10750 15000 15750 16500 16750 18000 21750 22750 24000 25500 27000 27750 28750 33000 33750 34500 34750 36000 39750 40750 42000 43500 45000 45750 46750 51000 51750 52500 52750 61500) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200)) :lonset '(2000 5750 6750 8000 9500 11000 11750 12750 17000 17750 18500 18750 20000 23750 24750 26000 27500 29000 29750 30750 35000 35750 36500 36750 38000 41750 42750 44000 45500 47000 47750 48750 53000 53750 54500 54750 61500) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700)) :lonset '(4000 7750 8750 10000 11500 13000 13750 14750 19000 19750 20500 20750 22000 25750 26750 28000 29500 31000 31750 32750 37000 37750 38500 38750 40000 43750 44750 46000 47500 49000 49750 50750 55000 55750 56500 56750 61500) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400)) :lonset '(4500 8250 9250 10500 12000 13500 14250 15250 19500 20250 21000 21250 22500 26250 27250 28500 30000 31500 32250 33250 37500 38250 39000 39250 40500 44250 45250 46500 48000 49500 50250 51250 55500 56250 57000 57250 61500) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500)) :lonset '(6500 10250 11250 12500 14000 15500 16250 17250 21500 22250 23000 23250 24500 28250 29250 30500 32000 33500 34250 35250 39500 40250 41000 41250 42500 46250 47250 48500 50000 51500 52250 53250 57500 58250 59000 59250 61500) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600)) :lonset '(8500 12250 13250 14500 16000 17500 18250 19250 23500 24250 25000 25250 26500 30250 31250 32500 34000 35500 36250 37250 41500 42250 43000 43250 44500 48250 49250 50500 52000 53500 54250 55250 59500 60250 61000 61250 61500) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 0 28) (om-make-color 0 0 0)) (list (list 0 28 0) (om-make-color 0 0 0)) (list (list 0 29) (om-make-color 0 0 0)) (list (list 0 29 0) (om-make-color 0 0 0)) (list (list 0 30) (om-make-color 0 0 0)) (list (list 0 30 0) (om-make-color 0 0 0)) (list (list 0 31) (om-make-color 0 0 0)) (list (list 0 31 0) (om-make-color 0 0 0)) (list (list 0 32) (om-make-color 0 0 0)) (list (list 0 32 0) (om-make-color 0 0 0)) (list (list 0 33) (om-make-color 0 0 0)) (list (list 0 33 0) (om-make-color 0 0 0)) (list (list 0 34) (om-make-color 0 0 0)) (list (list 0 34 0) (om-make-color 0 0 0)) (list (list 0 35) (om-make-color 0 0 0)) (list (list 0 35 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 1 29) (om-make-color 0 0 0)) (list (list 1 29 0) (om-make-color 0 0 0)) (list (list 1 30) (om-make-color 0 0 0)) (list (list 1 30 0) (om-make-color 0 0 0)) (list (list 1 31) (om-make-color 0 0 0)) (list (list 1 31 0) (om-make-color 0 0 0)) (list (list 1 32) (om-make-color 0 0 0)) (list (list 1 32 0) (om-make-color 0 0 0)) (list (list 1 33) (om-make-color 0 0 0)) (list (list 1 33 0) (om-make-color 0 0 0)) (list (list 1 34) (om-make-color 0 0 0)) (list (list 1 34 0) (om-make-color 0 0 0)) (list (list 1 35) (om-make-color 0 0 0)) (list (list 1 35 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 2 30) (om-make-color 0 0 0)) (list (list 2 30 0) (om-make-color 0 0 0)) (list (list 2 31) (om-make-color 0 0 0)) (list (list 2 31 0) (om-make-color 0 0 0)) (list (list 2 32) (om-make-color 0 0 0)) (list (list 2 32 0) (om-make-color 0 0 0)) (list (list 2 33) (om-make-color 0 0 0)) (list (list 2 33 0) (om-make-color 0 0 0)) (list (list 2 34) (om-make-color 0 0 0)) (list (list 2 34 0) (om-make-color 0 0 0)) (list (list 2 35) (om-make-color 0 0 0)) (list (list 2 35 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 3 18) (om-make-color 0 0 0)) (list (list 3 18 0) (om-make-color 0 0 0)) (list (list 3 19) (om-make-color 0 0 0)) (list (list 3 19 0) (om-make-color 0 0 0)) (list (list 3 20) (om-make-color 0 0 0)) (list (list 3 20 0) (om-make-color 0 0 0)) (list (list 3 21) (om-make-color 0 0 0)) (list (list 3 21 0) (om-make-color 0 0 0)) (list (list 3 22) (om-make-color 0 0 0)) (list (list 3 22 0) (om-make-color 0 0 0)) (list (list 3 23) (om-make-color 0 0 0)) (list (list 3 23 0) (om-make-color 0 0 0)) (list (list 3 24) (om-make-color 0 0 0)) (list (list 3 24 0) (om-make-color 0 0 0)) (list (list 3 25) (om-make-color 0 0 0)) (list (list 3 25 0) (om-make-color 0 0 0)) (list (list 3 26) (om-make-color 0 0 0)) (list (list 3 26 0) (om-make-color 0 0 0)) (list (list 3 27) (om-make-color 0 0 0)) (list (list 3 27 0) (om-make-color 0 0 0)) (list (list 3 28) (om-make-color 0 0 0)) (list (list 3 28 0) (om-make-color 0 0 0)) (list (list 3 29) (om-make-color 0 0 0)) (list (list 3 29 0) (om-make-color 0 0 0)) (list (list 3 30) (om-make-color 0 0 0)) (list (list 3 30 0) (om-make-color 0 0 0)) (list (list 3 31) (om-make-color 0 0 0)) (list (list 3 31 0) (om-make-color 0 0 0)) (list (list 3 32) (om-make-color 0 0 0)) (list (list 3 32 0) (om-make-color 0 0 0)) (list (list 3 33) (om-make-color 0 0 0)) (list (list 3 33 0) (om-make-color 0 0 0)) (list (list 3 34) (om-make-color 0 0 0)) (list (list 3 34 0) (om-make-color 0 0 0)) (list (list 3 35) (om-make-color 0 0 0)) (list (list 3 35 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 4 18) (om-make-color 0 0 0)) (list (list 4 18 0) (om-make-color 0 0 0)) (list (list 4 19) (om-make-color 0 0 0)) (list (list 4 19 0) (om-make-color 0 0 0)) (list (list 4 20) (om-make-color 0 0 0)) (list (list 4 20 0) (om-make-color 0 0 0)) (list (list 4 21) (om-make-color 0 0 0)) (list (list 4 21 0) (om-make-color 0 0 0)) (list (list 4 22) (om-make-color 0 0 0)) (list (list 4 22 0) (om-make-color 0 0 0)) (list (list 4 23) (om-make-color 0 0 0)) (list (list 4 23 0) (om-make-color 0 0 0)) (list (list 4 24) (om-make-color 0 0 0)) (list (list 4 24 0) (om-make-color 0 0 0)) (list (list 4 25) (om-make-color 0 0 0)) (list (list 4 25 0) (om-make-color 0 0 0)) (list (list 4 26) (om-make-color 0 0 0)) (list (list 4 26 0) (om-make-color 0 0 0)) (list (list 4 27) (om-make-color 0 0 0)) (list (list 4 27 0) (om-make-color 0 0 0)) (list (list 4 28) (om-make-color 0 0 0)) (list (list 4 28 0) (om-make-color 0 0 0)) (list (list 4 29) (om-make-color 0 0 0)) (list (list 4 29 0) (om-make-color 0 0 0)) (list (list 4 30) (om-make-color 0 0 0)) (list (list 4 30 0) (om-make-color 0 0 0)) (list (list 4 31) (om-make-color 0 0 0)) (list (list 4 31 0) (om-make-color 0 0 0)) (list (list 4 32) (om-make-color 0 0 0)) (list (list 4 32 0) (om-make-color 0 0 0)) (list (list 4 33) (om-make-color 0 0 0)) (list (list 4 33 0) (om-make-color 0 0 0)) (list (list 4 34) (om-make-color 0 0 0)) (list (list 4 34 0) (om-make-color 0 0 0)) (list (list 4 35) (om-make-color 0 0 0)) (list (list 4 35 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 5 18) (om-make-color 0 0 0)) (list (list 5 18 0) (om-make-color 0 0 0)) (list (list 5 19) (om-make-color 0 0 0)) (list (list 5 19 0) (om-make-color 0 0 0)) (list (list 5 20) (om-make-color 0 0 0)) (list (list 5 20 0) (om-make-color 0 0 0)) (list (list 5 21) (om-make-color 0 0 0)) (list (list 5 21 0) (om-make-color 0 0 0)) (list (list 5 22) (om-make-color 0 0 0)) (list (list 5 22 0) (om-make-color 0 0 0)) (list (list 5 23) (om-make-color 0 0 0)) (list (list 5 23 0) (om-make-color 0 0 0)) (list (list 5 24) (om-make-color 0 0 0)) (list (list 5 24 0) (om-make-color 0 0 0)) (list (list 5 25) (om-make-color 0 0 0)) (list (list 5 25 0) (om-make-color 0 0 0)) (list (list 5 26) (om-make-color 0 0 0)) (list (list 5 26 0) (om-make-color 0 0 0)) (list (list 5 27) (om-make-color 0 0 0)) (list (list 5 27 0) (om-make-color 0 0 0)) (list (list 5 28) (om-make-color 0 0 0)) (list (list 5 28 0) (om-make-color 0 0 0)) (list (list 5 29) (om-make-color 0 0 0)) (list (list 5 29 0) (om-make-color 0 0 0)) (list (list 5 30) (om-make-color 0 0 0)) (list (list 5 30 0) (om-make-color 0 0 0)) (list (list 5 31) (om-make-color 0 0 0)) (list (list 5 31 0) (om-make-color 0 0 0)) (list (list 5 32) (om-make-color 0 0 0)) (list (list 5 32 0) (om-make-color 0 0 0)) (list (list 5 33) (om-make-color 0 0 0)) (list (list 5 33 0) (om-make-color 0 0 0)) (list (list 5 34) (om-make-color 0 0 0)) (list (list 5 34 0) (om-make-color 0 0 0)) (list (list 5 35) (om-make-color 0 0 0)) (list (list 5 35 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 250 nil 19/25 1 1 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g) 18 2 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 53 74) '"=" "" (om-make-point 612 73) nil (om-make-color 0 0 0) (om-make-font "Geneva" 48 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 164 32) '"S=(8 8 2 8 8 38)" "" (om-make-point 399 225) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 696 1) (om-make-point 207 221) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 15 19 24 30 36 39 43 60 63 66 67) (list 8 23 27 32 38 44 47 51 68 71 2 3) (list 16 31 35 40 46 52 55 59 4 7 10 11) (list 18 33 37 42 48 54 57 61 6 9 12 13) (list 26 41 45 50 56 62 65 69 14 17 20 21) (list 34 49 53 58 64 70 1 5 22 25 28 29)) :from-file t)) "x" nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 379 4) (om-make-point 211 219) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 8 16 18 26 34)) :from-file t)) "x" nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 70 5) (om-make-point 218 213) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 13 19 20 24 25 44 48 49 55 61 68)) :from-file t)) "x" nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 't))) t nil nil)) '((4 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 3 3 nil 0) (3 0 7 0 nil 0) (12 0 8 0 nil 0) (10 0 12 0 nil 0) (11 0 12 1 nil 0) (9 0 12 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 48 0)) (setf (pict-size newpict) (om-make-point 1093 637)) newpict)) 5.0))
