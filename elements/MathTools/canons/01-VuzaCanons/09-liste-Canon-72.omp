; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 181 153) (om-make-point 50 50) (om-make-point 1189 866) "No documentation " 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "09-liste-Canon-72" '((om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 1010 53) (om-make-point 77 22) (list 8 8 2 8 8 38) "(8 8 2 8 8 38)" nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 907 22) (om-make-point 144 22) (list 13 6 1 4 1 19 4 1 6 6 7 4) "(13 6 1 4 1 19 4 1 6 6 7 4)" nil) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 958 428) (om-make-point 185 224) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 8 16 18 26 34) (list 13 21 29 31 39 47) (list 19 27 35 37 45 53) (list 20 28 36 38 46 54) (list 24 32 40 42 50 58) (list 25 33 41 43 51 59) (list 44 52 60 62 70 6) (list 48 56 64 66 2 10) (list 49 57 65 67 3 11) (list 55 63 71 1 9 17) (list 61 69 5 7 15 23) (list 68 4 12 14 22 30)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'genfun "TRANSP-COMB" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72)) (om-make-point 996 198) nil nil nil nil 1) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 8 8 2 8 8 38))) (om-make-point 1034 98) nil nil nil nil 1) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 13 6 1 4 1 19 4 1 6 6 7 4))) (om-make-point 976 95) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 131 57) '"Duality" "" (om-make-point 816 657) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "MULTI-SEQ1" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 784 429) (om-make-point 169 224) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(0 1600 3200 3600 5200 6800 14400 16000 17600 18000 19600 21200 28800 30400 32000 32400 34000 35600 50800 66000 81200 96400 111600 126800 142000 157200 172400 187600 202800 218000 233200 248400 263600 278800 294000 309200 324400 339600 354800 370000 385200 400400 415600 430800 446000 461200 476400 491600 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(2600 4200 5800 6200 7800 9400 17000 18600 20200 20600 22200 23800 31400 33000 34600 35000 36600 38200 50800 63400 76000 88600 101200 113800 126400 139000 151600 164200 176800 189400 202000 214600 227200 239800 252400 265000 277600 290200 302800 315400 328000 340600 353200 365800 378400 391000 403600 416200 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(3800 5400 7000 7400 9000 10600 18200 19800 21400 21800 23400 25000 32600 34200 35800 36200 37800 39400 50800 62200 73600 85000 96400 107800 119200 130600 142000 153400 164800 176200 187600 199000 210400 221800 233200 244600 256000 267400 278800 290200 301600 313000 324400 335800 347200 358600 370000 381400 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(4000 5600 7200 7600 9200 10800 18400 20000 21600 22000 23600 25200 32800 34400 36000 36400 38000 39600 50800 62000 73200 84400 95600 106800 118000 129200 140400 151600 162800 174000 185200 196400 207600 218800 230000 241200 252400 263600 274800 286000 297200 308400 319600 330800 342000 353200 364400 375600 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(4800 6400 8000 8400 10000 11600 19200 20800 22400 22800 24400 26000 33600 35200 36800 37200 38800 40400 50800 61200 71600 82000 92400 102800 113200 123600 134000 144400 154800 165200 175600 186000 196400 206800 217200 227600 238000 248400 258800 269200 279600 290000 300400 310800 321200 331600 342000 352400 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(5000 6600 8200 8600 10200 11800 19400 21000 22600 23000 24600 26200 33800 35400 37000 37400 39000 40600 50800 61000 71200 81400 91600 101800 112000 122200 132400 142600 152800 163000 173200 183400 193600 203800 214000 224200 234400 244600 254800 265000 275200 285400 295600 305800 316000 326200 336400 346600 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(8800 10400 12000 12400 14000 15600 23200 24800 26400 26800 28400 30000 37600 39200 40800 41200 42800 44400 50800 57200 63600 70000 76400 82800 89200 95600 102000 108400 114800 121200 127600 134000 140400 146800 153200 159600 166000 172400 178800 185200 191600 198000 204400 210800 217200 223600 230000 236400 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(9600 11200 12800 13200 14800 16400 24000 25600 27200 27600 29200 30800 38400 40000 41600 42000 43600 45200 50800 56400 62000 67600 73200 78800 84400 90000 95600 101200 106800 112400 118000 123600 129200 134800 140400 146000 151600 157200 162800 168400 174000 179600 185200 190800 196400 202000 207600 213200 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(9800 11400 13000 13400 15000 16600 24200 25800 27400 27800 29400 31000 38600 40200 41800 42200 43800 45400 50800 56200 61600 67000 72400 77800 83200 88600 94000 99400 104800 110200 115600 121000 126400 131800 137200 142600 148000 153400 158800 164200 169600 175000 180400 185800 191200 196600 202000 207400 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(11000 12600 14200 14600 16200 17800 25400 27000 28600 29000 30600 32200 39800 41400 43000 43400 45000 46600 50800 55000 59200 63400 67600 71800 76000 80200 84400 88600 92800 97000 101200 105400 109600 113800 118000 122200 126400 130600 134800 139000 143200 147400 151600 155800 160000 164200 168400 172600 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(12200 13800 15400 15800 17400 19000 26600 28200 29800 30200 31800 33400 41000 42600 44200 44600 46200 47800 50800 53800 56800 59800 62800 65800 68800 71800 74800 77800 80800 83800 86800 89800 92800 95800 98800 101800 104800 107800 110800 113800 116800 119800 122800 125800 128800 131800 134800 137800 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(13600 15200 16800 17200 18800 20400 28000 29600 31200 31600 33200 34800 42400 44000 45600 46000 47600 49200 50800 52400 54000 55600 57200 58800 60400 62000 63600 65200 66800 68400 70000 71600 73200 74800 76400 78000 79600 81200 82800 84400 86000 87600 89200 90800 92400 94000 95600 97200 506800) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 0 28) (om-make-color 0 0 0)) (list (list 0 28 0) (om-make-color 0 0 0)) (list (list 0 29) (om-make-color 0 0 0)) (list (list 0 29 0) (om-make-color 0 0 0)) (list (list 0 30) (om-make-color 0 0 0)) (list (list 0 30 0) (om-make-color 0 0 0)) (list (list 0 31) (om-make-color 0 0 0)) (list (list 0 31 0) (om-make-color 0 0 0)) (list (list 0 32) (om-make-color 0 0 0)) (list (list 0 32 0) (om-make-color 0 0 0)) (list (list 0 33) (om-make-color 0 0 0)) (list (list 0 33 0) (om-make-color 0 0 0)) (list (list 0 34) (om-make-color 0 0 0)) (list (list 0 34 0) (om-make-color 0 0 0)) (list (list 0 35) (om-make-color 0 0 0)) (list (list 0 35 0) (om-make-color 0 0 0)) (list (list 0 36) (om-make-color 0 0 0)) (list (list 0 36 0) (om-make-color 0 0 0)) (list (list 0 37) (om-make-color 0 0 0)) (list (list 0 37 0) (om-make-color 0 0 0)) (list (list 0 38) (om-make-color 0 0 0)) (list (list 0 38 0) (om-make-color 0 0 0)) (list (list 0 39) (om-make-color 0 0 0)) (list (list 0 39 0) (om-make-color 0 0 0)) (list (list 0 40) (om-make-color 0 0 0)) (list (list 0 40 0) (om-make-color 0 0 0)) (list (list 0 41) (om-make-color 0 0 0)) (list (list 0 41 0) (om-make-color 0 0 0)) (list (list 0 42) (om-make-color 0 0 0)) (list (list 0 42 0) (om-make-color 0 0 0)) (list (list 0 43) (om-make-color 0 0 0)) (list (list 0 43 0) (om-make-color 0 0 0)) (list (list 0 44) (om-make-color 0 0 0)) (list (list 0 44 0) (om-make-color 0 0 0)) (list (list 0 45) (om-make-color 0 0 0)) (list (list 0 45 0) (om-make-color 0 0 0)) (list (list 0 46) (om-make-color 0 0 0)) (list (list 0 46 0) (om-make-color 0 0 0)) (list (list 0 47) (om-make-color 0 0 0)) (list (list 0 47 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 1 29) (om-make-color 0 0 0)) (list (list 1 29 0) (om-make-color 0 0 0)) (list (list 1 30) (om-make-color 0 0 0)) (list (list 1 30 0) (om-make-color 0 0 0)) (list (list 1 31) (om-make-color 0 0 0)) (list (list 1 31 0) (om-make-color 0 0 0)) (list (list 1 32) (om-make-color 0 0 0)) (list (list 1 32 0) (om-make-color 0 0 0)) (list (list 1 33) (om-make-color 0 0 0)) (list (list 1 33 0) (om-make-color 0 0 0)) (list (list 1 34) (om-make-color 0 0 0)) (list (list 1 34 0) (om-make-color 0 0 0)) (list (list 1 35) (om-make-color 0 0 0)) (list (list 1 35 0) (om-make-color 0 0 0)) (list (list 1 36) (om-make-color 0 0 0)) (list (list 1 36 0) (om-make-color 0 0 0)) (list (list 1 37) (om-make-color 0 0 0)) (list (list 1 37 0) (om-make-color 0 0 0)) (list (list 1 38) (om-make-color 0 0 0)) (list (list 1 38 0) (om-make-color 0 0 0)) (list (list 1 39) (om-make-color 0 0 0)) (list (list 1 39 0) (om-make-color 0 0 0)) (list (list 1 40) (om-make-color 0 0 0)) (list (list 1 40 0) (om-make-color 0 0 0)) (list (list 1 41) (om-make-color 0 0 0)) (list (list 1 41 0) (om-make-color 0 0 0)) (list (list 1 42) (om-make-color 0 0 0)) (list (list 1 42 0) (om-make-color 0 0 0)) (list (list 1 43) (om-make-color 0 0 0)) (list (list 1 43 0) (om-make-color 0 0 0)) (list (list 1 44) (om-make-color 0 0 0)) (list (list 1 44 0) (om-make-color 0 0 0)) (list (list 1 45) (om-make-color 0 0 0)) (list (list 1 45 0) (om-make-color 0 0 0)) (list (list 1 46) (om-make-color 0 0 0)) (list (list 1 46 0) (om-make-color 0 0 0)) (list (list 1 47) (om-make-color 0 0 0)) (list (list 1 47 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 2 30) (om-make-color 0 0 0)) (list (list 2 30 0) (om-make-color 0 0 0)) (list (list 2 31) (om-make-color 0 0 0)) (list (list 2 31 0) (om-make-color 0 0 0)) (list (list 2 32) (om-make-color 0 0 0)) (list (list 2 32 0) (om-make-color 0 0 0)) (list (list 2 33) (om-make-color 0 0 0)) (list (list 2 33 0) (om-make-color 0 0 0)) (list (list 2 34) (om-make-color 0 0 0)) (list (list 2 34 0) (om-make-color 0 0 0)) (list (list 2 35) (om-make-color 0 0 0)) (list (list 2 35 0) (om-make-color 0 0 0)) (list (list 2 36) (om-make-color 0 0 0)) (list (list 2 36 0) (om-make-color 0 0 0)) (list (list 2 37) (om-make-color 0 0 0)) (list (list 2 37 0) (om-make-color 0 0 0)) (list (list 2 38) (om-make-color 0 0 0)) (list (list 2 38 0) (om-make-color 0 0 0)) (list (list 2 39) (om-make-color 0 0 0)) (list (list 2 39 0) (om-make-color 0 0 0)) (list (list 2 40) (om-make-color 0 0 0)) (list (list 2 40 0) (om-make-color 0 0 0)) (list (list 2 41) (om-make-color 0 0 0)) (list (list 2 41 0) (om-make-color 0 0 0)) (list (list 2 42) (om-make-color 0 0 0)) (list (list 2 42 0) (om-make-color 0 0 0)) (list (list 2 43) (om-make-color 0 0 0)) (list (list 2 43 0) (om-make-color 0 0 0)) (list (list 2 44) (om-make-color 0 0 0)) (list (list 2 44 0) (om-make-color 0 0 0)) (list (list 2 45) (om-make-color 0 0 0)) (list (list 2 45 0) (om-make-color 0 0 0)) (list (list 2 46) (om-make-color 0 0 0)) (list (list 2 46 0) (om-make-color 0 0 0)) (list (list 2 47) (om-make-color 0 0 0)) (list (list 2 47 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 3 18) (om-make-color 0 0 0)) (list (list 3 18 0) (om-make-color 0 0 0)) (list (list 3 19) (om-make-color 0 0 0)) (list (list 3 19 0) (om-make-color 0 0 0)) (list (list 3 20) (om-make-color 0 0 0)) (list (list 3 20 0) (om-make-color 0 0 0)) (list (list 3 21) (om-make-color 0 0 0)) (list (list 3 21 0) (om-make-color 0 0 0)) (list (list 3 22) (om-make-color 0 0 0)) (list (list 3 22 0) (om-make-color 0 0 0)) (list (list 3 23) (om-make-color 0 0 0)) (list (list 3 23 0) (om-make-color 0 0 0)) (list (list 3 24) (om-make-color 0 0 0)) (list (list 3 24 0) (om-make-color 0 0 0)) (list (list 3 25) (om-make-color 0 0 0)) (list (list 3 25 0) (om-make-color 0 0 0)) (list (list 3 26) (om-make-color 0 0 0)) (list (list 3 26 0) (om-make-color 0 0 0)) (list (list 3 27) (om-make-color 0 0 0)) (list (list 3 27 0) (om-make-color 0 0 0)) (list (list 3 28) (om-make-color 0 0 0)) (list (list 3 28 0) (om-make-color 0 0 0)) (list (list 3 29) (om-make-color 0 0 0)) (list (list 3 29 0) (om-make-color 0 0 0)) (list (list 3 30) (om-make-color 0 0 0)) (list (list 3 30 0) (om-make-color 0 0 0)) (list (list 3 31) (om-make-color 0 0 0)) (list (list 3 31 0) (om-make-color 0 0 0)) (list (list 3 32) (om-make-color 0 0 0)) (list (list 3 32 0) (om-make-color 0 0 0)) (list (list 3 33) (om-make-color 0 0 0)) (list (list 3 33 0) (om-make-color 0 0 0)) (list (list 3 34) (om-make-color 0 0 0)) (list (list 3 34 0) (om-make-color 0 0 0)) (list (list 3 35) (om-make-color 0 0 0)) (list (list 3 35 0) (om-make-color 0 0 0)) (list (list 3 36) (om-make-color 0 0 0)) (list (list 3 36 0) (om-make-color 0 0 0)) (list (list 3 37) (om-make-color 0 0 0)) (list (list 3 37 0) (om-make-color 0 0 0)) (list (list 3 38) (om-make-color 0 0 0)) (list (list 3 38 0) (om-make-color 0 0 0)) (list (list 3 39) (om-make-color 0 0 0)) (list (list 3 39 0) (om-make-color 0 0 0)) (list (list 3 40) (om-make-color 0 0 0)) (list (list 3 40 0) (om-make-color 0 0 0)) (list (list 3 41) (om-make-color 0 0 0)) (list (list 3 41 0) (om-make-color 0 0 0)) (list (list 3 42) (om-make-color 0 0 0)) (list (list 3 42 0) (om-make-color 0 0 0)) (list (list 3 43) (om-make-color 0 0 0)) (list (list 3 43 0) (om-make-color 0 0 0)) (list (list 3 44) (om-make-color 0 0 0)) (list (list 3 44 0) (om-make-color 0 0 0)) (list (list 3 45) (om-make-color 0 0 0)) (list (list 3 45 0) (om-make-color 0 0 0)) (list (list 3 46) (om-make-color 0 0 0)) (list (list 3 46 0) (om-make-color 0 0 0)) (list (list 3 47) (om-make-color 0 0 0)) (list (list 3 47 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 4 18) (om-make-color 0 0 0)) (list (list 4 18 0) (om-make-color 0 0 0)) (list (list 4 19) (om-make-color 0 0 0)) (list (list 4 19 0) (om-make-color 0 0 0)) (list (list 4 20) (om-make-color 0 0 0)) (list (list 4 20 0) (om-make-color 0 0 0)) (list (list 4 21) (om-make-color 0 0 0)) (list (list 4 21 0) (om-make-color 0 0 0)) (list (list 4 22) (om-make-color 0 0 0)) (list (list 4 22 0) (om-make-color 0 0 0)) (list (list 4 23) (om-make-color 0 0 0)) (list (list 4 23 0) (om-make-color 0 0 0)) (list (list 4 24) (om-make-color 0 0 0)) (list (list 4 24 0) (om-make-color 0 0 0)) (list (list 4 25) (om-make-color 0 0 0)) (list (list 4 25 0) (om-make-color 0 0 0)) (list (list 4 26) (om-make-color 0 0 0)) (list (list 4 26 0) (om-make-color 0 0 0)) (list (list 4 27) (om-make-color 0 0 0)) (list (list 4 27 0) (om-make-color 0 0 0)) (list (list 4 28) (om-make-color 0 0 0)) (list (list 4 28 0) (om-make-color 0 0 0)) (list (list 4 29) (om-make-color 0 0 0)) (list (list 4 29 0) (om-make-color 0 0 0)) (list (list 4 30) (om-make-color 0 0 0)) (list (list 4 30 0) (om-make-color 0 0 0)) (list (list 4 31) (om-make-color 0 0 0)) (list (list 4 31 0) (om-make-color 0 0 0)) (list (list 4 32) (om-make-color 0 0 0)) (list (list 4 32 0) (om-make-color 0 0 0)) (list (list 4 33) (om-make-color 0 0 0)) (list (list 4 33 0) (om-make-color 0 0 0)) (list (list 4 34) (om-make-color 0 0 0)) (list (list 4 34 0) (om-make-color 0 0 0)) (list (list 4 35) (om-make-color 0 0 0)) (list (list 4 35 0) (om-make-color 0 0 0)) (list (list 4 36) (om-make-color 0 0 0)) (list (list 4 36 0) (om-make-color 0 0 0)) (list (list 4 37) (om-make-color 0 0 0)) (list (list 4 37 0) (om-make-color 0 0 0)) (list (list 4 38) (om-make-color 0 0 0)) (list (list 4 38 0) (om-make-color 0 0 0)) (list (list 4 39) (om-make-color 0 0 0)) (list (list 4 39 0) (om-make-color 0 0 0)) (list (list 4 40) (om-make-color 0 0 0)) (list (list 4 40 0) (om-make-color 0 0 0)) (list (list 4 41) (om-make-color 0 0 0)) (list (list 4 41 0) (om-make-color 0 0 0)) (list (list 4 42) (om-make-color 0 0 0)) (list (list 4 42 0) (om-make-color 0 0 0)) (list (list 4 43) (om-make-color 0 0 0)) (list (list 4 43 0) (om-make-color 0 0 0)) (list (list 4 44) (om-make-color 0 0 0)) (list (list 4 44 0) (om-make-color 0 0 0)) (list (list 4 45) (om-make-color 0 0 0)) (list (list 4 45 0) (om-make-color 0 0 0)) (list (list 4 46) (om-make-color 0 0 0)) (list (list 4 46 0) (om-make-color 0 0 0)) (list (list 4 47) (om-make-color 0 0 0)) (list (list 4 47 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 5 18) (om-make-color 0 0 0)) (list (list 5 18 0) (om-make-color 0 0 0)) (list (list 5 19) (om-make-color 0 0 0)) (list (list 5 19 0) (om-make-color 0 0 0)) (list (list 5 20) (om-make-color 0 0 0)) (list (list 5 20 0) (om-make-color 0 0 0)) (list (list 5 21) (om-make-color 0 0 0)) (list (list 5 21 0) (om-make-color 0 0 0)) (list (list 5 22) (om-make-color 0 0 0)) (list (list 5 22 0) (om-make-color 0 0 0)) (list (list 5 23) (om-make-color 0 0 0)) (list (list 5 23 0) (om-make-color 0 0 0)) (list (list 5 24) (om-make-color 0 0 0)) (list (list 5 24 0) (om-make-color 0 0 0)) (list (list 5 25) (om-make-color 0 0 0)) (list (list 5 25 0) (om-make-color 0 0 0)) (list (list 5 26) (om-make-color 0 0 0)) (list (list 5 26 0) (om-make-color 0 0 0)) (list (list 5 27) (om-make-color 0 0 0)) (list (list 5 27 0) (om-make-color 0 0 0)) (list (list 5 28) (om-make-color 0 0 0)) (list (list 5 28 0) (om-make-color 0 0 0)) (list (list 5 29) (om-make-color 0 0 0)) (list (list 5 29 0) (om-make-color 0 0 0)) (list (list 5 30) (om-make-color 0 0 0)) (list (list 5 30 0) (om-make-color 0 0 0)) (list (list 5 31) (om-make-color 0 0 0)) (list (list 5 31 0) (om-make-color 0 0 0)) (list (list 5 32) (om-make-color 0 0 0)) (list (list 5 32 0) (om-make-color 0 0 0)) (list (list 5 33) (om-make-color 0 0 0)) (list (list 5 33 0) (om-make-color 0 0 0)) (list (list 5 34) (om-make-color 0 0 0)) (list (list 5 34 0) (om-make-color 0 0 0)) (list (list 5 35) (om-make-color 0 0 0)) (list (list 5 35 0) (om-make-color 0 0 0)) (list (list 5 36) (om-make-color 0 0 0)) (list (list 5 36 0) (om-make-color 0 0 0)) (list (list 5 37) (om-make-color 0 0 0)) (list (list 5 37 0) (om-make-color 0 0 0)) (list (list 5 38) (om-make-color 0 0 0)) (list (list 5 38 0) (om-make-color 0 0 0)) (list (list 5 39) (om-make-color 0 0 0)) (list (list 5 39 0) (om-make-color 0 0 0)) (list (list 5 40) (om-make-color 0 0 0)) (list (list 5 40 0) (om-make-color 0 0 0)) (list (list 5 41) (om-make-color 0 0 0)) (list (list 5 41 0) (om-make-color 0 0 0)) (list (list 5 42) (om-make-color 0 0 0)) (list (list 5 42 0) (om-make-color 0 0 0)) (list (list 5 43) (om-make-color 0 0 0)) (list (list 5 43 0) (om-make-color 0 0 0)) (list (list 5 44) (om-make-color 0 0 0)) (list (list 5 44 0) (om-make-color 0 0 0)) (list (list 5 45) (om-make-color 0 0 0)) (list (list 5 45 0) (om-make-color 0 0 0)) (list (list 5 46) (om-make-color 0 0 0)) (list (list 5 46 0) (om-make-color 0 0 0)) (list (list 5 47) (om-make-color 0 0 0)) (list (list 5 47 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 0 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 1 0) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 2 0) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 3 0) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 4 0) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 5 0) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 6 0) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 7 0) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 8 0) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 6 9 0) (om-make-color 0 0 0)) (list (list 6 10) (om-make-color 0 0 0)) (list (list 6 10 0) (om-make-color 0 0 0)) (list (list 6 11) (om-make-color 0 0 0)) (list (list 6 11 0) (om-make-color 0 0 0)) (list (list 6 12) (om-make-color 0 0 0)) (list (list 6 12 0) (om-make-color 0 0 0)) (list (list 6 13) (om-make-color 0 0 0)) (list (list 6 13 0) (om-make-color 0 0 0)) (list (list 6 14) (om-make-color 0 0 0)) (list (list 6 14 0) (om-make-color 0 0 0)) (list (list 6 15) (om-make-color 0 0 0)) (list (list 6 15 0) (om-make-color 0 0 0)) (list (list 6 16) (om-make-color 0 0 0)) (list (list 6 16 0) (om-make-color 0 0 0)) (list (list 6 17) (om-make-color 0 0 0)) (list (list 6 17 0) (om-make-color 0 0 0)) (list (list 6 18) (om-make-color 0 0 0)) (list (list 6 18 0) (om-make-color 0 0 0)) (list (list 6 19) (om-make-color 0 0 0)) (list (list 6 19 0) (om-make-color 0 0 0)) (list (list 6 20) (om-make-color 0 0 0)) (list (list 6 20 0) (om-make-color 0 0 0)) (list (list 6 21) (om-make-color 0 0 0)) (list (list 6 21 0) (om-make-color 0 0 0)) (list (list 6 22) (om-make-color 0 0 0)) (list (list 6 22 0) (om-make-color 0 0 0)) (list (list 6 23) (om-make-color 0 0 0)) (list (list 6 23 0) (om-make-color 0 0 0)) (list (list 6 24) (om-make-color 0 0 0)) (list (list 6 24 0) (om-make-color 0 0 0)) (list (list 6 25) (om-make-color 0 0 0)) (list (list 6 25 0) (om-make-color 0 0 0)) (list (list 6 26) (om-make-color 0 0 0)) (list (list 6 26 0) (om-make-color 0 0 0)) (list (list 6 27) (om-make-color 0 0 0)) (list (list 6 27 0) (om-make-color 0 0 0)) (list (list 6 28) (om-make-color 0 0 0)) (list (list 6 28 0) (om-make-color 0 0 0)) (list (list 6 29) (om-make-color 0 0 0)) (list (list 6 29 0) (om-make-color 0 0 0)) (list (list 6 30) (om-make-color 0 0 0)) (list (list 6 30 0) (om-make-color 0 0 0)) (list (list 6 31) (om-make-color 0 0 0)) (list (list 6 31 0) (om-make-color 0 0 0)) (list (list 6 32) (om-make-color 0 0 0)) (list (list 6 32 0) (om-make-color 0 0 0)) (list (list 6 33) (om-make-color 0 0 0)) (list (list 6 33 0) (om-make-color 0 0 0)) (list (list 6 34) (om-make-color 0 0 0)) (list (list 6 34 0) (om-make-color 0 0 0)) (list (list 6 35) (om-make-color 0 0 0)) (list (list 6 35 0) (om-make-color 0 0 0)) (list (list 6 36) (om-make-color 0 0 0)) (list (list 6 36 0) (om-make-color 0 0 0)) (list (list 6 37) (om-make-color 0 0 0)) (list (list 6 37 0) (om-make-color 0 0 0)) (list (list 6 38) (om-make-color 0 0 0)) (list (list 6 38 0) (om-make-color 0 0 0)) (list (list 6 39) (om-make-color 0 0 0)) (list (list 6 39 0) (om-make-color 0 0 0)) (list (list 6 40) (om-make-color 0 0 0)) (list (list 6 40 0) (om-make-color 0 0 0)) (list (list 6 41) (om-make-color 0 0 0)) (list (list 6 41 0) (om-make-color 0 0 0)) (list (list 6 42) (om-make-color 0 0 0)) (list (list 6 42 0) (om-make-color 0 0 0)) (list (list 6 43) (om-make-color 0 0 0)) (list (list 6 43 0) (om-make-color 0 0 0)) (list (list 6 44) (om-make-color 0 0 0)) (list (list 6 44 0) (om-make-color 0 0 0)) (list (list 6 45) (om-make-color 0 0 0)) (list (list 6 45 0) (om-make-color 0 0 0)) (list (list 6 46) (om-make-color 0 0 0)) (list (list 6 46 0) (om-make-color 0 0 0)) (list (list 6 47) (om-make-color 0 0 0)) (list (list 6 47 0) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 0 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 1 0) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 2 0) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 3 0) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 4 0) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 5 0) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 6 0) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 7 0) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 8 0) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 7 9 0) (om-make-color 0 0 0)) (list (list 7 10) (om-make-color 0 0 0)) (list (list 7 10 0) (om-make-color 0 0 0)) (list (list 7 11) (om-make-color 0 0 0)) (list (list 7 11 0) (om-make-color 0 0 0)) (list (list 7 12) (om-make-color 0 0 0)) (list (list 7 12 0) (om-make-color 0 0 0)) (list (list 7 13) (om-make-color 0 0 0)) (list (list 7 13 0) (om-make-color 0 0 0)) (list (list 7 14) (om-make-color 0 0 0)) (list (list 7 14 0) (om-make-color 0 0 0)) (list (list 7 15) (om-make-color 0 0 0)) (list (list 7 15 0) (om-make-color 0 0 0)) (list (list 7 16) (om-make-color 0 0 0)) (list (list 7 16 0) (om-make-color 0 0 0)) (list (list 7 17) (om-make-color 0 0 0)) (list (list 7 17 0) (om-make-color 0 0 0)) (list (list 7 18) (om-make-color 0 0 0)) (list (list 7 18 0) (om-make-color 0 0 0)) (list (list 7 19) (om-make-color 0 0 0)) (list (list 7 19 0) (om-make-color 0 0 0)) (list (list 7 20) (om-make-color 0 0 0)) (list (list 7 20 0) (om-make-color 0 0 0)) (list (list 7 21) (om-make-color 0 0 0)) (list (list 7 21 0) (om-make-color 0 0 0)) (list (list 7 22) (om-make-color 0 0 0)) (list (list 7 22 0) (om-make-color 0 0 0)) (list (list 7 23) (om-make-color 0 0 0)) (list (list 7 23 0) (om-make-color 0 0 0)) (list (list 7 24) (om-make-color 0 0 0)) (list (list 7 24 0) (om-make-color 0 0 0)) (list (list 7 25) (om-make-color 0 0 0)) (list (list 7 25 0) (om-make-color 0 0 0)) (list (list 7 26) (om-make-color 0 0 0)) (list (list 7 26 0) (om-make-color 0 0 0)) (list (list 7 27) (om-make-color 0 0 0)) (list (list 7 27 0) (om-make-color 0 0 0)) (list (list 7 28) (om-make-color 0 0 0)) (list (list 7 28 0) (om-make-color 0 0 0)) (list (list 7 29) (om-make-color 0 0 0)) (list (list 7 29 0) (om-make-color 0 0 0)) (list (list 7 30) (om-make-color 0 0 0)) (list (list 7 30 0) (om-make-color 0 0 0)) (list (list 7 31) (om-make-color 0 0 0)) (list (list 7 31 0) (om-make-color 0 0 0)) (list (list 7 32) (om-make-color 0 0 0)) (list (list 7 32 0) (om-make-color 0 0 0)) (list (list 7 33) (om-make-color 0 0 0)) (list (list 7 33 0) (om-make-color 0 0 0)) (list (list 7 34) (om-make-color 0 0 0)) (list (list 7 34 0) (om-make-color 0 0 0)) (list (list 7 35) (om-make-color 0 0 0)) (list (list 7 35 0) (om-make-color 0 0 0)) (list (list 7 36) (om-make-color 0 0 0)) (list (list 7 36 0) (om-make-color 0 0 0)) (list (list 7 37) (om-make-color 0 0 0)) (list (list 7 37 0) (om-make-color 0 0 0)) (list (list 7 38) (om-make-color 0 0 0)) (list (list 7 38 0) (om-make-color 0 0 0)) (list (list 7 39) (om-make-color 0 0 0)) (list (list 7 39 0) (om-make-color 0 0 0)) (list (list 7 40) (om-make-color 0 0 0)) (list (list 7 40 0) (om-make-color 0 0 0)) (list (list 7 41) (om-make-color 0 0 0)) (list (list 7 41 0) (om-make-color 0 0 0)) (list (list 7 42) (om-make-color 0 0 0)) (list (list 7 42 0) (om-make-color 0 0 0)) (list (list 7 43) (om-make-color 0 0 0)) (list (list 7 43 0) (om-make-color 0 0 0)) (list (list 7 44) (om-make-color 0 0 0)) (list (list 7 44 0) (om-make-color 0 0 0)) (list (list 7 45) (om-make-color 0 0 0)) (list (list 7 45 0) (om-make-color 0 0 0)) (list (list 7 46) (om-make-color 0 0 0)) (list (list 7 46 0) (om-make-color 0 0 0)) (list (list 7 47) (om-make-color 0 0 0)) (list (list 7 47 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 0 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 1 0) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 2 0) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 3 0) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 4 0) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 5 0) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 6 0) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 7 0) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 8 0) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 8 9 0) (om-make-color 0 0 0)) (list (list 8 10) (om-make-color 0 0 0)) (list (list 8 10 0) (om-make-color 0 0 0)) (list (list 8 11) (om-make-color 0 0 0)) (list (list 8 11 0) (om-make-color 0 0 0)) (list (list 8 12) (om-make-color 0 0 0)) (list (list 8 12 0) (om-make-color 0 0 0)) (list (list 8 13) (om-make-color 0 0 0)) (list (list 8 13 0) (om-make-color 0 0 0)) (list (list 8 14) (om-make-color 0 0 0)) (list (list 8 14 0) (om-make-color 0 0 0)) (list (list 8 15) (om-make-color 0 0 0)) (list (list 8 15 0) (om-make-color 0 0 0)) (list (list 8 16) (om-make-color 0 0 0)) (list (list 8 16 0) (om-make-color 0 0 0)) (list (list 8 17) (om-make-color 0 0 0)) (list (list 8 17 0) (om-make-color 0 0 0)) (list (list 8 18) (om-make-color 0 0 0)) (list (list 8 18 0) (om-make-color 0 0 0)) (list (list 8 19) (om-make-color 0 0 0)) (list (list 8 19 0) (om-make-color 0 0 0)) (list (list 8 20) (om-make-color 0 0 0)) (list (list 8 20 0) (om-make-color 0 0 0)) (list (list 8 21) (om-make-color 0 0 0)) (list (list 8 21 0) (om-make-color 0 0 0)) (list (list 8 22) (om-make-color 0 0 0)) (list (list 8 22 0) (om-make-color 0 0 0)) (list (list 8 23) (om-make-color 0 0 0)) (list (list 8 23 0) (om-make-color 0 0 0)) (list (list 8 24) (om-make-color 0 0 0)) (list (list 8 24 0) (om-make-color 0 0 0)) (list (list 8 25) (om-make-color 0 0 0)) (list (list 8 25 0) (om-make-color 0 0 0)) (list (list 8 26) (om-make-color 0 0 0)) (list (list 8 26 0) (om-make-color 0 0 0)) (list (list 8 27) (om-make-color 0 0 0)) (list (list 8 27 0) (om-make-color 0 0 0)) (list (list 8 28) (om-make-color 0 0 0)) (list (list 8 28 0) (om-make-color 0 0 0)) (list (list 8 29) (om-make-color 0 0 0)) (list (list 8 29 0) (om-make-color 0 0 0)) (list (list 8 30) (om-make-color 0 0 0)) (list (list 8 30 0) (om-make-color 0 0 0)) (list (list 8 31) (om-make-color 0 0 0)) (list (list 8 31 0) (om-make-color 0 0 0)) (list (list 8 32) (om-make-color 0 0 0)) (list (list 8 32 0) (om-make-color 0 0 0)) (list (list 8 33) (om-make-color 0 0 0)) (list (list 8 33 0) (om-make-color 0 0 0)) (list (list 8 34) (om-make-color 0 0 0)) (list (list 8 34 0) (om-make-color 0 0 0)) (list (list 8 35) (om-make-color 0 0 0)) (list (list 8 35 0) (om-make-color 0 0 0)) (list (list 8 36) (om-make-color 0 0 0)) (list (list 8 36 0) (om-make-color 0 0 0)) (list (list 8 37) (om-make-color 0 0 0)) (list (list 8 37 0) (om-make-color 0 0 0)) (list (list 8 38) (om-make-color 0 0 0)) (list (list 8 38 0) (om-make-color 0 0 0)) (list (list 8 39) (om-make-color 0 0 0)) (list (list 8 39 0) (om-make-color 0 0 0)) (list (list 8 40) (om-make-color 0 0 0)) (list (list 8 40 0) (om-make-color 0 0 0)) (list (list 8 41) (om-make-color 0 0 0)) (list (list 8 41 0) (om-make-color 0 0 0)) (list (list 8 42) (om-make-color 0 0 0)) (list (list 8 42 0) (om-make-color 0 0 0)) (list (list 8 43) (om-make-color 0 0 0)) (list (list 8 43 0) (om-make-color 0 0 0)) (list (list 8 44) (om-make-color 0 0 0)) (list (list 8 44 0) (om-make-color 0 0 0)) (list (list 8 45) (om-make-color 0 0 0)) (list (list 8 45 0) (om-make-color 0 0 0)) (list (list 8 46) (om-make-color 0 0 0)) (list (list 8 46 0) (om-make-color 0 0 0)) (list (list 8 47) (om-make-color 0 0 0)) (list (list 8 47 0) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 0 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 1 0) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 2 0) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 3 0) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 4 0) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 5 0) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 6 0) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 7 0) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 8 0) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 9 9 0) (om-make-color 0 0 0)) (list (list 9 10) (om-make-color 0 0 0)) (list (list 9 10 0) (om-make-color 0 0 0)) (list (list 9 11) (om-make-color 0 0 0)) (list (list 9 11 0) (om-make-color 0 0 0)) (list (list 9 12) (om-make-color 0 0 0)) (list (list 9 12 0) (om-make-color 0 0 0)) (list (list 9 13) (om-make-color 0 0 0)) (list (list 9 13 0) (om-make-color 0 0 0)) (list (list 9 14) (om-make-color 0 0 0)) (list (list 9 14 0) (om-make-color 0 0 0)) (list (list 9 15) (om-make-color 0 0 0)) (list (list 9 15 0) (om-make-color 0 0 0)) (list (list 9 16) (om-make-color 0 0 0)) (list (list 9 16 0) (om-make-color 0 0 0)) (list (list 9 17) (om-make-color 0 0 0)) (list (list 9 17 0) (om-make-color 0 0 0)) (list (list 9 18) (om-make-color 0 0 0)) (list (list 9 18 0) (om-make-color 0 0 0)) (list (list 9 19) (om-make-color 0 0 0)) (list (list 9 19 0) (om-make-color 0 0 0)) (list (list 9 20) (om-make-color 0 0 0)) (list (list 9 20 0) (om-make-color 0 0 0)) (list (list 9 21) (om-make-color 0 0 0)) (list (list 9 21 0) (om-make-color 0 0 0)) (list (list 9 22) (om-make-color 0 0 0)) (list (list 9 22 0) (om-make-color 0 0 0)) (list (list 9 23) (om-make-color 0 0 0)) (list (list 9 23 0) (om-make-color 0 0 0)) (list (list 9 24) (om-make-color 0 0 0)) (list (list 9 24 0) (om-make-color 0 0 0)) (list (list 9 25) (om-make-color 0 0 0)) (list (list 9 25 0) (om-make-color 0 0 0)) (list (list 9 26) (om-make-color 0 0 0)) (list (list 9 26 0) (om-make-color 0 0 0)) (list (list 9 27) (om-make-color 0 0 0)) (list (list 9 27 0) (om-make-color 0 0 0)) (list (list 9 28) (om-make-color 0 0 0)) (list (list 9 28 0) (om-make-color 0 0 0)) (list (list 9 29) (om-make-color 0 0 0)) (list (list 9 29 0) (om-make-color 0 0 0)) (list (list 9 30) (om-make-color 0 0 0)) (list (list 9 30 0) (om-make-color 0 0 0)) (list (list 9 31) (om-make-color 0 0 0)) (list (list 9 31 0) (om-make-color 0 0 0)) (list (list 9 32) (om-make-color 0 0 0)) (list (list 9 32 0) (om-make-color 0 0 0)) (list (list 9 33) (om-make-color 0 0 0)) (list (list 9 33 0) (om-make-color 0 0 0)) (list (list 9 34) (om-make-color 0 0 0)) (list (list 9 34 0) (om-make-color 0 0 0)) (list (list 9 35) (om-make-color 0 0 0)) (list (list 9 35 0) (om-make-color 0 0 0)) (list (list 9 36) (om-make-color 0 0 0)) (list (list 9 36 0) (om-make-color 0 0 0)) (list (list 9 37) (om-make-color 0 0 0)) (list (list 9 37 0) (om-make-color 0 0 0)) (list (list 9 38) (om-make-color 0 0 0)) (list (list 9 38 0) (om-make-color 0 0 0)) (list (list 9 39) (om-make-color 0 0 0)) (list (list 9 39 0) (om-make-color 0 0 0)) (list (list 9 40) (om-make-color 0 0 0)) (list (list 9 40 0) (om-make-color 0 0 0)) (list (list 9 41) (om-make-color 0 0 0)) (list (list 9 41 0) (om-make-color 0 0 0)) (list (list 9 42) (om-make-color 0 0 0)) (list (list 9 42 0) (om-make-color 0 0 0)) (list (list 9 43) (om-make-color 0 0 0)) (list (list 9 43 0) (om-make-color 0 0 0)) (list (list 9 44) (om-make-color 0 0 0)) (list (list 9 44 0) (om-make-color 0 0 0)) (list (list 9 45) (om-make-color 0 0 0)) (list (list 9 45 0) (om-make-color 0 0 0)) (list (list 9 46) (om-make-color 0 0 0)) (list (list 9 46 0) (om-make-color 0 0 0)) (list (list 9 47) (om-make-color 0 0 0)) (list (list 9 47 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 0 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 1 0) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 2 0) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 3 0) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 4 0) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 5 0) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 6 0) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 7 0) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 8 0) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)) (list (list 10 9 0) (om-make-color 0 0 0)) (list (list 10 10) (om-make-color 0 0 0)) (list (list 10 10 0) (om-make-color 0 0 0)) (list (list 10 11) (om-make-color 0 0 0)) (list (list 10 11 0) (om-make-color 0 0 0)) (list (list 10 12) (om-make-color 0 0 0)) (list (list 10 12 0) (om-make-color 0 0 0)) (list (list 10 13) (om-make-color 0 0 0)) (list (list 10 13 0) (om-make-color 0 0 0)) (list (list 10 14) (om-make-color 0 0 0)) (list (list 10 14 0) (om-make-color 0 0 0)) (list (list 10 15) (om-make-color 0 0 0)) (list (list 10 15 0) (om-make-color 0 0 0)) (list (list 10 16) (om-make-color 0 0 0)) (list (list 10 16 0) (om-make-color 0 0 0)) (list (list 10 17) (om-make-color 0 0 0)) (list (list 10 17 0) (om-make-color 0 0 0)) (list (list 10 18) (om-make-color 0 0 0)) (list (list 10 18 0) (om-make-color 0 0 0)) (list (list 10 19) (om-make-color 0 0 0)) (list (list 10 19 0) (om-make-color 0 0 0)) (list (list 10 20) (om-make-color 0 0 0)) (list (list 10 20 0) (om-make-color 0 0 0)) (list (list 10 21) (om-make-color 0 0 0)) (list (list 10 21 0) (om-make-color 0 0 0)) (list (list 10 22) (om-make-color 0 0 0)) (list (list 10 22 0) (om-make-color 0 0 0)) (list (list 10 23) (om-make-color 0 0 0)) (list (list 10 23 0) (om-make-color 0 0 0)) (list (list 10 24) (om-make-color 0 0 0)) (list (list 10 24 0) (om-make-color 0 0 0)) (list (list 10 25) (om-make-color 0 0 0)) (list (list 10 25 0) (om-make-color 0 0 0)) (list (list 10 26) (om-make-color 0 0 0)) (list (list 10 26 0) (om-make-color 0 0 0)) (list (list 10 27) (om-make-color 0 0 0)) (list (list 10 27 0) (om-make-color 0 0 0)) (list (list 10 28) (om-make-color 0 0 0)) (list (list 10 28 0) (om-make-color 0 0 0)) (list (list 10 29) (om-make-color 0 0 0)) (list (list 10 29 0) (om-make-color 0 0 0)) (list (list 10 30) (om-make-color 0 0 0)) (list (list 10 30 0) (om-make-color 0 0 0)) (list (list 10 31) (om-make-color 0 0 0)) (list (list 10 31 0) (om-make-color 0 0 0)) (list (list 10 32) (om-make-color 0 0 0)) (list (list 10 32 0) (om-make-color 0 0 0)) (list (list 10 33) (om-make-color 0 0 0)) (list (list 10 33 0) (om-make-color 0 0 0)) (list (list 10 34) (om-make-color 0 0 0)) (list (list 10 34 0) (om-make-color 0 0 0)) (list (list 10 35) (om-make-color 0 0 0)) (list (list 10 35 0) (om-make-color 0 0 0)) (list (list 10 36) (om-make-color 0 0 0)) (list (list 10 36 0) (om-make-color 0 0 0)) (list (list 10 37) (om-make-color 0 0 0)) (list (list 10 37 0) (om-make-color 0 0 0)) (list (list 10 38) (om-make-color 0 0 0)) (list (list 10 38 0) (om-make-color 0 0 0)) (list (list 10 39) (om-make-color 0 0 0)) (list (list 10 39 0) (om-make-color 0 0 0)) (list (list 10 40) (om-make-color 0 0 0)) (list (list 10 40 0) (om-make-color 0 0 0)) (list (list 10 41) (om-make-color 0 0 0)) (list (list 10 41 0) (om-make-color 0 0 0)) (list (list 10 42) (om-make-color 0 0 0)) (list (list 10 42 0) (om-make-color 0 0 0)) (list (list 10 43) (om-make-color 0 0 0)) (list (list 10 43 0) (om-make-color 0 0 0)) (list (list 10 44) (om-make-color 0 0 0)) (list (list 10 44 0) (om-make-color 0 0 0)) (list (list 10 45) (om-make-color 0 0 0)) (list (list 10 45 0) (om-make-color 0 0 0)) (list (list 10 46) (om-make-color 0 0 0)) (list (list 10 46 0) (om-make-color 0 0 0)) (list (list 10 47) (om-make-color 0 0 0)) (list (list 10 47 0) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 0 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 1 0) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 2 0) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 3 0) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 4 0) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 5 0) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 6 0) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 7 0) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 11 8 0) (om-make-color 0 0 0)) (list (list 11 9) (om-make-color 0 0 0)) (list (list 11 9 0) (om-make-color 0 0 0)) (list (list 11 10) (om-make-color 0 0 0)) (list (list 11 10 0) (om-make-color 0 0 0)) (list (list 11 11) (om-make-color 0 0 0)) (list (list 11 11 0) (om-make-color 0 0 0)) (list (list 11 12) (om-make-color 0 0 0)) (list (list 11 12 0) (om-make-color 0 0 0)) (list (list 11 13) (om-make-color 0 0 0)) (list (list 11 13 0) (om-make-color 0 0 0)) (list (list 11 14) (om-make-color 0 0 0)) (list (list 11 14 0) (om-make-color 0 0 0)) (list (list 11 15) (om-make-color 0 0 0)) (list (list 11 15 0) (om-make-color 0 0 0)) (list (list 11 16) (om-make-color 0 0 0)) (list (list 11 16 0) (om-make-color 0 0 0)) (list (list 11 17) (om-make-color 0 0 0)) (list (list 11 17 0) (om-make-color 0 0 0)) (list (list 11 18) (om-make-color 0 0 0)) (list (list 11 18 0) (om-make-color 0 0 0)) (list (list 11 19) (om-make-color 0 0 0)) (list (list 11 19 0) (om-make-color 0 0 0)) (list (list 11 20) (om-make-color 0 0 0)) (list (list 11 20 0) (om-make-color 0 0 0)) (list (list 11 21) (om-make-color 0 0 0)) (list (list 11 21 0) (om-make-color 0 0 0)) (list (list 11 22) (om-make-color 0 0 0)) (list (list 11 22 0) (om-make-color 0 0 0)) (list (list 11 23) (om-make-color 0 0 0)) (list (list 11 23 0) (om-make-color 0 0 0)) (list (list 11 24) (om-make-color 0 0 0)) (list (list 11 24 0) (om-make-color 0 0 0)) (list (list 11 25) (om-make-color 0 0 0)) (list (list 11 25 0) (om-make-color 0 0 0)) (list (list 11 26) (om-make-color 0 0 0)) (list (list 11 26 0) (om-make-color 0 0 0)) (list (list 11 27) (om-make-color 0 0 0)) (list (list 11 27 0) (om-make-color 0 0 0)) (list (list 11 28) (om-make-color 0 0 0)) (list (list 11 28 0) (om-make-color 0 0 0)) (list (list 11 29) (om-make-color 0 0 0)) (list (list 11 29 0) (om-make-color 0 0 0)) (list (list 11 30) (om-make-color 0 0 0)) (list (list 11 30 0) (om-make-color 0 0 0)) (list (list 11 31) (om-make-color 0 0 0)) (list (list 11 31 0) (om-make-color 0 0 0)) (list (list 11 32) (om-make-color 0 0 0)) (list (list 11 32 0) (om-make-color 0 0 0)) (list (list 11 33) (om-make-color 0 0 0)) (list (list 11 33 0) (om-make-color 0 0 0)) (list (list 11 34) (om-make-color 0 0 0)) (list (list 11 34 0) (om-make-color 0 0 0)) (list (list 11 35) (om-make-color 0 0 0)) (list (list 11 35 0) (om-make-color 0 0 0)) (list (list 11 36) (om-make-color 0 0 0)) (list (list 11 36 0) (om-make-color 0 0 0)) (list (list 11 37) (om-make-color 0 0 0)) (list (list 11 37 0) (om-make-color 0 0 0)) (list (list 11 38) (om-make-color 0 0 0)) (list (list 11 38 0) (om-make-color 0 0 0)) (list (list 11 39) (om-make-color 0 0 0)) (list (list 11 39 0) (om-make-color 0 0 0)) (list (list 11 40) (om-make-color 0 0 0)) (list (list 11 40 0) (om-make-color 0 0 0)) (list (list 11 41) (om-make-color 0 0 0)) (list (list 11 41 0) (om-make-color 0 0 0)) (list (list 11 42) (om-make-color 0 0 0)) (list (list 11 42 0) (om-make-color 0 0 0)) (list (list 11 43) (om-make-color 0 0 0)) (list (list 11 43 0) (om-make-color 0 0 0)) (list (list 11 44) (om-make-color 0 0 0)) (list (list 11 44 0) (om-make-color 0 0 0)) (list (list 11 45) (om-make-color 0 0 0)) (list (list 11 45 0) (om-make-color 0 0 0)) (list (list 11 46) (om-make-color 0 0 0)) (list (list 11 46 0) (om-make-color 0 0 0)) (list (list 11 47) (om-make-color 0 0 0)) (list (list 11 47 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 150 nil 133/100 1 1 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1 1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g) 24 2 't))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 398 93) (om-make-point 91 91) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 8 16 18 26 34)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos) (list 't 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 528 70) (om-make-point 78 88) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 13 19 20 24 25 44 48 49 55 61 68)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict) (list 't 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'genfun "ROTATE" 'rotate '((om-load-inputfun 'input-funbox "the list" "LIST" nil) (om-load-inputfun 'input-funbox "nth" "NTH" 1)) (om-make-point 437 265) nil nil nil nil 1) (om-load-boxcall 'lispfun "REVERSE" 'reverse '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 382 276) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 575 427) (om-make-point 195 228) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 15 19 24 30 36 39 43 60 63 66 67) (list 8 23 27 32 38 44 47 51 68 71 2 3) (list 16 31 35 40 46 52 55 59 4 7 10 11) (list 18 33 37 42 48 54 57 61 6 9 12 13) (list 26 41 45 50 56 62 65 69 14 17 20 21) (list 34 49 53 58 64 70 1 5 22 25 28 29)) :from-file t)) "x" nil (corrige (pairlis '(show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0))) t nil nil) (om-load-boxcomment "comment" (om-make-point 36 40) '"S" "" (om-make-point 21 635) nil (om-make-color 116/255 4/51 7/51) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 40) '"S" "" (om-make-point 21 488) nil (om-make-color 116/255 4/51 7/51) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 40) '"S" "" (om-make-point 22 276) nil (om-make-color 116/255 4/51 7/51) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 40) '"R" "" (om-make-point 26 148) nil (om-make-color 46/255 62/255 43/85) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 40) '"R" "" (om-make-point 26 398) nil (om-make-color 46/255 62/255 43/85) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 36 40) '"R" "" (om-make-point 24 589) nil (om-make-color 46/255 62/255 43/85) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 266 83) '"(1 3 3 6 11 4 9 6 5 1 3 20) $$(8 8 2 8 8 38)$" "" (om-make-point 69 592) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 268 179) '"(1 3 3 6 11 4 9 6 5 1 3 20) $(1 4 1 19 4 1 6 6 7 4 13 6) $(1 5 15 4 5 6 6 3 4 17 3 3)$$(8 8 2 8 8 38) $(16 2 14 2 16 22) $(14 8 10 8 14 18)$" "" (om-make-point 69 375) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcall 'lispfun "CAR" 'car '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 837 217) nil nil nil nil 1) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 697 215) (om-make-point 32 20) 6000 "6000" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 731 170) (om-make-point 20 20) 100 "100" nil) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 782 199) nil nil nil nil 1) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 736 237) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 808 97) (om-make-point 149 20) (list 0 1 2 3 4 5 6 7 8 9 10 11) "(0 1 2 3 4 5 6 7 8 9 10 11)" nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 1 2 3 4 5 6 7 8 9 10 11))) (om-make-point 855 138) (om-make-point 59 66) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 2 3 4 5 6 7 8 9 10 11)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 574 225) (om-make-point 20 20) 3 "3" nil) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 638 279) (om-make-point 345 83) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'patch-box "set-serie" '("elements" "mathTools" "tools" "set-serie") '((om-load-inputfun 'input-funbox "no documentation" "multi" nil) (om-load-inputfun 'input-funbox "no documentation" "serie" nil) (om-load-inputfun 'input-funbox "no documentation" "times" 4)) (om-make-point 505 359) nil nil nil nil 1) (om-load-editor-box1 "MULTI-SEQ1" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 371 428) (om-make-point 189 221) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(0 2600 3800 4000 4800 5000 8800 9600 9800 11000 12200 13600 14400 17000 18200 18400 19200 19400 23200 24000 24200 25400 26600 28000 28800 31400 32600 32800 33600 33800 37600 38400 38600 39800 41000 42400 50600 58800 67000 75200 83400 91600 99800 108000 116200 124400 132600 140800 149000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(1600 4200 5400 5600 6400 6600 10400 11200 11400 12600 13800 15200 16000 18600 19800 20000 20800 21000 24800 25600 25800 27000 28200 29600 30400 33000 34200 34400 35200 35400 39200 40000 40200 41400 42600 44000 50600 57200 63800 70400 77000 83600 90200 96800 103400 110000 116600 123200 149000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(3200 5800 7000 7200 8000 8200 12000 12800 13000 14200 15400 16800 17600 20200 21400 21600 22400 22600 26400 27200 27400 28600 29800 31200 32000 34600 35800 36000 36800 37000 40800 41600 41800 43000 44200 45600 50600 55600 60600 65600 70600 75600 80600 85600 90600 95600 100600 105600 149000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(3600 6200 7400 7600 8400 8600 12400 13200 13400 14600 15800 17200 18000 20600 21800 22000 22800 23000 26800 27600 27800 29000 30200 31600 32400 35000 36200 36400 37200 37400 41200 42000 42200 43400 44600 46000 50600 55200 59800 64400 69000 73600 78200 82800 87400 92000 96600 101200 149000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(5200 7800 9000 9200 10000 10200 14000 14800 15000 16200 17400 18800 19600 22200 23400 23600 24400 24600 28400 29200 29400 30600 31800 33200 34000 36600 37800 38000 38800 39000 42800 43600 43800 45000 46200 47600 50600 53600 56600 59600 62600 65600 68600 71600 74600 77600 80600 83600 149000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100)) :lonset '(6800 9400 10600 10800 11600 11800 15600 16400 16600 17800 19000 20400 21200 23800 25000 25200 26000 26200 30000 30800 31000 32200 33400 34800 35600 38200 39400 39600 40400 40600 44400 45200 45400 46600 47800 49200 50600 52000 53400 54800 56200 57600 59000 60400 61800 63200 64600 66000 149000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 0 28) (om-make-color 0 0 0)) (list (list 0 28 0) (om-make-color 0 0 0)) (list (list 0 29) (om-make-color 0 0 0)) (list (list 0 29 0) (om-make-color 0 0 0)) (list (list 0 30) (om-make-color 0 0 0)) (list (list 0 30 0) (om-make-color 0 0 0)) (list (list 0 31) (om-make-color 0 0 0)) (list (list 0 31 0) (om-make-color 0 0 0)) (list (list 0 32) (om-make-color 0 0 0)) (list (list 0 32 0) (om-make-color 0 0 0)) (list (list 0 33) (om-make-color 0 0 0)) (list (list 0 33 0) (om-make-color 0 0 0)) (list (list 0 34) (om-make-color 0 0 0)) (list (list 0 34 0) (om-make-color 0 0 0)) (list (list 0 35) (om-make-color 0 0 0)) (list (list 0 35 0) (om-make-color 0 0 0)) (list (list 0 36) (om-make-color 0 0 0)) (list (list 0 36 0) (om-make-color 0 0 0)) (list (list 0 37) (om-make-color 0 0 0)) (list (list 0 37 0) (om-make-color 0 0 0)) (list (list 0 38) (om-make-color 0 0 0)) (list (list 0 38 0) (om-make-color 0 0 0)) (list (list 0 39) (om-make-color 0 0 0)) (list (list 0 39 0) (om-make-color 0 0 0)) (list (list 0 40) (om-make-color 0 0 0)) (list (list 0 40 0) (om-make-color 0 0 0)) (list (list 0 41) (om-make-color 0 0 0)) (list (list 0 41 0) (om-make-color 0 0 0)) (list (list 0 42) (om-make-color 0 0 0)) (list (list 0 42 0) (om-make-color 0 0 0)) (list (list 0 43) (om-make-color 0 0 0)) (list (list 0 43 0) (om-make-color 0 0 0)) (list (list 0 44) (om-make-color 0 0 0)) (list (list 0 44 0) (om-make-color 0 0 0)) (list (list 0 45) (om-make-color 0 0 0)) (list (list 0 45 0) (om-make-color 0 0 0)) (list (list 0 46) (om-make-color 0 0 0)) (list (list 0 46 0) (om-make-color 0 0 0)) (list (list 0 47) (om-make-color 0 0 0)) (list (list 0 47 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 1 29) (om-make-color 0 0 0)) (list (list 1 29 0) (om-make-color 0 0 0)) (list (list 1 30) (om-make-color 0 0 0)) (list (list 1 30 0) (om-make-color 0 0 0)) (list (list 1 31) (om-make-color 0 0 0)) (list (list 1 31 0) (om-make-color 0 0 0)) (list (list 1 32) (om-make-color 0 0 0)) (list (list 1 32 0) (om-make-color 0 0 0)) (list (list 1 33) (om-make-color 0 0 0)) (list (list 1 33 0) (om-make-color 0 0 0)) (list (list 1 34) (om-make-color 0 0 0)) (list (list 1 34 0) (om-make-color 0 0 0)) (list (list 1 35) (om-make-color 0 0 0)) (list (list 1 35 0) (om-make-color 0 0 0)) (list (list 1 36) (om-make-color 0 0 0)) (list (list 1 36 0) (om-make-color 0 0 0)) (list (list 1 37) (om-make-color 0 0 0)) (list (list 1 37 0) (om-make-color 0 0 0)) (list (list 1 38) (om-make-color 0 0 0)) (list (list 1 38 0) (om-make-color 0 0 0)) (list (list 1 39) (om-make-color 0 0 0)) (list (list 1 39 0) (om-make-color 0 0 0)) (list (list 1 40) (om-make-color 0 0 0)) (list (list 1 40 0) (om-make-color 0 0 0)) (list (list 1 41) (om-make-color 0 0 0)) (list (list 1 41 0) (om-make-color 0 0 0)) (list (list 1 42) (om-make-color 0 0 0)) (list (list 1 42 0) (om-make-color 0 0 0)) (list (list 1 43) (om-make-color 0 0 0)) (list (list 1 43 0) (om-make-color 0 0 0)) (list (list 1 44) (om-make-color 0 0 0)) (list (list 1 44 0) (om-make-color 0 0 0)) (list (list 1 45) (om-make-color 0 0 0)) (list (list 1 45 0) (om-make-color 0 0 0)) (list (list 1 46) (om-make-color 0 0 0)) (list (list 1 46 0) (om-make-color 0 0 0)) (list (list 1 47) (om-make-color 0 0 0)) (list (list 1 47 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 2 30) (om-make-color 0 0 0)) (list (list 2 30 0) (om-make-color 0 0 0)) (list (list 2 31) (om-make-color 0 0 0)) (list (list 2 31 0) (om-make-color 0 0 0)) (list (list 2 32) (om-make-color 0 0 0)) (list (list 2 32 0) (om-make-color 0 0 0)) (list (list 2 33) (om-make-color 0 0 0)) (list (list 2 33 0) (om-make-color 0 0 0)) (list (list 2 34) (om-make-color 0 0 0)) (list (list 2 34 0) (om-make-color 0 0 0)) (list (list 2 35) (om-make-color 0 0 0)) (list (list 2 35 0) (om-make-color 0 0 0)) (list (list 2 36) (om-make-color 0 0 0)) (list (list 2 36 0) (om-make-color 0 0 0)) (list (list 2 37) (om-make-color 0 0 0)) (list (list 2 37 0) (om-make-color 0 0 0)) (list (list 2 38) (om-make-color 0 0 0)) (list (list 2 38 0) (om-make-color 0 0 0)) (list (list 2 39) (om-make-color 0 0 0)) (list (list 2 39 0) (om-make-color 0 0 0)) (list (list 2 40) (om-make-color 0 0 0)) (list (list 2 40 0) (om-make-color 0 0 0)) (list (list 2 41) (om-make-color 0 0 0)) (list (list 2 41 0) (om-make-color 0 0 0)) (list (list 2 42) (om-make-color 0 0 0)) (list (list 2 42 0) (om-make-color 0 0 0)) (list (list 2 43) (om-make-color 0 0 0)) (list (list 2 43 0) (om-make-color 0 0 0)) (list (list 2 44) (om-make-color 0 0 0)) (list (list 2 44 0) (om-make-color 0 0 0)) (list (list 2 45) (om-make-color 0 0 0)) (list (list 2 45 0) (om-make-color 0 0 0)) (list (list 2 46) (om-make-color 0 0 0)) (list (list 2 46 0) (om-make-color 0 0 0)) (list (list 2 47) (om-make-color 0 0 0)) (list (list 2 47 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 3 18) (om-make-color 0 0 0)) (list (list 3 18 0) (om-make-color 0 0 0)) (list (list 3 19) (om-make-color 0 0 0)) (list (list 3 19 0) (om-make-color 0 0 0)) (list (list 3 20) (om-make-color 0 0 0)) (list (list 3 20 0) (om-make-color 0 0 0)) (list (list 3 21) (om-make-color 0 0 0)) (list (list 3 21 0) (om-make-color 0 0 0)) (list (list 3 22) (om-make-color 0 0 0)) (list (list 3 22 0) (om-make-color 0 0 0)) (list (list 3 23) (om-make-color 0 0 0)) (list (list 3 23 0) (om-make-color 0 0 0)) (list (list 3 24) (om-make-color 0 0 0)) (list (list 3 24 0) (om-make-color 0 0 0)) (list (list 3 25) (om-make-color 0 0 0)) (list (list 3 25 0) (om-make-color 0 0 0)) (list (list 3 26) (om-make-color 0 0 0)) (list (list 3 26 0) (om-make-color 0 0 0)) (list (list 3 27) (om-make-color 0 0 0)) (list (list 3 27 0) (om-make-color 0 0 0)) (list (list 3 28) (om-make-color 0 0 0)) (list (list 3 28 0) (om-make-color 0 0 0)) (list (list 3 29) (om-make-color 0 0 0)) (list (list 3 29 0) (om-make-color 0 0 0)) (list (list 3 30) (om-make-color 0 0 0)) (list (list 3 30 0) (om-make-color 0 0 0)) (list (list 3 31) (om-make-color 0 0 0)) (list (list 3 31 0) (om-make-color 0 0 0)) (list (list 3 32) (om-make-color 0 0 0)) (list (list 3 32 0) (om-make-color 0 0 0)) (list (list 3 33) (om-make-color 0 0 0)) (list (list 3 33 0) (om-make-color 0 0 0)) (list (list 3 34) (om-make-color 0 0 0)) (list (list 3 34 0) (om-make-color 0 0 0)) (list (list 3 35) (om-make-color 0 0 0)) (list (list 3 35 0) (om-make-color 0 0 0)) (list (list 3 36) (om-make-color 0 0 0)) (list (list 3 36 0) (om-make-color 0 0 0)) (list (list 3 37) (om-make-color 0 0 0)) (list (list 3 37 0) (om-make-color 0 0 0)) (list (list 3 38) (om-make-color 0 0 0)) (list (list 3 38 0) (om-make-color 0 0 0)) (list (list 3 39) (om-make-color 0 0 0)) (list (list 3 39 0) (om-make-color 0 0 0)) (list (list 3 40) (om-make-color 0 0 0)) (list (list 3 40 0) (om-make-color 0 0 0)) (list (list 3 41) (om-make-color 0 0 0)) (list (list 3 41 0) (om-make-color 0 0 0)) (list (list 3 42) (om-make-color 0 0 0)) (list (list 3 42 0) (om-make-color 0 0 0)) (list (list 3 43) (om-make-color 0 0 0)) (list (list 3 43 0) (om-make-color 0 0 0)) (list (list 3 44) (om-make-color 0 0 0)) (list (list 3 44 0) (om-make-color 0 0 0)) (list (list 3 45) (om-make-color 0 0 0)) (list (list 3 45 0) (om-make-color 0 0 0)) (list (list 3 46) (om-make-color 0 0 0)) (list (list 3 46 0) (om-make-color 0 0 0)) (list (list 3 47) (om-make-color 0 0 0)) (list (list 3 47 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 4 18) (om-make-color 0 0 0)) (list (list 4 18 0) (om-make-color 0 0 0)) (list (list 4 19) (om-make-color 0 0 0)) (list (list 4 19 0) (om-make-color 0 0 0)) (list (list 4 20) (om-make-color 0 0 0)) (list (list 4 20 0) (om-make-color 0 0 0)) (list (list 4 21) (om-make-color 0 0 0)) (list (list 4 21 0) (om-make-color 0 0 0)) (list (list 4 22) (om-make-color 0 0 0)) (list (list 4 22 0) (om-make-color 0 0 0)) (list (list 4 23) (om-make-color 0 0 0)) (list (list 4 23 0) (om-make-color 0 0 0)) (list (list 4 24) (om-make-color 0 0 0)) (list (list 4 24 0) (om-make-color 0 0 0)) (list (list 4 25) (om-make-color 0 0 0)) (list (list 4 25 0) (om-make-color 0 0 0)) (list (list 4 26) (om-make-color 0 0 0)) (list (list 4 26 0) (om-make-color 0 0 0)) (list (list 4 27) (om-make-color 0 0 0)) (list (list 4 27 0) (om-make-color 0 0 0)) (list (list 4 28) (om-make-color 0 0 0)) (list (list 4 28 0) (om-make-color 0 0 0)) (list (list 4 29) (om-make-color 0 0 0)) (list (list 4 29 0) (om-make-color 0 0 0)) (list (list 4 30) (om-make-color 0 0 0)) (list (list 4 30 0) (om-make-color 0 0 0)) (list (list 4 31) (om-make-color 0 0 0)) (list (list 4 31 0) (om-make-color 0 0 0)) (list (list 4 32) (om-make-color 0 0 0)) (list (list 4 32 0) (om-make-color 0 0 0)) (list (list 4 33) (om-make-color 0 0 0)) (list (list 4 33 0) (om-make-color 0 0 0)) (list (list 4 34) (om-make-color 0 0 0)) (list (list 4 34 0) (om-make-color 0 0 0)) (list (list 4 35) (om-make-color 0 0 0)) (list (list 4 35 0) (om-make-color 0 0 0)) (list (list 4 36) (om-make-color 0 0 0)) (list (list 4 36 0) (om-make-color 0 0 0)) (list (list 4 37) (om-make-color 0 0 0)) (list (list 4 37 0) (om-make-color 0 0 0)) (list (list 4 38) (om-make-color 0 0 0)) (list (list 4 38 0) (om-make-color 0 0 0)) (list (list 4 39) (om-make-color 0 0 0)) (list (list 4 39 0) (om-make-color 0 0 0)) (list (list 4 40) (om-make-color 0 0 0)) (list (list 4 40 0) (om-make-color 0 0 0)) (list (list 4 41) (om-make-color 0 0 0)) (list (list 4 41 0) (om-make-color 0 0 0)) (list (list 4 42) (om-make-color 0 0 0)) (list (list 4 42 0) (om-make-color 0 0 0)) (list (list 4 43) (om-make-color 0 0 0)) (list (list 4 43 0) (om-make-color 0 0 0)) (list (list 4 44) (om-make-color 0 0 0)) (list (list 4 44 0) (om-make-color 0 0 0)) (list (list 4 45) (om-make-color 0 0 0)) (list (list 4 45 0) (om-make-color 0 0 0)) (list (list 4 46) (om-make-color 0 0 0)) (list (list 4 46 0) (om-make-color 0 0 0)) (list (list 4 47) (om-make-color 0 0 0)) (list (list 4 47 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 5 18) (om-make-color 0 0 0)) (list (list 5 18 0) (om-make-color 0 0 0)) (list (list 5 19) (om-make-color 0 0 0)) (list (list 5 19 0) (om-make-color 0 0 0)) (list (list 5 20) (om-make-color 0 0 0)) (list (list 5 20 0) (om-make-color 0 0 0)) (list (list 5 21) (om-make-color 0 0 0)) (list (list 5 21 0) (om-make-color 0 0 0)) (list (list 5 22) (om-make-color 0 0 0)) (list (list 5 22 0) (om-make-color 0 0 0)) (list (list 5 23) (om-make-color 0 0 0)) (list (list 5 23 0) (om-make-color 0 0 0)) (list (list 5 24) (om-make-color 0 0 0)) (list (list 5 24 0) (om-make-color 0 0 0)) (list (list 5 25) (om-make-color 0 0 0)) (list (list 5 25 0) (om-make-color 0 0 0)) (list (list 5 26) (om-make-color 0 0 0)) (list (list 5 26 0) (om-make-color 0 0 0)) (list (list 5 27) (om-make-color 0 0 0)) (list (list 5 27 0) (om-make-color 0 0 0)) (list (list 5 28) (om-make-color 0 0 0)) (list (list 5 28 0) (om-make-color 0 0 0)) (list (list 5 29) (om-make-color 0 0 0)) (list (list 5 29 0) (om-make-color 0 0 0)) (list (list 5 30) (om-make-color 0 0 0)) (list (list 5 30 0) (om-make-color 0 0 0)) (list (list 5 31) (om-make-color 0 0 0)) (list (list 5 31 0) (om-make-color 0 0 0)) (list (list 5 32) (om-make-color 0 0 0)) (list (list 5 32 0) (om-make-color 0 0 0)) (list (list 5 33) (om-make-color 0 0 0)) (list (list 5 33 0) (om-make-color 0 0 0)) (list (list 5 34) (om-make-color 0 0 0)) (list (list 5 34 0) (om-make-color 0 0 0)) (list (list 5 35) (om-make-color 0 0 0)) (list (list 5 35 0) (om-make-color 0 0 0)) (list (list 5 36) (om-make-color 0 0 0)) (list (list 5 36 0) (om-make-color 0 0 0)) (list (list 5 37) (om-make-color 0 0 0)) (list (list 5 37 0) (om-make-color 0 0 0)) (list (list 5 38) (om-make-color 0 0 0)) (list (list 5 38 0) (om-make-color 0 0 0)) (list (list 5 39) (om-make-color 0 0 0)) (list (list 5 39 0) (om-make-color 0 0 0)) (list (list 5 40) (om-make-color 0 0 0)) (list (list 5 40 0) (om-make-color 0 0 0)) (list (list 5 41) (om-make-color 0 0 0)) (list (list 5 41 0) (om-make-color 0 0 0)) (list (list 5 42) (om-make-color 0 0 0)) (list (list 5 42 0) (om-make-color 0 0 0)) (list (list 5 43) (om-make-color 0 0 0)) (list (list 5 43 0) (om-make-color 0 0 0)) (list (list 5 44) (om-make-color 0 0 0)) (list (list 5 44 0) (om-make-color 0 0 0)) (list (list 5 45) (om-make-color 0 0 0)) (list (list 5 45 0) (om-make-color 0 0 0)) (list (list 5 46) (om-make-color 0 0 0)) (list (list 5 46 0) (om-make-color 0 0 0)) (list (list 5 47) (om-make-color 0 0 0)) (list (list 5 47 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 0 0 2621450 18350450 0 150 nil 133/100 1 1 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g) 24 2 't))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 615 222) (om-make-point 41 20) 200 "200" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 548 162) (om-make-point 94 20) (list 8 8 2 8 8 38) "(8 8 2 8 8 38)" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 368 191) (om-make-point 173 20) (list 13 6 1 4 1 19 4 1 6 6 7 4) "(13 6 1 4 1 19 4 1 6 6 7 4)" nil) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" nil) (om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" 3) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':beats)) (om-make-point 483 261) (om-make-point 143 61) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 270 253) '"(1 3 3 6 11 4 9 6 5 1 3 20) $(20 3 1 5 6 9 4 11 6 3 3 1)$(1 4 1 19 4 1 6 6 7 4 13 6) $(6 13 4 7 6 6 1 4 19 1 4 1)$(1 5 15 4 5 6 6 3 4 17 3 3)$(3 3 17 4 3 6 6 5 4 15 5 1)$$(8 8 2 8 8 38)$(16 2 14 2 16 22)$(14 8 10 8 14 18)$" "" (om-make-point 70 94) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 821 51) '"Paradigmatic list of Vuza Canons of period 72" "" (om-make-point 86 5) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((3 0 2 2 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (0 0 4 0 nil 0) (1 0 5 0 nil 0) (30 0 7 0 nil 0) (27 2 21 0 nil 0) (23 0 24 0 nil 0) (21 0 24 1 nil 0) (22 0 25 0 nil 0) (24 0 25 1 nil 0) (26 0 27 2 nil 0) (25 0 29 1 nil 0) (35 0 30 0 nil 0) (29 1 30 1 nil 0) (30 0 31 0 nil 0) (34 0 35 0 nil 0) (33 0 35 1 nil 0) (28 0 35 2 nil 0) (32 0 35 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-boiteaff|))) (setf (thepict newpict) (om-get-picture '|USER-boiteaff|)) (setf (name newpict) '|USER-boiteaff|) (setf (pict-pos newpict) (om-make-point 0 537)) (setf (pict-size newpict) (om-make-point 77 58)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-boitedn|))) (setf (thepict newpict) (om-get-picture '|USER-boitedn|)) (setf (name newpict) '|USER-boitedn|) (setf (pict-pos newpict) (om-make-point 5 338)) (setf (pict-size newpict) (om-make-point 69 54)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-boitezn|))) (setf (thepict newpict) (om-get-picture '|USER-boitezn|)) (setf (name newpict) '|USER-boitezn|) (setf (pict-pos newpict) (om-make-point 5 89)) (setf (pict-size newpict) (om-make-point 68 58)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 78 57)) (setf (pict-size newpict) (om-make-point 293 311)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 97 432)) (setf (pict-size newpict) (om-make-point 636 204)) newpict)) 5.0))
