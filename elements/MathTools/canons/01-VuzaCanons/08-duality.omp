; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 97 155) (om-make-point 50 50) (om-make-point 1073 882) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "08-duality" '((om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 873 3) (om-make-point 12 22) 6 "6" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 778 3) (om-make-point 19 22) 72 "72" nil) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 2 2 2 6))) (om-make-point 854 120) nil nil nil nil 1) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 2 2 2 6))) (om-make-point 775 118) nil nil nil nil 1) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 2 2 2 6))) (om-make-point 1068 70) nil nil nil nil 1) (om-load-boxcall 'genfun "N-SCALE" 'n-scale '((om-load-inputfun 'input-funbox "values" "L" (list 2 2 2 6))) (om-make-point 593 85) nil nil nil nil 1) (om-load-boxcall 'genfun "PATTERNS1" 'patterns '((om-load-inputfun 'input-funbox "periode" "N" 72) (om-load-inputfun 'input-funbox "numbre de voix" "NUMVOICES" 6)) (om-make-point 813 19) nil nil nil nil 2) (om-load-boxcall 'genfun "TRANSP-COMB" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72)) (om-make-point 982 141) nil nil nil nil 1) (om-load-boxcall 'genfun "TRANSP-COMB" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72)) (om-make-point 662 146) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 841 239) (om-make-point 232 254) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 8 16 18 26 34) (list 4 12 20 22 30 38) (list 5 13 21 23 31 39) (list 11 19 27 29 37 45) (list 17 25 33 35 43 51) (list 24 32 40 42 50 58) (list 28 36 44 46 54 62) (list 41 49 57 59 67 3) (list 47 55 63 65 1 9) (list 48 56 64 66 2 10) (list 52 60 68 70 6 14) (list 53 61 69 71 7 15)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) t nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 573 238) (om-make-point 232 254) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 4 5 11 17 24 28 41 47 48 52 53) (list 8 12 13 19 25 32 36 49 55 56 60 61) (list 16 20 21 27 33 40 44 57 63 64 68 69) (list 18 22 23 29 35 42 46 59 65 66 70 71) (list 26 30 31 37 43 50 54 67 1 2 6 7) (list 34 38 39 45 51 58 62 3 9 10 14 15)) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) t nil nil) (om-load-boxcomment "comment1" (om-make-point 299 48) '"Duality principle." "" (om-make-point 84 1) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 178 148) '"Duality. By changing the order of the rhythmic patterns R and S, a new canon is obtained." "" (om-make-point 381 2) nil (om-make-color 73/255 64/255 1) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 55 28) '"poly" "" (om-make-point 498 286) nil (om-make-color 4/15 59/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 94 28) '" multi-seq" "" (om-make-point 179 285) nil (om-make-color 4/15 59/255 1) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "POLY" 'poly '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "VOICES" (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(2 (((4 4) (1 (1 (1 -2 1 1)) 1 1)) ((4 4) (1 (1 (1 2 1 1)) -1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 400) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 200) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0) ((0) nil (0) (0)) (0) (0)) ((0) ((0) (0) (0) (0)) nil (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 1 0 0) (om-make-color 0 0 0)) (list (list 0 1 1) (om-make-color 0 0 0)) (list (list 0 1 2) (om-make-color 0 0 0)) (list (list 0 1 2 0) (om-make-color 0 0 0)) (list (list 0 1 3) (om-make-color 0 0 0)) (list (list 0 1 3 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 0 0) (om-make-color 0 0 0)) (list (list 1 1 1) (om-make-color 0 0 0)) (list (list 1 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 2) (om-make-color 0 0 0)) (list (list 1 1 2 0) (om-make-color 0 0 0)) (list (list 1 1 3) (om-make-color 0 0 0)) (list (list 1 1 3 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 313 306) (om-make-point 226 185) (if (find-class 'poly nil) (let ((newobj (make-instance 'poly :voices (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(111/4 (((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (-6)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(111/4 (((6 8) (-4 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(111/4 (((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(57/2 (((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(117/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(123/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (-6)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(123/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6700) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(129/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6800) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(33 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6900) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(135/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (-6)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7000) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(135/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 2 2)) ((6 8) (6.0)) ((6 8) (6)) ((6 8) (2.0 4)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7100) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(135/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 -1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 2 1)) ((6 8) (6.0)) ((6 8) (1.0 4 1.0)) ((6 8) (3.0 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1.0 -1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '((((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)) ((nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil) (nil) (nil) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil) (nil) (nil) (nil) (nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0)) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0) (0) (0)) ((0) (0)) ((0)) ((0)) ((0)) ((0)) ((0)) ((0) (0) nil)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 1 0 0) (om-make-color 0 0 0)) (list (list 0 1 1) (om-make-color 0 0 0)) (list (list 0 1 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 2 0 0) (om-make-color 0 0 0)) (list (list 0 2 1) (om-make-color 0 0 0)) (list (list 0 2 1 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 3 0 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 4 0 0) (om-make-color 0 0 0)) (list (list 0 4 1) (om-make-color 0 0 0)) (list (list 0 4 1 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 5 0 0) (om-make-color 0 0 0)) (list (list 0 5 1) (om-make-color 0 0 0)) (list (list 0 5 1 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 6 0 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 7 0 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 8 0 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 9 0 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 10 0 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 11 0 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 12 0 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 13 0 0) (om-make-color 0 0 0)) (list (list 0 13 1) (om-make-color 0 0 0)) (list (list 0 13 1 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 14 0 0) (om-make-color 0 0 0)) (list (list 0 14 1) (om-make-color 0 0 0)) (list (list 0 14 1 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 15 0 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 16 0 0) (om-make-color 0 0 0)) (list (list 0 16 1) (om-make-color 0 0 0)) (list (list 0 16 1 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 17 0 0) (om-make-color 0 0 0)) (list (list 0 17 1) (om-make-color 0 0 0)) (list (list 0 17 1 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 18 0 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 19 0 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 20 0 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 21 0 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 22 0 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 23 0 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 24 0 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 25 0 0) (om-make-color 0 0 0)) (list (list 0 25 1) (om-make-color 0 0 0)) (list (list 0 25 1 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 26 0 0) (om-make-color 0 0 0)) (list (list 0 26 1) (om-make-color 0 0 0)) (list (list 0 26 1 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 0 27 0 0) (om-make-color 0 0 0)) (list (list 0 28) (om-make-color 0 0 0)) (list (list 0 28 0) (om-make-color 0 0 0)) (list (list 0 28 0 0) (om-make-color 0 0 0)) (list (list 0 28 1) (om-make-color 0 0 0)) (list (list 0 28 1 0) (om-make-color 0 0 0)) (list (list 0 29) (om-make-color 0 0 0)) (list (list 0 29 0) (om-make-color 0 0 0)) (list (list 0 29 0 0) (om-make-color 0 0 0)) (list (list 0 29 1) (om-make-color 0 0 0)) (list (list 0 29 1 0) (om-make-color 0 0 0)) (list (list 0 30) (om-make-color 0 0 0)) (list (list 0 30 0) (om-make-color 0 0 0)) (list (list 0 30 0 0) (om-make-color 0 0 0)) (list (list 0 31) (om-make-color 0 0 0)) (list (list 0 31 0) (om-make-color 0 0 0)) (list (list 0 31 0 0) (om-make-color 0 0 0)) (list (list 0 32) (om-make-color 0 0 0)) (list (list 0 32 0) (om-make-color 0 0 0)) (list (list 0 32 0 0) (om-make-color 0 0 0)) (list (list 0 33) (om-make-color 0 0 0)) (list (list 0 33 0) (om-make-color 0 0 0)) (list (list 0 33 0 0) (om-make-color 0 0 0)) (list (list 0 34) (om-make-color 0 0 0)) (list (list 0 34 0) (om-make-color 0 0 0)) (list (list 0 34 0 0) (om-make-color 0 0 0)) (list (list 0 35) (om-make-color 0 0 0)) (list (list 0 35 0) (om-make-color 0 0 0)) (list (list 0 35 0 0) (om-make-color 0 0 0)) (list (list 0 36) (om-make-color 0 0 0)) (list (list 0 36 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 0 1) (om-make-color 0 0 0)) (list (list 1 0 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 0 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 2 0 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 3 0 0) (om-make-color 0 0 0)) (list (list 1 3 1) (om-make-color 0 0 0)) (list (list 1 3 1 0) (om-make-color 0 0 0)) (list (list 1 3 2) (om-make-color 0 0 0)) (list (list 1 3 2 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 4 0 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 5 0 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 6 0 0) (om-make-color 0 0 0)) (list (list 1 6 1) (om-make-color 0 0 0)) (list (list 1 6 1 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 7 0 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 8 0 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 9 0 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 10 0 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 11 0 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 12 0 0) (om-make-color 0 0 0)) (list (list 1 12 1) (om-make-color 0 0 0)) (list (list 1 12 1 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 13 0 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 14 0 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 15 0 0) (om-make-color 0 0 0)) (list (list 1 15 1) (om-make-color 0 0 0)) (list (list 1 15 1 0) (om-make-color 0 0 0)) (list (list 1 15 2) (om-make-color 0 0 0)) (list (list 1 15 2 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 16 0 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 17 0 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 18 0 0) (om-make-color 0 0 0)) (list (list 1 18 1) (om-make-color 0 0 0)) (list (list 1 18 1 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 19 0 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 20 0 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 21 0 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 22 0 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 23 0 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 24 0 0) (om-make-color 0 0 0)) (list (list 1 24 1) (om-make-color 0 0 0)) (list (list 1 24 1 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 25 0 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 26 0 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 27 0 0) (om-make-color 0 0 0)) (list (list 1 27 1) (om-make-color 0 0 0)) (list (list 1 27 1 0) (om-make-color 0 0 0)) (list (list 1 27 2) (om-make-color 0 0 0)) (list (list 1 27 2 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 1 28 0 0) (om-make-color 0 0 0)) (list (list 1 29) (om-make-color 0 0 0)) (list (list 1 29 0) (om-make-color 0 0 0)) (list (list 1 29 0 0) (om-make-color 0 0 0)) (list (list 1 30) (om-make-color 0 0 0)) (list (list 1 30 0) (om-make-color 0 0 0)) (list (list 1 30 0 0) (om-make-color 0 0 0)) (list (list 1 30 1) (om-make-color 0 0 0)) (list (list 1 30 1 0) (om-make-color 0 0 0)) (list (list 1 31) (om-make-color 0 0 0)) (list (list 1 31 0) (om-make-color 0 0 0)) (list (list 1 31 0 0) (om-make-color 0 0 0)) (list (list 1 32) (om-make-color 0 0 0)) (list (list 1 32 0) (om-make-color 0 0 0)) (list (list 1 32 0 0) (om-make-color 0 0 0)) (list (list 1 33) (om-make-color 0 0 0)) (list (list 1 33 0) (om-make-color 0 0 0)) (list (list 1 33 0 0) (om-make-color 0 0 0)) (list (list 1 34) (om-make-color 0 0 0)) (list (list 1 34 0) (om-make-color 0 0 0)) (list (list 1 34 0 0) (om-make-color 0 0 0)) (list (list 1 35) (om-make-color 0 0 0)) (list (list 1 35 0) (om-make-color 0 0 0)) (list (list 1 35 0 0) (om-make-color 0 0 0)) (list (list 1 36) (om-make-color 0 0 0)) (list (list 1 36 0) (om-make-color 0 0 0)) (list (list 1 36 0 0) (om-make-color 0 0 0)) (list (list 1 36 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 0 1) (om-make-color 0 0 0)) (list (list 2 0 2) (om-make-color 0 0 0)) (list (list 2 0 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 1 0 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 2 0 0) (om-make-color 0 0 0)) (list (list 2 2 1) (om-make-color 0 0 0)) (list (list 2 2 1 0) (om-make-color 0 0 0)) (list (list 2 2 2) (om-make-color 0 0 0)) (list (list 2 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 3 0 0) (om-make-color 0 0 0)) (list (list 2 3 1) (om-make-color 0 0 0)) (list (list 2 3 1 0) (om-make-color 0 0 0)) (list (list 2 3 2) (om-make-color 0 0 0)) (list (list 2 3 2 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 4 0 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 5 0 0) (om-make-color 0 0 0)) (list (list 2 5 1) (om-make-color 0 0 0)) (list (list 2 5 1 0) (om-make-color 0 0 0)) (list (list 2 5 2) (om-make-color 0 0 0)) (list (list 2 5 2 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 6 0 0) (om-make-color 0 0 0)) (list (list 2 6 1) (om-make-color 0 0 0)) (list (list 2 6 1 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 7 0 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 8 0 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 9 0 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 10 0 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 11 0 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 12 0 0) (om-make-color 0 0 0)) (list (list 2 12 1) (om-make-color 0 0 0)) (list (list 2 12 1 0) (om-make-color 0 0 0)) (list (list 2 12 2) (om-make-color 0 0 0)) (list (list 2 12 2 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 13 0 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 14 0 0) (om-make-color 0 0 0)) (list (list 2 14 1) (om-make-color 0 0 0)) (list (list 2 14 1 0) (om-make-color 0 0 0)) (list (list 2 14 2) (om-make-color 0 0 0)) (list (list 2 14 2 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 15 0 0) (om-make-color 0 0 0)) (list (list 2 15 1) (om-make-color 0 0 0)) (list (list 2 15 1 0) (om-make-color 0 0 0)) (list (list 2 15 2) (om-make-color 0 0 0)) (list (list 2 15 2 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 16 0 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 17 0 0) (om-make-color 0 0 0)) (list (list 2 17 1) (om-make-color 0 0 0)) (list (list 2 17 1 0) (om-make-color 0 0 0)) (list (list 2 17 2) (om-make-color 0 0 0)) (list (list 2 17 2 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 18 0 0) (om-make-color 0 0 0)) (list (list 2 18 1) (om-make-color 0 0 0)) (list (list 2 18 1 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 19 0 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 20 0 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 21 0 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 22 0 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 23 0 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 24 0 0) (om-make-color 0 0 0)) (list (list 2 24 1) (om-make-color 0 0 0)) (list (list 2 24 1 0) (om-make-color 0 0 0)) (list (list 2 24 2) (om-make-color 0 0 0)) (list (list 2 24 2 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 25 0 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 26 0 0) (om-make-color 0 0 0)) (list (list 2 26 1) (om-make-color 0 0 0)) (list (list 2 26 1 0) (om-make-color 0 0 0)) (list (list 2 26 2) (om-make-color 0 0 0)) (list (list 2 26 2 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 27 0 0) (om-make-color 0 0 0)) (list (list 2 27 1) (om-make-color 0 0 0)) (list (list 2 27 1 0) (om-make-color 0 0 0)) (list (list 2 27 2) (om-make-color 0 0 0)) (list (list 2 27 2 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 28 0 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 2 29 0 0) (om-make-color 0 0 0)) (list (list 2 29 1) (om-make-color 0 0 0)) (list (list 2 29 1 0) (om-make-color 0 0 0)) (list (list 2 29 2) (om-make-color 0 0 0)) (list (list 2 29 2 0) (om-make-color 0 0 0)) (list (list 2 30) (om-make-color 0 0 0)) (list (list 2 30 0) (om-make-color 0 0 0)) (list (list 2 30 0 0) (om-make-color 0 0 0)) (list (list 2 30 1) (om-make-color 0 0 0)) (list (list 2 30 1 0) (om-make-color 0 0 0)) (list (list 2 31) (om-make-color 0 0 0)) (list (list 2 31 0) (om-make-color 0 0 0)) (list (list 2 31 0 0) (om-make-color 0 0 0)) (list (list 2 32) (om-make-color 0 0 0)) (list (list 2 32 0) (om-make-color 0 0 0)) (list (list 2 32 0 0) (om-make-color 0 0 0)) (list (list 2 33) (om-make-color 0 0 0)) (list (list 2 33 0) (om-make-color 0 0 0)) (list (list 2 33 0 0) (om-make-color 0 0 0)) (list (list 2 34) (om-make-color 0 0 0)) (list (list 2 34 0) (om-make-color 0 0 0)) (list (list 2 34 0 0) (om-make-color 0 0 0)) (list (list 2 35) (om-make-color 0 0 0)) (list (list 2 35 0) (om-make-color 0 0 0)) (list (list 2 35 0 0) (om-make-color 0 0 0)) (list (list 2 36) (om-make-color 0 0 0)) (list (list 2 36 0) (om-make-color 0 0 0)) (list (list 2 36 0 0) (om-make-color 0 0 0)) (list (list 2 36 1) (om-make-color 0 0 0)) (list (list 2 36 1 0) (om-make-color 0 0 0)) (list (list 2 36 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 1 1) (om-make-color 0 0 0)) (list (list 3 1 2) (om-make-color 0 0 0)) (list (list 3 1 2 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 2 0 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 3 0 0) (om-make-color 0 0 0)) (list (list 3 3 1) (om-make-color 0 0 0)) (list (list 3 3 1 0) (om-make-color 0 0 0)) (list (list 3 3 2) (om-make-color 0 0 0)) (list (list 3 3 2 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 4 0 0) (om-make-color 0 0 0)) (list (list 3 4 1) (om-make-color 0 0 0)) (list (list 3 4 1 0) (om-make-color 0 0 0)) (list (list 3 4 2) (om-make-color 0 0 0)) (list (list 3 4 2 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 5 0 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 6 0 0) (om-make-color 0 0 0)) (list (list 3 6 1) (om-make-color 0 0 0)) (list (list 3 6 1 0) (om-make-color 0 0 0)) (list (list 3 6 2) (om-make-color 0 0 0)) (list (list 3 6 2 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 7 0 0) (om-make-color 0 0 0)) (list (list 3 7 1) (om-make-color 0 0 0)) (list (list 3 7 1 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 8 0 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 9 0 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 10 0 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 11 0 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 12 0 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 13 0 0) (om-make-color 0 0 0)) (list (list 3 13 1) (om-make-color 0 0 0)) (list (list 3 13 1 0) (om-make-color 0 0 0)) (list (list 3 13 2) (om-make-color 0 0 0)) (list (list 3 13 2 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 14 0 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 15 0 0) (om-make-color 0 0 0)) (list (list 3 15 1) (om-make-color 0 0 0)) (list (list 3 15 1 0) (om-make-color 0 0 0)) (list (list 3 15 2) (om-make-color 0 0 0)) (list (list 3 15 2 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 16 0 0) (om-make-color 0 0 0)) (list (list 3 16 1) (om-make-color 0 0 0)) (list (list 3 16 1 0) (om-make-color 0 0 0)) (list (list 3 16 2) (om-make-color 0 0 0)) (list (list 3 16 2 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 3 17 0 0) (om-make-color 0 0 0)) (list (list 3 18) (om-make-color 0 0 0)) (list (list 3 18 0) (om-make-color 0 0 0)) (list (list 3 18 0 0) (om-make-color 0 0 0)) (list (list 3 18 1) (om-make-color 0 0 0)) (list (list 3 18 1 0) (om-make-color 0 0 0)) (list (list 3 18 2) (om-make-color 0 0 0)) (list (list 3 18 2 0) (om-make-color 0 0 0)) (list (list 3 19) (om-make-color 0 0 0)) (list (list 3 19 0) (om-make-color 0 0 0)) (list (list 3 19 0 0) (om-make-color 0 0 0)) (list (list 3 19 1) (om-make-color 0 0 0)) (list (list 3 19 1 0) (om-make-color 0 0 0)) (list (list 3 20) (om-make-color 0 0 0)) (list (list 3 20 0) (om-make-color 0 0 0)) (list (list 3 20 0 0) (om-make-color 0 0 0)) (list (list 3 21) (om-make-color 0 0 0)) (list (list 3 21 0) (om-make-color 0 0 0)) (list (list 3 21 0 0) (om-make-color 0 0 0)) (list (list 3 22) (om-make-color 0 0 0)) (list (list 3 22 0) (om-make-color 0 0 0)) (list (list 3 22 0 0) (om-make-color 0 0 0)) (list (list 3 23) (om-make-color 0 0 0)) (list (list 3 23 0) (om-make-color 0 0 0)) (list (list 3 23 0 0) (om-make-color 0 0 0)) (list (list 3 24) (om-make-color 0 0 0)) (list (list 3 24 0) (om-make-color 0 0 0)) (list (list 3 24 0 0) (om-make-color 0 0 0)) (list (list 3 25) (om-make-color 0 0 0)) (list (list 3 25 0) (om-make-color 0 0 0)) (list (list 3 25 0 0) (om-make-color 0 0 0)) (list (list 3 25 1) (om-make-color 0 0 0)) (list (list 3 25 1 0) (om-make-color 0 0 0)) (list (list 3 25 2) (om-make-color 0 0 0)) (list (list 3 25 2 0) (om-make-color 0 0 0)) (list (list 3 26) (om-make-color 0 0 0)) (list (list 3 26 0) (om-make-color 0 0 0)) (list (list 3 26 0 0) (om-make-color 0 0 0)) (list (list 3 27) (om-make-color 0 0 0)) (list (list 3 27 0) (om-make-color 0 0 0)) (list (list 3 27 0 0) (om-make-color 0 0 0)) (list (list 3 27 1) (om-make-color 0 0 0)) (list (list 3 27 1 0) (om-make-color 0 0 0)) (list (list 3 27 2) (om-make-color 0 0 0)) (list (list 3 27 2 0) (om-make-color 0 0 0)) (list (list 3 28) (om-make-color 0 0 0)) (list (list 3 28 0) (om-make-color 0 0 0)) (list (list 3 28 0 0) (om-make-color 0 0 0)) (list (list 3 28 1) (om-make-color 0 0 0)) (list (list 3 28 1 0) (om-make-color 0 0 0)) (list (list 3 28 2) (om-make-color 0 0 0)) (list (list 3 28 2 0) (om-make-color 0 0 0)) (list (list 3 29) (om-make-color 0 0 0)) (list (list 3 29 0) (om-make-color 0 0 0)) (list (list 3 29 0 0) (om-make-color 0 0 0)) (list (list 3 30) (om-make-color 0 0 0)) (list (list 3 30 0) (om-make-color 0 0 0)) (list (list 3 30 0 0) (om-make-color 0 0 0)) (list (list 3 30 1) (om-make-color 0 0 0)) (list (list 3 30 1 0) (om-make-color 0 0 0)) (list (list 3 30 2) (om-make-color 0 0 0)) (list (list 3 30 2 0) (om-make-color 0 0 0)) (list (list 3 31) (om-make-color 0 0 0)) (list (list 3 31 0) (om-make-color 0 0 0)) (list (list 3 31 0 0) (om-make-color 0 0 0)) (list (list 3 31 1) (om-make-color 0 0 0)) (list (list 3 31 1 0) (om-make-color 0 0 0)) (list (list 3 32) (om-make-color 0 0 0)) (list (list 3 32 0) (om-make-color 0 0 0)) (list (list 3 32 0 0) (om-make-color 0 0 0)) (list (list 3 33) (om-make-color 0 0 0)) (list (list 3 33 0) (om-make-color 0 0 0)) (list (list 3 33 0 0) (om-make-color 0 0 0)) (list (list 3 34) (om-make-color 0 0 0)) (list (list 3 34 0) (om-make-color 0 0 0)) (list (list 3 34 0 0) (om-make-color 0 0 0)) (list (list 3 35) (om-make-color 0 0 0)) (list (list 3 35 0) (om-make-color 0 0 0)) (list (list 3 35 0 0) (om-make-color 0 0 0)) (list (list 3 36) (om-make-color 0 0 0)) (list (list 3 36 0) (om-make-color 0 0 0)) (list (list 3 36 0 0) (om-make-color 0 0 0)) (list (list 3 37) (om-make-color 0 0 0)) (list (list 3 37 0) (om-make-color 0 0 0)) (list (list 3 37 0 0) (om-make-color 0 0 0)) (list (list 3 37 1) (om-make-color 0 0 0)) (list (list 3 37 1 0) (om-make-color 0 0 0)) (list (list 3 37 2) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 2 1) (om-make-color 0 0 0)) (list (list 4 2 2) (om-make-color 0 0 0)) (list (list 4 2 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 3 0 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 4 0 0) (om-make-color 0 0 0)) (list (list 4 4 1) (om-make-color 0 0 0)) (list (list 4 4 1 0) (om-make-color 0 0 0)) (list (list 4 4 2) (om-make-color 0 0 0)) (list (list 4 4 2 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 5 0 0) (om-make-color 0 0 0)) (list (list 4 5 1) (om-make-color 0 0 0)) (list (list 4 5 1 0) (om-make-color 0 0 0)) (list (list 4 5 2) (om-make-color 0 0 0)) (list (list 4 5 2 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 6 0 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 7 0 0) (om-make-color 0 0 0)) (list (list 4 7 1) (om-make-color 0 0 0)) (list (list 4 7 1 0) (om-make-color 0 0 0)) (list (list 4 7 2) (om-make-color 0 0 0)) (list (list 4 7 2 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 8 0 0) (om-make-color 0 0 0)) (list (list 4 8 1) (om-make-color 0 0 0)) (list (list 4 8 1 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 9 0 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 10 0 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 11 0 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 12 0 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 13 0 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 14 0 0) (om-make-color 0 0 0)) (list (list 4 14 1) (om-make-color 0 0 0)) (list (list 4 14 1 0) (om-make-color 0 0 0)) (list (list 4 14 2) (om-make-color 0 0 0)) (list (list 4 14 2 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 15 0 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 16 0 0) (om-make-color 0 0 0)) (list (list 4 16 1) (om-make-color 0 0 0)) (list (list 4 16 1 0) (om-make-color 0 0 0)) (list (list 4 16 2) (om-make-color 0 0 0)) (list (list 4 16 2 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 4 17 0 0) (om-make-color 0 0 0)) (list (list 4 17 1) (om-make-color 0 0 0)) (list (list 4 17 1 0) (om-make-color 0 0 0)) (list (list 4 17 2) (om-make-color 0 0 0)) (list (list 4 17 2 0) (om-make-color 0 0 0)) (list (list 4 18) (om-make-color 0 0 0)) (list (list 4 18 0) (om-make-color 0 0 0)) (list (list 4 18 0 0) (om-make-color 0 0 0)) (list (list 4 19) (om-make-color 0 0 0)) (list (list 4 19 0) (om-make-color 0 0 0)) (list (list 4 19 0 0) (om-make-color 0 0 0)) (list (list 4 19 1) (om-make-color 0 0 0)) (list (list 4 19 1 0) (om-make-color 0 0 0)) (list (list 4 19 2) (om-make-color 0 0 0)) (list (list 4 19 2 0) (om-make-color 0 0 0)) (list (list 4 20) (om-make-color 0 0 0)) (list (list 4 20 0) (om-make-color 0 0 0)) (list (list 4 20 0 0) (om-make-color 0 0 0)) (list (list 4 20 1) (om-make-color 0 0 0)) (list (list 4 20 1 0) (om-make-color 0 0 0)) (list (list 4 21) (om-make-color 0 0 0)) (list (list 4 21 0) (om-make-color 0 0 0)) (list (list 4 21 0 0) (om-make-color 0 0 0)) (list (list 4 22) (om-make-color 0 0 0)) (list (list 4 22 0) (om-make-color 0 0 0)) (list (list 4 22 0 0) (om-make-color 0 0 0)) (list (list 4 23) (om-make-color 0 0 0)) (list (list 4 23 0) (om-make-color 0 0 0)) (list (list 4 23 0 0) (om-make-color 0 0 0)) (list (list 4 24) (om-make-color 0 0 0)) (list (list 4 24 0) (om-make-color 0 0 0)) (list (list 4 24 0 0) (om-make-color 0 0 0)) (list (list 4 25) (om-make-color 0 0 0)) (list (list 4 25 0) (om-make-color 0 0 0)) (list (list 4 25 0 0) (om-make-color 0 0 0)) (list (list 4 26) (om-make-color 0 0 0)) (list (list 4 26 0) (om-make-color 0 0 0)) (list (list 4 26 0 0) (om-make-color 0 0 0)) (list (list 4 26 1) (om-make-color 0 0 0)) (list (list 4 26 1 0) (om-make-color 0 0 0)) (list (list 4 26 2) (om-make-color 0 0 0)) (list (list 4 26 2 0) (om-make-color 0 0 0)) (list (list 4 27) (om-make-color 0 0 0)) (list (list 4 27 0) (om-make-color 0 0 0)) (list (list 4 27 0 0) (om-make-color 0 0 0)) (list (list 4 28) (om-make-color 0 0 0)) (list (list 4 28 0) (om-make-color 0 0 0)) (list (list 4 28 0 0) (om-make-color 0 0 0)) (list (list 4 28 1) (om-make-color 0 0 0)) (list (list 4 28 1 0) (om-make-color 0 0 0)) (list (list 4 28 2) (om-make-color 0 0 0)) (list (list 4 28 2 0) (om-make-color 0 0 0)) (list (list 4 29) (om-make-color 0 0 0)) (list (list 4 29 0) (om-make-color 0 0 0)) (list (list 4 29 0 0) (om-make-color 0 0 0)) (list (list 4 29 1) (om-make-color 0 0 0)) (list (list 4 29 1 0) (om-make-color 0 0 0)) (list (list 4 29 2) (om-make-color 0 0 0)) (list (list 4 29 2 0) (om-make-color 0 0 0)) (list (list 4 30) (om-make-color 0 0 0)) (list (list 4 30 0) (om-make-color 0 0 0)) (list (list 4 30 0 0) (om-make-color 0 0 0)) (list (list 4 31) (om-make-color 0 0 0)) (list (list 4 31 0) (om-make-color 0 0 0)) (list (list 4 31 0 0) (om-make-color 0 0 0)) (list (list 4 31 1) (om-make-color 0 0 0)) (list (list 4 31 1 0) (om-make-color 0 0 0)) (list (list 4 31 2) (om-make-color 0 0 0)) (list (list 4 31 2 0) (om-make-color 0 0 0)) (list (list 4 32) (om-make-color 0 0 0)) (list (list 4 32 0) (om-make-color 0 0 0)) (list (list 4 32 0 0) (om-make-color 0 0 0)) (list (list 4 32 1) (om-make-color 0 0 0)) (list (list 4 32 1 0) (om-make-color 0 0 0)) (list (list 4 33) (om-make-color 0 0 0)) (list (list 4 33 0) (om-make-color 0 0 0)) (list (list 4 33 0 0) (om-make-color 0 0 0)) (list (list 4 34) (om-make-color 0 0 0)) (list (list 4 34 0) (om-make-color 0 0 0)) (list (list 4 34 0 0) (om-make-color 0 0 0)) (list (list 4 35) (om-make-color 0 0 0)) (list (list 4 35 0) (om-make-color 0 0 0)) (list (list 4 35 0 0) (om-make-color 0 0 0)) (list (list 4 36) (om-make-color 0 0 0)) (list (list 4 36 0) (om-make-color 0 0 0)) (list (list 4 36 0 0) (om-make-color 0 0 0)) (list (list 4 37) (om-make-color 0 0 0)) (list (list 4 37 0) (om-make-color 0 0 0)) (list (list 4 37 0 0) (om-make-color 0 0 0)) (list (list 4 38) (om-make-color 0 0 0)) (list (list 4 38 0) (om-make-color 0 0 0)) (list (list 4 38 0 0) (om-make-color 0 0 0)) (list (list 4 38 1) (om-make-color 0 0 0)) (list (list 4 38 1 0) (om-make-color 0 0 0)) (list (list 4 38 2) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 4 0 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 5 0 0) (om-make-color 0 0 0)) (list (list 5 5 1) (om-make-color 0 0 0)) (list (list 5 5 1 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 6 0 0) (om-make-color 0 0 0)) (list (list 5 6 1) (om-make-color 0 0 0)) (list (list 5 6 1 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 7 0 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 8 0 0) (om-make-color 0 0 0)) (list (list 5 8 1) (om-make-color 0 0 0)) (list (list 5 8 1 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 9 0 0) (om-make-color 0 0 0)) (list (list 5 9 1) (om-make-color 0 0 0)) (list (list 5 9 1 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 10 0 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 11 0 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 12 0 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 13 0 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 14 0 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 15 0 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 16 0 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 5 17 0 0) (om-make-color 0 0 0)) (list (list 5 17 1) (om-make-color 0 0 0)) (list (list 5 17 1 0) (om-make-color 0 0 0)) (list (list 5 18) (om-make-color 0 0 0)) (list (list 5 18 0) (om-make-color 0 0 0)) (list (list 5 18 0 0) (om-make-color 0 0 0)) (list (list 5 18 1) (om-make-color 0 0 0)) (list (list 5 18 1 0) (om-make-color 0 0 0)) (list (list 5 19) (om-make-color 0 0 0)) (list (list 5 19 0) (om-make-color 0 0 0)) (list (list 5 19 0 0) (om-make-color 0 0 0)) (list (list 5 20) (om-make-color 0 0 0)) (list (list 5 20 0) (om-make-color 0 0 0)) (list (list 5 20 0 0) (om-make-color 0 0 0)) (list (list 5 20 1) (om-make-color 0 0 0)) (list (list 5 20 1 0) (om-make-color 0 0 0)) (list (list 5 21) (om-make-color 0 0 0)) (list (list 5 21 0) (om-make-color 0 0 0)) (list (list 5 21 0 0) (om-make-color 0 0 0)) (list (list 5 21 1) (om-make-color 0 0 0)) (list (list 5 21 1 0) (om-make-color 0 0 0)) (list (list 5 22) (om-make-color 0 0 0)) (list (list 5 22 0) (om-make-color 0 0 0)) (list (list 5 22 0 0) (om-make-color 0 0 0)) (list (list 5 23) (om-make-color 0 0 0)) (list (list 5 23 0) (om-make-color 0 0 0)) (list (list 5 23 0 0) (om-make-color 0 0 0)) (list (list 5 24) (om-make-color 0 0 0)) (list (list 5 24 0) (om-make-color 0 0 0)) (list (list 5 24 0 0) (om-make-color 0 0 0)) (list (list 5 25) (om-make-color 0 0 0)) (list (list 5 25 0) (om-make-color 0 0 0)) (list (list 5 25 0 0) (om-make-color 0 0 0)) (list (list 5 26) (om-make-color 0 0 0)) (list (list 5 26 0) (om-make-color 0 0 0)) (list (list 5 26 0 0) (om-make-color 0 0 0)) (list (list 5 27) (om-make-color 0 0 0)) (list (list 5 27 0) (om-make-color 0 0 0)) (list (list 5 27 0 0) (om-make-color 0 0 0)) (list (list 5 28) (om-make-color 0 0 0)) (list (list 5 28 0) (om-make-color 0 0 0)) (list (list 5 28 0 0) (om-make-color 0 0 0)) (list (list 5 29) (om-make-color 0 0 0)) (list (list 5 29 0) (om-make-color 0 0 0)) (list (list 5 29 0 0) (om-make-color 0 0 0)) (list (list 5 29 1) (om-make-color 0 0 0)) (list (list 5 29 1 0) (om-make-color 0 0 0)) (list (list 5 30) (om-make-color 0 0 0)) (list (list 5 30 0) (om-make-color 0 0 0)) (list (list 5 30 0 0) (om-make-color 0 0 0)) (list (list 5 30 1) (om-make-color 0 0 0)) (list (list 5 30 1 0) (om-make-color 0 0 0)) (list (list 5 31) (om-make-color 0 0 0)) (list (list 5 31 0) (om-make-color 0 0 0)) (list (list 5 31 0 0) (om-make-color 0 0 0)) (list (list 5 32) (om-make-color 0 0 0)) (list (list 5 32 0) (om-make-color 0 0 0)) (list (list 5 32 0 0) (om-make-color 0 0 0)) (list (list 5 32 1) (om-make-color 0 0 0)) (list (list 5 32 1 0) (om-make-color 0 0 0)) (list (list 5 33) (om-make-color 0 0 0)) (list (list 5 33 0) (om-make-color 0 0 0)) (list (list 5 33 0 0) (om-make-color 0 0 0)) (list (list 5 33 1) (om-make-color 0 0 0)) (list (list 5 33 1 0) (om-make-color 0 0 0)) (list (list 5 34) (om-make-color 0 0 0)) (list (list 5 34 0) (om-make-color 0 0 0)) (list (list 5 34 0 0) (om-make-color 0 0 0)) (list (list 5 35) (om-make-color 0 0 0)) (list (list 5 35 0) (om-make-color 0 0 0)) (list (list 5 35 0 0) (om-make-color 0 0 0)) (list (list 5 36) (om-make-color 0 0 0)) (list (list 5 36 0) (om-make-color 0 0 0)) (list (list 5 36 0 0) (om-make-color 0 0 0)) (list (list 5 37) (om-make-color 0 0 0)) (list (list 5 37 0) (om-make-color 0 0 0)) (list (list 5 37 0 0) (om-make-color 0 0 0)) (list (list 5 38) (om-make-color 0 0 0)) (list (list 5 38 0) (om-make-color 0 0 0)) (list (list 5 38 0 0) (om-make-color 0 0 0)) (list (list 5 39) (om-make-color 0 0 0)) (list (list 5 39 0) (om-make-color 0 0 0)) (list (list 5 39 0 0) (om-make-color 0 0 0)) (list (list 5 40) (om-make-color 0 0 0)) (list (list 5 40 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 0 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 1 0) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 2 0) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 3 0) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 4 0) (om-make-color 0 0 0)) (list (list 6 4 1) (om-make-color 0 0 0)) (list (list 6 4 1 0) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 5 0) (om-make-color 0 0 0)) (list (list 6 5 0 0) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 6 0) (om-make-color 0 0 0)) (list (list 6 6 0 0) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 7 0) (om-make-color 0 0 0)) (list (list 6 7 0 0) (om-make-color 0 0 0)) (list (list 6 7 1) (om-make-color 0 0 0)) (list (list 6 7 1 0) (om-make-color 0 0 0)) (list (list 6 7 2) (om-make-color 0 0 0)) (list (list 6 7 2 0) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 8 0) (om-make-color 0 0 0)) (list (list 6 8 0 0) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 6 9 0) (om-make-color 0 0 0)) (list (list 6 9 0 0) (om-make-color 0 0 0)) (list (list 6 10) (om-make-color 0 0 0)) (list (list 6 10 0) (om-make-color 0 0 0)) (list (list 6 10 0 0) (om-make-color 0 0 0)) (list (list 6 10 1) (om-make-color 0 0 0)) (list (list 6 10 1 0) (om-make-color 0 0 0)) (list (list 6 11) (om-make-color 0 0 0)) (list (list 6 11 0) (om-make-color 0 0 0)) (list (list 6 11 0 0) (om-make-color 0 0 0)) (list (list 6 12) (om-make-color 0 0 0)) (list (list 6 12 0) (om-make-color 0 0 0)) (list (list 6 12 0 0) (om-make-color 0 0 0)) (list (list 6 13) (om-make-color 0 0 0)) (list (list 6 13 0) (om-make-color 0 0 0)) (list (list 6 13 0 0) (om-make-color 0 0 0)) (list (list 6 14) (om-make-color 0 0 0)) (list (list 6 14 0) (om-make-color 0 0 0)) (list (list 6 14 0 0) (om-make-color 0 0 0)) (list (list 6 15) (om-make-color 0 0 0)) (list (list 6 15 0) (om-make-color 0 0 0)) (list (list 6 15 0 0) (om-make-color 0 0 0)) (list (list 6 16) (om-make-color 0 0 0)) (list (list 6 16 0) (om-make-color 0 0 0)) (list (list 6 16 0 0) (om-make-color 0 0 0)) (list (list 6 16 1) (om-make-color 0 0 0)) (list (list 6 16 1 0) (om-make-color 0 0 0)) (list (list 6 17) (om-make-color 0 0 0)) (list (list 6 17 0) (om-make-color 0 0 0)) (list (list 6 17 0 0) (om-make-color 0 0 0)) (list (list 6 18) (om-make-color 0 0 0)) (list (list 6 18 0) (om-make-color 0 0 0)) (list (list 6 18 0 0) (om-make-color 0 0 0)) (list (list 6 19) (om-make-color 0 0 0)) (list (list 6 19 0) (om-make-color 0 0 0)) (list (list 6 19 0 0) (om-make-color 0 0 0)) (list (list 6 19 1) (om-make-color 0 0 0)) (list (list 6 19 1 0) (om-make-color 0 0 0)) (list (list 6 19 2) (om-make-color 0 0 0)) (list (list 6 19 2 0) (om-make-color 0 0 0)) (list (list 6 20) (om-make-color 0 0 0)) (list (list 6 20 0) (om-make-color 0 0 0)) (list (list 6 20 0 0) (om-make-color 0 0 0)) (list (list 6 21) (om-make-color 0 0 0)) (list (list 6 21 0) (om-make-color 0 0 0)) (list (list 6 21 0 0) (om-make-color 0 0 0)) (list (list 6 22) (om-make-color 0 0 0)) (list (list 6 22 0) (om-make-color 0 0 0)) (list (list 6 22 0 0) (om-make-color 0 0 0)) (list (list 6 22 1) (om-make-color 0 0 0)) (list (list 6 22 1 0) (om-make-color 0 0 0)) (list (list 6 23) (om-make-color 0 0 0)) (list (list 6 23 0) (om-make-color 0 0 0)) (list (list 6 23 0 0) (om-make-color 0 0 0)) (list (list 6 24) (om-make-color 0 0 0)) (list (list 6 24 0) (om-make-color 0 0 0)) (list (list 6 24 0 0) (om-make-color 0 0 0)) (list (list 6 25) (om-make-color 0 0 0)) (list (list 6 25 0) (om-make-color 0 0 0)) (list (list 6 25 0 0) (om-make-color 0 0 0)) (list (list 6 26) (om-make-color 0 0 0)) (list (list 6 26 0) (om-make-color 0 0 0)) (list (list 6 26 0 0) (om-make-color 0 0 0)) (list (list 6 27) (om-make-color 0 0 0)) (list (list 6 27 0) (om-make-color 0 0 0)) (list (list 6 27 0 0) (om-make-color 0 0 0)) (list (list 6 28) (om-make-color 0 0 0)) (list (list 6 28 0) (om-make-color 0 0 0)) (list (list 6 28 0 0) (om-make-color 0 0 0)) (list (list 6 28 1) (om-make-color 0 0 0)) (list (list 6 28 1 0) (om-make-color 0 0 0)) (list (list 6 29) (om-make-color 0 0 0)) (list (list 6 29 0) (om-make-color 0 0 0)) (list (list 6 29 0 0) (om-make-color 0 0 0)) (list (list 6 30) (om-make-color 0 0 0)) (list (list 6 30 0) (om-make-color 0 0 0)) (list (list 6 30 0 0) (om-make-color 0 0 0)) (list (list 6 31) (om-make-color 0 0 0)) (list (list 6 31 0) (om-make-color 0 0 0)) (list (list 6 31 0 0) (om-make-color 0 0 0)) (list (list 6 31 1) (om-make-color 0 0 0)) (list (list 6 31 1 0) (om-make-color 0 0 0)) (list (list 6 31 2) (om-make-color 0 0 0)) (list (list 6 31 2 0) (om-make-color 0 0 0)) (list (list 6 32) (om-make-color 0 0 0)) (list (list 6 32 0) (om-make-color 0 0 0)) (list (list 6 32 0 0) (om-make-color 0 0 0)) (list (list 6 33) (om-make-color 0 0 0)) (list (list 6 33 0) (om-make-color 0 0 0)) (list (list 6 33 0 0) (om-make-color 0 0 0)) (list (list 6 34) (om-make-color 0 0 0)) (list (list 6 34 0) (om-make-color 0 0 0)) (list (list 6 34 0 0) (om-make-color 0 0 0)) (list (list 6 34 1) (om-make-color 0 0 0)) (list (list 6 34 1 0) (om-make-color 0 0 0)) (list (list 6 35) (om-make-color 0 0 0)) (list (list 6 35 0) (om-make-color 0 0 0)) (list (list 6 35 0 0) (om-make-color 0 0 0)) (list (list 6 36) (om-make-color 0 0 0)) (list (list 6 36 0) (om-make-color 0 0 0)) (list (list 6 36 0 0) (om-make-color 0 0 0)) (list (list 6 37) (om-make-color 0 0 0)) (list (list 6 37 0) (om-make-color 0 0 0)) (list (list 6 37 0 0) (om-make-color 0 0 0)) (list (list 6 38) (om-make-color 0 0 0)) (list (list 6 38 0) (om-make-color 0 0 0)) (list (list 6 38 0 0) (om-make-color 0 0 0)) (list (list 6 39) (om-make-color 0 0 0)) (list (list 6 39 0) (om-make-color 0 0 0)) (list (list 6 39 0 0) (om-make-color 0 0 0)) (list (list 6 40) (om-make-color 0 0 0)) (list (list 6 40 0) (om-make-color 0 0 0)) (list (list 6 40 0 0) (om-make-color 0 0 0)) (list (list 6 40 1) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 0 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 1 0) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 2 0) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 3 0) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 4 0) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 5 0) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 6 0) (om-make-color 0 0 0)) (list (list 7 6 1) (om-make-color 0 0 0)) (list (list 7 6 2) (om-make-color 0 0 0)) (list (list 7 6 2 0) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 7 0) (om-make-color 0 0 0)) (list (list 7 7 0 0) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 8 0) (om-make-color 0 0 0)) (list (list 7 8 0 0) (om-make-color 0 0 0)) (list (list 7 8 1) (om-make-color 0 0 0)) (list (list 7 8 1 0) (om-make-color 0 0 0)) (list (list 7 8 2) (om-make-color 0 0 0)) (list (list 7 8 2 0) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 7 9 0) (om-make-color 0 0 0)) (list (list 7 9 0 0) (om-make-color 0 0 0)) (list (list 7 9 1) (om-make-color 0 0 0)) (list (list 7 9 1 0) (om-make-color 0 0 0)) (list (list 7 9 2) (om-make-color 0 0 0)) (list (list 7 9 2 0) (om-make-color 0 0 0)) (list (list 7 10) (om-make-color 0 0 0)) (list (list 7 10 0) (om-make-color 0 0 0)) (list (list 7 10 0 0) (om-make-color 0 0 0)) (list (list 7 11) (om-make-color 0 0 0)) (list (list 7 11 0) (om-make-color 0 0 0)) (list (list 7 11 0 0) (om-make-color 0 0 0)) (list (list 7 11 1) (om-make-color 0 0 0)) (list (list 7 11 1 0) (om-make-color 0 0 0)) (list (list 7 11 2) (om-make-color 0 0 0)) (list (list 7 11 2 0) (om-make-color 0 0 0)) (list (list 7 12) (om-make-color 0 0 0)) (list (list 7 12 0) (om-make-color 0 0 0)) (list (list 7 12 0 0) (om-make-color 0 0 0)) (list (list 7 12 1) (om-make-color 0 0 0)) (list (list 7 12 1 0) (om-make-color 0 0 0)) (list (list 7 13) (om-make-color 0 0 0)) (list (list 7 13 0) (om-make-color 0 0 0)) (list (list 7 13 0 0) (om-make-color 0 0 0)) (list (list 7 14) (om-make-color 0 0 0)) (list (list 7 14 0) (om-make-color 0 0 0)) (list (list 7 14 0 0) (om-make-color 0 0 0)) (list (list 7 15) (om-make-color 0 0 0)) (list (list 7 15 0) (om-make-color 0 0 0)) (list (list 7 15 0 0) (om-make-color 0 0 0)) (list (list 7 16) (om-make-color 0 0 0)) (list (list 7 16 0) (om-make-color 0 0 0)) (list (list 7 16 0 0) (om-make-color 0 0 0)) (list (list 7 17) (om-make-color 0 0 0)) (list (list 7 17 0) (om-make-color 0 0 0)) (list (list 7 17 0 0) (om-make-color 0 0 0)) (list (list 7 18) (om-make-color 0 0 0)) (list (list 7 18 0) (om-make-color 0 0 0)) (list (list 7 18 0 0) (om-make-color 0 0 0)) (list (list 7 18 1) (om-make-color 0 0 0)) (list (list 7 18 1 0) (om-make-color 0 0 0)) (list (list 7 18 2) (om-make-color 0 0 0)) (list (list 7 18 2 0) (om-make-color 0 0 0)) (list (list 7 19) (om-make-color 0 0 0)) (list (list 7 19 0) (om-make-color 0 0 0)) (list (list 7 19 0 0) (om-make-color 0 0 0)) (list (list 7 20) (om-make-color 0 0 0)) (list (list 7 20 0) (om-make-color 0 0 0)) (list (list 7 20 0 0) (om-make-color 0 0 0)) (list (list 7 20 1) (om-make-color 0 0 0)) (list (list 7 20 1 0) (om-make-color 0 0 0)) (list (list 7 20 2) (om-make-color 0 0 0)) (list (list 7 20 2 0) (om-make-color 0 0 0)) (list (list 7 21) (om-make-color 0 0 0)) (list (list 7 21 0) (om-make-color 0 0 0)) (list (list 7 21 0 0) (om-make-color 0 0 0)) (list (list 7 21 1) (om-make-color 0 0 0)) (list (list 7 21 1 0) (om-make-color 0 0 0)) (list (list 7 21 2) (om-make-color 0 0 0)) (list (list 7 21 2 0) (om-make-color 0 0 0)) (list (list 7 22) (om-make-color 0 0 0)) (list (list 7 22 0) (om-make-color 0 0 0)) (list (list 7 22 0 0) (om-make-color 0 0 0)) (list (list 7 23) (om-make-color 0 0 0)) (list (list 7 23 0) (om-make-color 0 0 0)) (list (list 7 23 0 0) (om-make-color 0 0 0)) (list (list 7 23 1) (om-make-color 0 0 0)) (list (list 7 23 1 0) (om-make-color 0 0 0)) (list (list 7 23 2) (om-make-color 0 0 0)) (list (list 7 23 2 0) (om-make-color 0 0 0)) (list (list 7 24) (om-make-color 0 0 0)) (list (list 7 24 0) (om-make-color 0 0 0)) (list (list 7 24 0 0) (om-make-color 0 0 0)) (list (list 7 24 1) (om-make-color 0 0 0)) (list (list 7 24 1 0) (om-make-color 0 0 0)) (list (list 7 25) (om-make-color 0 0 0)) (list (list 7 25 0) (om-make-color 0 0 0)) (list (list 7 25 0 0) (om-make-color 0 0 0)) (list (list 7 26) (om-make-color 0 0 0)) (list (list 7 26 0) (om-make-color 0 0 0)) (list (list 7 26 0 0) (om-make-color 0 0 0)) (list (list 7 27) (om-make-color 0 0 0)) (list (list 7 27 0) (om-make-color 0 0 0)) (list (list 7 27 0 0) (om-make-color 0 0 0)) (list (list 7 28) (om-make-color 0 0 0)) (list (list 7 28 0) (om-make-color 0 0 0)) (list (list 7 28 0 0) (om-make-color 0 0 0)) (list (list 7 29) (om-make-color 0 0 0)) (list (list 7 29 0) (om-make-color 0 0 0)) (list (list 7 29 0 0) (om-make-color 0 0 0)) (list (list 7 30) (om-make-color 0 0 0)) (list (list 7 30 0) (om-make-color 0 0 0)) (list (list 7 30 0 0) (om-make-color 0 0 0)) (list (list 7 30 1) (om-make-color 0 0 0)) (list (list 7 30 1 0) (om-make-color 0 0 0)) (list (list 7 30 2) (om-make-color 0 0 0)) (list (list 7 30 2 0) (om-make-color 0 0 0)) (list (list 7 31) (om-make-color 0 0 0)) (list (list 7 31 0) (om-make-color 0 0 0)) (list (list 7 31 0 0) (om-make-color 0 0 0)) (list (list 7 32) (om-make-color 0 0 0)) (list (list 7 32 0) (om-make-color 0 0 0)) (list (list 7 32 0 0) (om-make-color 0 0 0)) (list (list 7 32 1) (om-make-color 0 0 0)) (list (list 7 32 1 0) (om-make-color 0 0 0)) (list (list 7 32 2) (om-make-color 0 0 0)) (list (list 7 32 2 0) (om-make-color 0 0 0)) (list (list 7 33) (om-make-color 0 0 0)) (list (list 7 33 0) (om-make-color 0 0 0)) (list (list 7 33 0 0) (om-make-color 0 0 0)) (list (list 7 33 1) (om-make-color 0 0 0)) (list (list 7 33 1 0) (om-make-color 0 0 0)) (list (list 7 33 2) (om-make-color 0 0 0)) (list (list 7 33 2 0) (om-make-color 0 0 0)) (list (list 7 34) (om-make-color 0 0 0)) (list (list 7 34 0) (om-make-color 0 0 0)) (list (list 7 34 0 0) (om-make-color 0 0 0)) (list (list 7 35) (om-make-color 0 0 0)) (list (list 7 35 0) (om-make-color 0 0 0)) (list (list 7 35 0 0) (om-make-color 0 0 0)) (list (list 7 35 1) (om-make-color 0 0 0)) (list (list 7 35 1 0) (om-make-color 0 0 0)) (list (list 7 35 2) (om-make-color 0 0 0)) (list (list 7 35 2 0) (om-make-color 0 0 0)) (list (list 7 36) (om-make-color 0 0 0)) (list (list 7 36 0) (om-make-color 0 0 0)) (list (list 7 36 0 0) (om-make-color 0 0 0)) (list (list 7 36 1) (om-make-color 0 0 0)) (list (list 7 36 1 0) (om-make-color 0 0 0)) (list (list 7 37) (om-make-color 0 0 0)) (list (list 7 37 0) (om-make-color 0 0 0)) (list (list 7 37 0 0) (om-make-color 0 0 0)) (list (list 7 38) (om-make-color 0 0 0)) (list (list 7 38 0) (om-make-color 0 0 0)) (list (list 7 38 0 0) (om-make-color 0 0 0)) (list (list 7 39) (om-make-color 0 0 0)) (list (list 7 39 0) (om-make-color 0 0 0)) (list (list 7 39 0 0) (om-make-color 0 0 0)) (list (list 7 40) (om-make-color 0 0 0)) (list (list 7 40 0) (om-make-color 0 0 0)) (list (list 7 40 0 0) (om-make-color 0 0 0)) (list (list 7 41) (om-make-color 0 0 0)) (list (list 7 41 0) (om-make-color 0 0 0)) (list (list 7 41 0 0) (om-make-color 0 0 0)) (list (list 7 42) (om-make-color 0 0 0)) (list (list 7 42 0) (om-make-color 0 0 0)) (list (list 7 42 0 0) (om-make-color 0 0 0)) (list (list 7 42 1) (om-make-color 0 0 0)) (list (list 7 42 1 0) (om-make-color 0 0 0)) (list (list 7 42 2) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 0 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 1 0) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 2 0) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 3 0) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 4 0) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 5 0) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 6 0) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 7 0) (om-make-color 0 0 0)) (list (list 8 7 1) (om-make-color 0 0 0)) (list (list 8 7 2) (om-make-color 0 0 0)) (list (list 8 7 2 0) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 8 0) (om-make-color 0 0 0)) (list (list 8 8 0 0) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 8 9 0) (om-make-color 0 0 0)) (list (list 8 9 0 0) (om-make-color 0 0 0)) (list (list 8 9 1) (om-make-color 0 0 0)) (list (list 8 9 1 0) (om-make-color 0 0 0)) (list (list 8 9 2) (om-make-color 0 0 0)) (list (list 8 9 2 0) (om-make-color 0 0 0)) (list (list 8 10) (om-make-color 0 0 0)) (list (list 8 10 0) (om-make-color 0 0 0)) (list (list 8 10 0 0) (om-make-color 0 0 0)) (list (list 8 10 1) (om-make-color 0 0 0)) (list (list 8 10 1 0) (om-make-color 0 0 0)) (list (list 8 10 2) (om-make-color 0 0 0)) (list (list 8 10 2 0) (om-make-color 0 0 0)) (list (list 8 11) (om-make-color 0 0 0)) (list (list 8 11 0) (om-make-color 0 0 0)) (list (list 8 11 0 0) (om-make-color 0 0 0)) (list (list 8 12) (om-make-color 0 0 0)) (list (list 8 12 0) (om-make-color 0 0 0)) (list (list 8 12 0 0) (om-make-color 0 0 0)) (list (list 8 12 1) (om-make-color 0 0 0)) (list (list 8 12 1 0) (om-make-color 0 0 0)) (list (list 8 12 2) (om-make-color 0 0 0)) (list (list 8 12 2 0) (om-make-color 0 0 0)) (list (list 8 13) (om-make-color 0 0 0)) (list (list 8 13 0) (om-make-color 0 0 0)) (list (list 8 13 0 0) (om-make-color 0 0 0)) (list (list 8 13 1) (om-make-color 0 0 0)) (list (list 8 13 1 0) (om-make-color 0 0 0)) (list (list 8 14) (om-make-color 0 0 0)) (list (list 8 14 0) (om-make-color 0 0 0)) (list (list 8 14 0 0) (om-make-color 0 0 0)) (list (list 8 15) (om-make-color 0 0 0)) (list (list 8 15 0) (om-make-color 0 0 0)) (list (list 8 15 0 0) (om-make-color 0 0 0)) (list (list 8 16) (om-make-color 0 0 0)) (list (list 8 16 0) (om-make-color 0 0 0)) (list (list 8 16 0 0) (om-make-color 0 0 0)) (list (list 8 17) (om-make-color 0 0 0)) (list (list 8 17 0) (om-make-color 0 0 0)) (list (list 8 17 0 0) (om-make-color 0 0 0)) (list (list 8 18) (om-make-color 0 0 0)) (list (list 8 18 0) (om-make-color 0 0 0)) (list (list 8 18 0 0) (om-make-color 0 0 0)) (list (list 8 19) (om-make-color 0 0 0)) (list (list 8 19 0) (om-make-color 0 0 0)) (list (list 8 19 0 0) (om-make-color 0 0 0)) (list (list 8 19 1) (om-make-color 0 0 0)) (list (list 8 19 1 0) (om-make-color 0 0 0)) (list (list 8 19 2) (om-make-color 0 0 0)) (list (list 8 19 2 0) (om-make-color 0 0 0)) (list (list 8 20) (om-make-color 0 0 0)) (list (list 8 20 0) (om-make-color 0 0 0)) (list (list 8 20 0 0) (om-make-color 0 0 0)) (list (list 8 21) (om-make-color 0 0 0)) (list (list 8 21 0) (om-make-color 0 0 0)) (list (list 8 21 0 0) (om-make-color 0 0 0)) (list (list 8 21 1) (om-make-color 0 0 0)) (list (list 8 21 1 0) (om-make-color 0 0 0)) (list (list 8 21 2) (om-make-color 0 0 0)) (list (list 8 21 2 0) (om-make-color 0 0 0)) (list (list 8 22) (om-make-color 0 0 0)) (list (list 8 22 0) (om-make-color 0 0 0)) (list (list 8 22 0 0) (om-make-color 0 0 0)) (list (list 8 22 1) (om-make-color 0 0 0)) (list (list 8 22 1 0) (om-make-color 0 0 0)) (list (list 8 22 2) (om-make-color 0 0 0)) (list (list 8 22 2 0) (om-make-color 0 0 0)) (list (list 8 23) (om-make-color 0 0 0)) (list (list 8 23 0) (om-make-color 0 0 0)) (list (list 8 23 0 0) (om-make-color 0 0 0)) (list (list 8 24) (om-make-color 0 0 0)) (list (list 8 24 0) (om-make-color 0 0 0)) (list (list 8 24 0 0) (om-make-color 0 0 0)) (list (list 8 24 1) (om-make-color 0 0 0)) (list (list 8 24 1 0) (om-make-color 0 0 0)) (list (list 8 24 2) (om-make-color 0 0 0)) (list (list 8 24 2 0) (om-make-color 0 0 0)) (list (list 8 25) (om-make-color 0 0 0)) (list (list 8 25 0) (om-make-color 0 0 0)) (list (list 8 25 0 0) (om-make-color 0 0 0)) (list (list 8 25 1) (om-make-color 0 0 0)) (list (list 8 25 1 0) (om-make-color 0 0 0)) (list (list 8 26) (om-make-color 0 0 0)) (list (list 8 26 0) (om-make-color 0 0 0)) (list (list 8 26 0 0) (om-make-color 0 0 0)) (list (list 8 27) (om-make-color 0 0 0)) (list (list 8 27 0) (om-make-color 0 0 0)) (list (list 8 27 0 0) (om-make-color 0 0 0)) (list (list 8 28) (om-make-color 0 0 0)) (list (list 8 28 0) (om-make-color 0 0 0)) (list (list 8 28 0 0) (om-make-color 0 0 0)) (list (list 8 29) (om-make-color 0 0 0)) (list (list 8 29 0) (om-make-color 0 0 0)) (list (list 8 29 0 0) (om-make-color 0 0 0)) (list (list 8 30) (om-make-color 0 0 0)) (list (list 8 30 0) (om-make-color 0 0 0)) (list (list 8 30 0 0) (om-make-color 0 0 0)) (list (list 8 31) (om-make-color 0 0 0)) (list (list 8 31 0) (om-make-color 0 0 0)) (list (list 8 31 0 0) (om-make-color 0 0 0)) (list (list 8 31 1) (om-make-color 0 0 0)) (list (list 8 31 1 0) (om-make-color 0 0 0)) (list (list 8 31 2) (om-make-color 0 0 0)) (list (list 8 31 2 0) (om-make-color 0 0 0)) (list (list 8 32) (om-make-color 0 0 0)) (list (list 8 32 0) (om-make-color 0 0 0)) (list (list 8 32 0 0) (om-make-color 0 0 0)) (list (list 8 33) (om-make-color 0 0 0)) (list (list 8 33 0) (om-make-color 0 0 0)) (list (list 8 33 0 0) (om-make-color 0 0 0)) (list (list 8 33 1) (om-make-color 0 0 0)) (list (list 8 33 1 0) (om-make-color 0 0 0)) (list (list 8 33 2) (om-make-color 0 0 0)) (list (list 8 33 2 0) (om-make-color 0 0 0)) (list (list 8 34) (om-make-color 0 0 0)) (list (list 8 34 0) (om-make-color 0 0 0)) (list (list 8 34 0 0) (om-make-color 0 0 0)) (list (list 8 34 1) (om-make-color 0 0 0)) (list (list 8 34 1 0) (om-make-color 0 0 0)) (list (list 8 34 2) (om-make-color 0 0 0)) (list (list 8 34 2 0) (om-make-color 0 0 0)) (list (list 8 35) (om-make-color 0 0 0)) (list (list 8 35 0) (om-make-color 0 0 0)) (list (list 8 35 0 0) (om-make-color 0 0 0)) (list (list 8 36) (om-make-color 0 0 0)) (list (list 8 36 0) (om-make-color 0 0 0)) (list (list 8 36 0 0) (om-make-color 0 0 0)) (list (list 8 36 1) (om-make-color 0 0 0)) (list (list 8 36 1 0) (om-make-color 0 0 0)) (list (list 8 36 2) (om-make-color 0 0 0)) (list (list 8 36 2 0) (om-make-color 0 0 0)) (list (list 8 37) (om-make-color 0 0 0)) (list (list 8 37 0) (om-make-color 0 0 0)) (list (list 8 37 0 0) (om-make-color 0 0 0)) (list (list 8 37 1) (om-make-color 0 0 0)) (list (list 8 37 1 0) (om-make-color 0 0 0)) (list (list 8 38) (om-make-color 0 0 0)) (list (list 8 38 0) (om-make-color 0 0 0)) (list (list 8 38 0 0) (om-make-color 0 0 0)) (list (list 8 39) (om-make-color 0 0 0)) (list (list 8 39 0) (om-make-color 0 0 0)) (list (list 8 39 0 0) (om-make-color 0 0 0)) (list (list 8 40) (om-make-color 0 0 0)) (list (list 8 40 0) (om-make-color 0 0 0)) (list (list 8 40 0 0) (om-make-color 0 0 0)) (list (list 8 41) (om-make-color 0 0 0)) (list (list 8 41 0) (om-make-color 0 0 0)) (list (list 8 41 0 0) (om-make-color 0 0 0)) (list (list 8 42) (om-make-color 0 0 0)) (list (list 8 42 0) (om-make-color 0 0 0)) (list (list 8 42 0 0) (om-make-color 0 0 0)) (list (list 8 43) (om-make-color 0 0 0)) (list (list 8 43 0) (om-make-color 0 0 0)) (list (list 8 43 0 0) (om-make-color 0 0 0)) (list (list 8 43 1) (om-make-color 0 0 0)) (list (list 8 43 1 0) (om-make-color 0 0 0)) (list (list 8 43 2) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 0 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 1 0) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 2 0) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 3 0) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 4 0) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 5 0) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 6 0) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 7 0) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 8 0) (om-make-color 0 0 0)) (list (list 9 8 0 0) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 9 9 0) (om-make-color 0 0 0)) (list (list 9 9 0 0) (om-make-color 0 0 0)) (list (list 9 9 1) (om-make-color 0 0 0)) (list (list 9 9 1 0) (om-make-color 0 0 0)) (list (list 9 10) (om-make-color 0 0 0)) (list (list 9 10 0) (om-make-color 0 0 0)) (list (list 9 10 0 0) (om-make-color 0 0 0)) (list (list 9 10 1) (om-make-color 0 0 0)) (list (list 9 10 1 0) (om-make-color 0 0 0)) (list (list 9 11) (om-make-color 0 0 0)) (list (list 9 11 0) (om-make-color 0 0 0)) (list (list 9 11 0 0) (om-make-color 0 0 0)) (list (list 9 12) (om-make-color 0 0 0)) (list (list 9 12 0) (om-make-color 0 0 0)) (list (list 9 12 0 0) (om-make-color 0 0 0)) (list (list 9 12 1) (om-make-color 0 0 0)) (list (list 9 12 1 0) (om-make-color 0 0 0)) (list (list 9 13) (om-make-color 0 0 0)) (list (list 9 13 0) (om-make-color 0 0 0)) (list (list 9 13 0 0) (om-make-color 0 0 0)) (list (list 9 13 1) (om-make-color 0 0 0)) (list (list 9 13 1 0) (om-make-color 0 0 0)) (list (list 9 14) (om-make-color 0 0 0)) (list (list 9 14 0) (om-make-color 0 0 0)) (list (list 9 14 0 0) (om-make-color 0 0 0)) (list (list 9 15) (om-make-color 0 0 0)) (list (list 9 15 0) (om-make-color 0 0 0)) (list (list 9 15 0 0) (om-make-color 0 0 0)) (list (list 9 16) (om-make-color 0 0 0)) (list (list 9 16 0) (om-make-color 0 0 0)) (list (list 9 16 0 0) (om-make-color 0 0 0)) (list (list 9 17) (om-make-color 0 0 0)) (list (list 9 17 0) (om-make-color 0 0 0)) (list (list 9 17 0 0) (om-make-color 0 0 0)) (list (list 9 18) (om-make-color 0 0 0)) (list (list 9 18 0) (om-make-color 0 0 0)) (list (list 9 18 0 0) (om-make-color 0 0 0)) (list (list 9 19) (om-make-color 0 0 0)) (list (list 9 19 0) (om-make-color 0 0 0)) (list (list 9 19 0 0) (om-make-color 0 0 0)) (list (list 9 20) (om-make-color 0 0 0)) (list (list 9 20 0) (om-make-color 0 0 0)) (list (list 9 20 0 0) (om-make-color 0 0 0)) (list (list 9 21) (om-make-color 0 0 0)) (list (list 9 21 0) (om-make-color 0 0 0)) (list (list 9 21 0 0) (om-make-color 0 0 0)) (list (list 9 21 1) (om-make-color 0 0 0)) (list (list 9 21 1 0) (om-make-color 0 0 0)) (list (list 9 22) (om-make-color 0 0 0)) (list (list 9 22 0) (om-make-color 0 0 0)) (list (list 9 22 0 0) (om-make-color 0 0 0)) (list (list 9 22 1) (om-make-color 0 0 0)) (list (list 9 22 1 0) (om-make-color 0 0 0)) (list (list 9 23) (om-make-color 0 0 0)) (list (list 9 23 0) (om-make-color 0 0 0)) (list (list 9 23 0 0) (om-make-color 0 0 0)) (list (list 9 24) (om-make-color 0 0 0)) (list (list 9 24 0) (om-make-color 0 0 0)) (list (list 9 24 0 0) (om-make-color 0 0 0)) (list (list 9 24 1) (om-make-color 0 0 0)) (list (list 9 24 1 0) (om-make-color 0 0 0)) (list (list 9 25) (om-make-color 0 0 0)) (list (list 9 25 0) (om-make-color 0 0 0)) (list (list 9 25 0 0) (om-make-color 0 0 0)) (list (list 9 25 1) (om-make-color 0 0 0)) (list (list 9 25 1 0) (om-make-color 0 0 0)) (list (list 9 26) (om-make-color 0 0 0)) (list (list 9 26 0) (om-make-color 0 0 0)) (list (list 9 26 0 0) (om-make-color 0 0 0)) (list (list 9 27) (om-make-color 0 0 0)) (list (list 9 27 0) (om-make-color 0 0 0)) (list (list 9 27 0 0) (om-make-color 0 0 0)) (list (list 9 28) (om-make-color 0 0 0)) (list (list 9 28 0) (om-make-color 0 0 0)) (list (list 9 28 0 0) (om-make-color 0 0 0)) (list (list 9 29) (om-make-color 0 0 0)) (list (list 9 29 0) (om-make-color 0 0 0)) (list (list 9 29 0 0) (om-make-color 0 0 0)) (list (list 9 30) (om-make-color 0 0 0)) (list (list 9 30 0) (om-make-color 0 0 0)) (list (list 9 30 0 0) (om-make-color 0 0 0)) (list (list 9 31) (om-make-color 0 0 0)) (list (list 9 31 0) (om-make-color 0 0 0)) (list (list 9 31 0 0) (om-make-color 0 0 0)) (list (list 9 32) (om-make-color 0 0 0)) (list (list 9 32 0) (om-make-color 0 0 0)) (list (list 9 32 0 0) (om-make-color 0 0 0)) (list (list 9 33) (om-make-color 0 0 0)) (list (list 9 33 0) (om-make-color 0 0 0)) (list (list 9 33 0 0) (om-make-color 0 0 0)) (list (list 9 33 1) (om-make-color 0 0 0)) (list (list 9 33 1 0) (om-make-color 0 0 0)) (list (list 9 34) (om-make-color 0 0 0)) (list (list 9 34 0) (om-make-color 0 0 0)) (list (list 9 34 0 0) (om-make-color 0 0 0)) (list (list 9 34 1) (om-make-color 0 0 0)) (list (list 9 34 1 0) (om-make-color 0 0 0)) (list (list 9 35) (om-make-color 0 0 0)) (list (list 9 35 0) (om-make-color 0 0 0)) (list (list 9 35 0 0) (om-make-color 0 0 0)) (list (list 9 36) (om-make-color 0 0 0)) (list (list 9 36 0) (om-make-color 0 0 0)) (list (list 9 36 0 0) (om-make-color 0 0 0)) (list (list 9 36 1) (om-make-color 0 0 0)) (list (list 9 36 1 0) (om-make-color 0 0 0)) (list (list 9 37) (om-make-color 0 0 0)) (list (list 9 37 0) (om-make-color 0 0 0)) (list (list 9 37 0 0) (om-make-color 0 0 0)) (list (list 9 37 1) (om-make-color 0 0 0)) (list (list 9 37 1 0) (om-make-color 0 0 0)) (list (list 9 38) (om-make-color 0 0 0)) (list (list 9 38 0) (om-make-color 0 0 0)) (list (list 9 38 0 0) (om-make-color 0 0 0)) (list (list 9 39) (om-make-color 0 0 0)) (list (list 9 39 0) (om-make-color 0 0 0)) (list (list 9 39 0 0) (om-make-color 0 0 0)) (list (list 9 40) (om-make-color 0 0 0)) (list (list 9 40 0) (om-make-color 0 0 0)) (list (list 9 40 0 0) (om-make-color 0 0 0)) (list (list 9 41) (om-make-color 0 0 0)) (list (list 9 41 0) (om-make-color 0 0 0)) (list (list 9 41 0 0) (om-make-color 0 0 0)) (list (list 9 42) (om-make-color 0 0 0)) (list (list 9 42 0) (om-make-color 0 0 0)) (list (list 9 42 0 0) (om-make-color 0 0 0)) (list (list 9 43) (om-make-color 0 0 0)) (list (list 9 43 0) (om-make-color 0 0 0)) (list (list 9 43 0 0) (om-make-color 0 0 0)) (list (list 9 44) (om-make-color 0 0 0)) (list (list 9 44 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 0 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 1 0) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 2 0) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 3 0) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 4 0) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 5 0) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 6 0) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 7 0) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 8 0) (om-make-color 0 0 0)) (list (list 10 8 1) (om-make-color 0 0 0)) (list (list 10 8 1 0) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)) (list (list 10 9 0) (om-make-color 0 0 0)) (list (list 10 9 0 0) (om-make-color 0 0 0)) (list (list 10 10) (om-make-color 0 0 0)) (list (list 10 10 0) (om-make-color 0 0 0)) (list (list 10 10 0 0) (om-make-color 0 0 0)) (list (list 10 11) (om-make-color 0 0 0)) (list (list 10 11 0) (om-make-color 0 0 0)) (list (list 10 11 0 0) (om-make-color 0 0 0)) (list (list 10 11 1) (om-make-color 0 0 0)) (list (list 10 11 1 0) (om-make-color 0 0 0)) (list (list 10 11 2) (om-make-color 0 0 0)) (list (list 10 11 2 0) (om-make-color 0 0 0)) (list (list 10 12) (om-make-color 0 0 0)) (list (list 10 12 0) (om-make-color 0 0 0)) (list (list 10 12 0 0) (om-make-color 0 0 0)) (list (list 10 13) (om-make-color 0 0 0)) (list (list 10 13 0) (om-make-color 0 0 0)) (list (list 10 13 0 0) (om-make-color 0 0 0)) (list (list 10 14) (om-make-color 0 0 0)) (list (list 10 14 0) (om-make-color 0 0 0)) (list (list 10 14 0 0) (om-make-color 0 0 0)) (list (list 10 14 1) (om-make-color 0 0 0)) (list (list 10 14 1 0) (om-make-color 0 0 0)) (list (list 10 15) (om-make-color 0 0 0)) (list (list 10 15 0) (om-make-color 0 0 0)) (list (list 10 15 0 0) (om-make-color 0 0 0)) (list (list 10 16) (om-make-color 0 0 0)) (list (list 10 16 0) (om-make-color 0 0 0)) (list (list 10 16 0 0) (om-make-color 0 0 0)) (list (list 10 17) (om-make-color 0 0 0)) (list (list 10 17 0) (om-make-color 0 0 0)) (list (list 10 17 0 0) (om-make-color 0 0 0)) (list (list 10 18) (om-make-color 0 0 0)) (list (list 10 18 0) (om-make-color 0 0 0)) (list (list 10 18 0 0) (om-make-color 0 0 0)) (list (list 10 19) (om-make-color 0 0 0)) (list (list 10 19 0) (om-make-color 0 0 0)) (list (list 10 19 0 0) (om-make-color 0 0 0)) (list (list 10 20) (om-make-color 0 0 0)) (list (list 10 20 0) (om-make-color 0 0 0)) (list (list 10 20 0 0) (om-make-color 0 0 0)) (list (list 10 20 1) (om-make-color 0 0 0)) (list (list 10 20 1 0) (om-make-color 0 0 0)) (list (list 10 21) (om-make-color 0 0 0)) (list (list 10 21 0) (om-make-color 0 0 0)) (list (list 10 21 0 0) (om-make-color 0 0 0)) (list (list 10 22) (om-make-color 0 0 0)) (list (list 10 22 0) (om-make-color 0 0 0)) (list (list 10 22 0 0) (om-make-color 0 0 0)) (list (list 10 23) (om-make-color 0 0 0)) (list (list 10 23 0) (om-make-color 0 0 0)) (list (list 10 23 0 0) (om-make-color 0 0 0)) (list (list 10 23 1) (om-make-color 0 0 0)) (list (list 10 23 1 0) (om-make-color 0 0 0)) (list (list 10 23 2) (om-make-color 0 0 0)) (list (list 10 23 2 0) (om-make-color 0 0 0)) (list (list 10 24) (om-make-color 0 0 0)) (list (list 10 24 0) (om-make-color 0 0 0)) (list (list 10 24 0 0) (om-make-color 0 0 0)) (list (list 10 25) (om-make-color 0 0 0)) (list (list 10 25 0) (om-make-color 0 0 0)) (list (list 10 25 0 0) (om-make-color 0 0 0)) (list (list 10 26) (om-make-color 0 0 0)) (list (list 10 26 0) (om-make-color 0 0 0)) (list (list 10 26 0 0) (om-make-color 0 0 0)) (list (list 10 26 1) (om-make-color 0 0 0)) (list (list 10 26 1 0) (om-make-color 0 0 0)) (list (list 10 27) (om-make-color 0 0 0)) (list (list 10 27 0) (om-make-color 0 0 0)) (list (list 10 27 0 0) (om-make-color 0 0 0)) (list (list 10 28) (om-make-color 0 0 0)) (list (list 10 28 0) (om-make-color 0 0 0)) (list (list 10 28 0 0) (om-make-color 0 0 0)) (list (list 10 29) (om-make-color 0 0 0)) (list (list 10 29 0) (om-make-color 0 0 0)) (list (list 10 29 0 0) (om-make-color 0 0 0)) (list (list 10 30) (om-make-color 0 0 0)) (list (list 10 30 0) (om-make-color 0 0 0)) (list (list 10 30 0 0) (om-make-color 0 0 0)) (list (list 10 31) (om-make-color 0 0 0)) (list (list 10 31 0) (om-make-color 0 0 0)) (list (list 10 31 0 0) (om-make-color 0 0 0)) (list (list 10 32) (om-make-color 0 0 0)) (list (list 10 32 0) (om-make-color 0 0 0)) (list (list 10 32 0 0) (om-make-color 0 0 0)) (list (list 10 32 1) (om-make-color 0 0 0)) (list (list 10 32 1 0) (om-make-color 0 0 0)) (list (list 10 33) (om-make-color 0 0 0)) (list (list 10 33 0) (om-make-color 0 0 0)) (list (list 10 33 0 0) (om-make-color 0 0 0)) (list (list 10 34) (om-make-color 0 0 0)) (list (list 10 34 0) (om-make-color 0 0 0)) (list (list 10 34 0 0) (om-make-color 0 0 0)) (list (list 10 35) (om-make-color 0 0 0)) (list (list 10 35 0) (om-make-color 0 0 0)) (list (list 10 35 0 0) (om-make-color 0 0 0)) (list (list 10 35 1) (om-make-color 0 0 0)) (list (list 10 35 1 0) (om-make-color 0 0 0)) (list (list 10 35 2) (om-make-color 0 0 0)) (list (list 10 35 2 0) (om-make-color 0 0 0)) (list (list 10 36) (om-make-color 0 0 0)) (list (list 10 36 0) (om-make-color 0 0 0)) (list (list 10 36 0 0) (om-make-color 0 0 0)) (list (list 10 37) (om-make-color 0 0 0)) (list (list 10 37 0) (om-make-color 0 0 0)) (list (list 10 37 0 0) (om-make-color 0 0 0)) (list (list 10 38) (om-make-color 0 0 0)) (list (list 10 38 0) (om-make-color 0 0 0)) (list (list 10 38 0 0) (om-make-color 0 0 0)) (list (list 10 38 1) (om-make-color 0 0 0)) (list (list 10 38 1 0) (om-make-color 0 0 0)) (list (list 10 39) (om-make-color 0 0 0)) (list (list 10 39 0) (om-make-color 0 0 0)) (list (list 10 39 0 0) (om-make-color 0 0 0)) (list (list 10 40) (om-make-color 0 0 0)) (list (list 10 40 0) (om-make-color 0 0 0)) (list (list 10 40 0 0) (om-make-color 0 0 0)) (list (list 10 41) (om-make-color 0 0 0)) (list (list 10 41 0) (om-make-color 0 0 0)) (list (list 10 41 0 0) (om-make-color 0 0 0)) (list (list 10 42) (om-make-color 0 0 0)) (list (list 10 42 0) (om-make-color 0 0 0)) (list (list 10 42 0 0) (om-make-color 0 0 0)) (list (list 10 43) (om-make-color 0 0 0)) (list (list 10 43 0) (om-make-color 0 0 0)) (list (list 10 43 0 0) (om-make-color 0 0 0)) (list (list 10 44) (om-make-color 0 0 0)) (list (list 10 44 0) (om-make-color 0 0 0)) (list (list 10 44 0 0) (om-make-color 0 0 0)) (list (list 10 44 1) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 0 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 1 0) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 2 0) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 3 0) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 4 0) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 5 0) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 6 0) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 7 0) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 11 8 0) (om-make-color 0 0 0)) (list (list 11 8 1) (om-make-color 0 0 0)) (list (list 11 8 2) (om-make-color 0 0 0)) (list (list 11 8 2 0) (om-make-color 0 0 0)) (list (list 11 9) (om-make-color 0 0 0)) (list (list 11 9 0) (om-make-color 0 0 0)) (list (list 11 9 0 0) (om-make-color 0 0 0)) (list (list 11 10) (om-make-color 0 0 0)) (list (list 11 10 0) (om-make-color 0 0 0)) (list (list 11 10 0 0) (om-make-color 0 0 0)) (list (list 11 10 1) (om-make-color 0 0 0)) (list (list 11 10 1 0) (om-make-color 0 0 0)) (list (list 11 10 2) (om-make-color 0 0 0)) (list (list 11 10 2 0) (om-make-color 0 0 0)) (list (list 11 11) (om-make-color 0 0 0)) (list (list 11 11 0) (om-make-color 0 0 0)) (list (list 11 11 0 0) (om-make-color 0 0 0)) (list (list 11 11 1) (om-make-color 0 0 0)) (list (list 11 11 1 0) (om-make-color 0 0 0)) (list (list 11 11 2) (om-make-color 0 0 0)) (list (list 11 11 2 0) (om-make-color 0 0 0)) (list (list 11 12) (om-make-color 0 0 0)) (list (list 11 12 0) (om-make-color 0 0 0)) (list (list 11 12 0 0) (om-make-color 0 0 0)) (list (list 11 13) (om-make-color 0 0 0)) (list (list 11 13 0) (om-make-color 0 0 0)) (list (list 11 13 0 0) (om-make-color 0 0 0)) (list (list 11 13 1) (om-make-color 0 0 0)) (list (list 11 13 1 0) (om-make-color 0 0 0)) (list (list 11 13 2) (om-make-color 0 0 0)) (list (list 11 13 2 0) (om-make-color 0 0 0)) (list (list 11 14) (om-make-color 0 0 0)) (list (list 11 14 0) (om-make-color 0 0 0)) (list (list 11 14 0 0) (om-make-color 0 0 0)) (list (list 11 14 1) (om-make-color 0 0 0)) (list (list 11 14 1 0) (om-make-color 0 0 0)) (list (list 11 15) (om-make-color 0 0 0)) (list (list 11 15 0) (om-make-color 0 0 0)) (list (list 11 15 0 0) (om-make-color 0 0 0)) (list (list 11 16) (om-make-color 0 0 0)) (list (list 11 16 0) (om-make-color 0 0 0)) (list (list 11 16 0 0) (om-make-color 0 0 0)) (list (list 11 17) (om-make-color 0 0 0)) (list (list 11 17 0) (om-make-color 0 0 0)) (list (list 11 17 0 0) (om-make-color 0 0 0)) (list (list 11 18) (om-make-color 0 0 0)) (list (list 11 18 0) (om-make-color 0 0 0)) (list (list 11 18 0 0) (om-make-color 0 0 0)) (list (list 11 19) (om-make-color 0 0 0)) (list (list 11 19 0) (om-make-color 0 0 0)) (list (list 11 19 0 0) (om-make-color 0 0 0)) (list (list 11 20) (om-make-color 0 0 0)) (list (list 11 20 0) (om-make-color 0 0 0)) (list (list 11 20 0 0) (om-make-color 0 0 0)) (list (list 11 20 1) (om-make-color 0 0 0)) (list (list 11 20 1 0) (om-make-color 0 0 0)) (list (list 11 20 2) (om-make-color 0 0 0)) (list (list 11 20 2 0) (om-make-color 0 0 0)) (list (list 11 21) (om-make-color 0 0 0)) (list (list 11 21 0) (om-make-color 0 0 0)) (list (list 11 21 0 0) (om-make-color 0 0 0)) (list (list 11 22) (om-make-color 0 0 0)) (list (list 11 22 0) (om-make-color 0 0 0)) (list (list 11 22 0 0) (om-make-color 0 0 0)) (list (list 11 22 1) (om-make-color 0 0 0)) (list (list 11 22 1 0) (om-make-color 0 0 0)) (list (list 11 22 2) (om-make-color 0 0 0)) (list (list 11 22 2 0) (om-make-color 0 0 0)) (list (list 11 23) (om-make-color 0 0 0)) (list (list 11 23 0) (om-make-color 0 0 0)) (list (list 11 23 0 0) (om-make-color 0 0 0)) (list (list 11 23 1) (om-make-color 0 0 0)) (list (list 11 23 1 0) (om-make-color 0 0 0)) (list (list 11 23 2) (om-make-color 0 0 0)) (list (list 11 23 2 0) (om-make-color 0 0 0)) (list (list 11 24) (om-make-color 0 0 0)) (list (list 11 24 0) (om-make-color 0 0 0)) (list (list 11 24 0 0) (om-make-color 0 0 0)) (list (list 11 25) (om-make-color 0 0 0)) (list (list 11 25 0) (om-make-color 0 0 0)) (list (list 11 25 0 0) (om-make-color 0 0 0)) (list (list 11 25 1) (om-make-color 0 0 0)) (list (list 11 25 1 0) (om-make-color 0 0 0)) (list (list 11 25 2) (om-make-color 0 0 0)) (list (list 11 25 2 0) (om-make-color 0 0 0)) (list (list 11 26) (om-make-color 0 0 0)) (list (list 11 26 0) (om-make-color 0 0 0)) (list (list 11 26 0 0) (om-make-color 0 0 0)) (list (list 11 26 1) (om-make-color 0 0 0)) (list (list 11 26 1 0) (om-make-color 0 0 0)) (list (list 11 27) (om-make-color 0 0 0)) (list (list 11 27 0) (om-make-color 0 0 0)) (list (list 11 27 0 0) (om-make-color 0 0 0)) (list (list 11 28) (om-make-color 0 0 0)) (list (list 11 28 0) (om-make-color 0 0 0)) (list (list 11 28 0 0) (om-make-color 0 0 0)) (list (list 11 29) (om-make-color 0 0 0)) (list (list 11 29 0) (om-make-color 0 0 0)) (list (list 11 29 0 0) (om-make-color 0 0 0)) (list (list 11 30) (om-make-color 0 0 0)) (list (list 11 30 0) (om-make-color 0 0 0)) (list (list 11 30 0 0) (om-make-color 0 0 0)) (list (list 11 31) (om-make-color 0 0 0)) (list (list 11 31 0) (om-make-color 0 0 0)) (list (list 11 31 0 0) (om-make-color 0 0 0)) (list (list 11 32) (om-make-color 0 0 0)) (list (list 11 32 0) (om-make-color 0 0 0)) (list (list 11 32 0 0) (om-make-color 0 0 0)) (list (list 11 32 1) (om-make-color 0 0 0)) (list (list 11 32 1 0) (om-make-color 0 0 0)) (list (list 11 32 2) (om-make-color 0 0 0)) (list (list 11 32 2 0) (om-make-color 0 0 0)) (list (list 11 33) (om-make-color 0 0 0)) (list (list 11 33 0) (om-make-color 0 0 0)) (list (list 11 33 0 0) (om-make-color 0 0 0)) (list (list 11 34) (om-make-color 0 0 0)) (list (list 11 34 0) (om-make-color 0 0 0)) (list (list 11 34 0 0) (om-make-color 0 0 0)) (list (list 11 34 1) (om-make-color 0 0 0)) (list (list 11 34 1 0) (om-make-color 0 0 0)) (list (list 11 34 2) (om-make-color 0 0 0)) (list (list 11 34 2 0) (om-make-color 0 0 0)) (list (list 11 35) (om-make-color 0 0 0)) (list (list 11 35 0) (om-make-color 0 0 0)) (list (list 11 35 0 0) (om-make-color 0 0 0)) (list (list 11 35 1) (om-make-color 0 0 0)) (list (list 11 35 1 0) (om-make-color 0 0 0)) (list (list 11 35 2) (om-make-color 0 0 0)) (list (list 11 35 2 0) (om-make-color 0 0 0)) (list (list 11 36) (om-make-color 0 0 0)) (list (list 11 36 0) (om-make-color 0 0 0)) (list (list 11 36 0 0) (om-make-color 0 0 0)) (list (list 11 37) (om-make-color 0 0 0)) (list (list 11 37 0) (om-make-color 0 0 0)) (list (list 11 37 0 0) (om-make-color 0 0 0)) (list (list 11 37 1) (om-make-color 0 0 0)) (list (list 11 37 1 0) (om-make-color 0 0 0)) (list (list 11 37 2) (om-make-color 0 0 0)) (list (list 11 37 2 0) (om-make-color 0 0 0)) (list (list 11 38) (om-make-color 0 0 0)) (list (list 11 38 0) (om-make-color 0 0 0)) (list (list 11 38 0 0) (om-make-color 0 0 0)) (list (list 11 38 1) (om-make-color 0 0 0)) (list (list 11 38 1 0) (om-make-color 0 0 0)) (list (list 11 39) (om-make-color 0 0 0)) (list (list 11 39 0) (om-make-color 0 0 0)) (list (list 11 39 0 0) (om-make-color 0 0 0)) (list (list 11 40) (om-make-color 0 0 0)) (list (list 11 40 0) (om-make-color 0 0 0)) (list (list 11 40 0 0) (om-make-color 0 0 0)) (list (list 11 41) (om-make-color 0 0 0)) (list (list 11 41 0) (om-make-color 0 0 0)) (list (list 11 41 0 0) (om-make-color 0 0 0)) (list (list 11 42) (om-make-color 0 0 0)) (list (list 11 42 0) (om-make-color 0 0 0)) (list (list 11 42 0 0) (om-make-color 0 0 0)) (list (list 11 43) (om-make-color 0 0 0)) (list (list 11 43 0) (om-make-color 0 0 0)) (list (list 11 43 0 0) (om-make-color 0 0 0)) (list (list 11 44) (om-make-color 0 0 0)) (list (list 11 44 0) (om-make-color 0 0 0)) (list (list 11 44 0 0) (om-make-color 0 0 0)) (list (list 11 44 1) (om-make-color 0 0 0)) (list (list 11 44 1 0) (om-make-color 0 0 0)) (list (list 11 44 2) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 4 24 (list 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1 1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0))) t nil nil) (om-load-editor-box1 "MULTI-SEQ" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 24 307) (om-make-point 216 183) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100)) :lonset '(0 4000 8000 9000 13000 17000 36000 40000 44000 45000 49000 53000 72000 76000 80000 81000 85000 89000 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200)) :lonset '(500 4500 8500 9500 13500 17500 36500 40500 44500 45500 49500 53500 72500 76500 80500 81500 85500 89500 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300)) :lonset '(2000 6000 10000 11000 15000 19000 38000 42000 46000 47000 51000 55000 74000 78000 82000 83000 87000 91000 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400)) :lonset '(3500 7500 11500 12500 16500 20500 39500 43500 47500 48500 52500 56500 75500 79500 83500 84500 88500 92500 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500)) :lonset '(6500 10500 14500 15500 19500 23500 42500 46500 50500 51500 55500 59500 78500 82500 86500 87500 91500 95500 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600)) :lonset '(12000 16000 20000 21000 25000 29000 48000 52000 56000 57000 61000 65000 84000 88000 92000 93000 97000 101000 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700)) :lonset '(14000 18000 22000 23000 27000 31000 50000 54000 58000 59000 63000 67000 86000 90000 94000 95000 99000 103000 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800)) :lonset '(18500 22500 26500 27500 31500 35500 54500 58500 62500 63500 67500 71500 90500 94500 98500 99500 103500 107500 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900)) :lonset '(21500 25500 29500 30500 34500 38500 57500 61500 65500 66500 70500 74500 93500 97500 101500 102500 106500 110500 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000)) :lonset '(24000 28000 32000 33000 37000 41000 60000 64000 68000 69000 73000 77000 96000 100000 104000 105000 109000 113000 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100)) :lonset '(24500 28500 32500 33500 37500 41500 60500 64500 68500 69500 73500 77500 96500 100500 104500 105500 109500 113500 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200)) :lonset '(26000 30000 34000 35000 39000 43000 62000 66000 70000 71000 75000 79000 98000 102000 106000 107000 111000 115000 119000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 14) (om-make-color 0 0 0)) (list (list 3 14 0) (om-make-color 0 0 0)) (list (list 3 15) (om-make-color 0 0 0)) (list (list 3 15 0) (om-make-color 0 0 0)) (list (list 3 16) (om-make-color 0 0 0)) (list (list 3 16 0) (om-make-color 0 0 0)) (list (list 3 17) (om-make-color 0 0 0)) (list (list 3 17 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 15) (om-make-color 0 0 0)) (list (list 4 15 0) (om-make-color 0 0 0)) (list (list 4 16) (om-make-color 0 0 0)) (list (list 4 16 0) (om-make-color 0 0 0)) (list (list 4 17) (om-make-color 0 0 0)) (list (list 4 17 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)) (list (list 5 16) (om-make-color 0 0 0)) (list (list 5 16 0) (om-make-color 0 0 0)) (list (list 5 17) (om-make-color 0 0 0)) (list (list 5 17 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 0 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 1 0) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 2 0) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 3 0) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 4 0) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 5 0) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 6 0) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 7 0) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 8 0) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 6 9 0) (om-make-color 0 0 0)) (list (list 6 10) (om-make-color 0 0 0)) (list (list 6 10 0) (om-make-color 0 0 0)) (list (list 6 11) (om-make-color 0 0 0)) (list (list 6 11 0) (om-make-color 0 0 0)) (list (list 6 12) (om-make-color 0 0 0)) (list (list 6 12 0) (om-make-color 0 0 0)) (list (list 6 13) (om-make-color 0 0 0)) (list (list 6 13 0) (om-make-color 0 0 0)) (list (list 6 14) (om-make-color 0 0 0)) (list (list 6 14 0) (om-make-color 0 0 0)) (list (list 6 15) (om-make-color 0 0 0)) (list (list 6 15 0) (om-make-color 0 0 0)) (list (list 6 16) (om-make-color 0 0 0)) (list (list 6 16 0) (om-make-color 0 0 0)) (list (list 6 17) (om-make-color 0 0 0)) (list (list 6 17 0) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 0 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 1 0) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 2 0) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 3 0) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 4 0) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 5 0) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 6 0) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 7 0) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 8 0) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 7 9 0) (om-make-color 0 0 0)) (list (list 7 10) (om-make-color 0 0 0)) (list (list 7 10 0) (om-make-color 0 0 0)) (list (list 7 11) (om-make-color 0 0 0)) (list (list 7 11 0) (om-make-color 0 0 0)) (list (list 7 12) (om-make-color 0 0 0)) (list (list 7 12 0) (om-make-color 0 0 0)) (list (list 7 13) (om-make-color 0 0 0)) (list (list 7 13 0) (om-make-color 0 0 0)) (list (list 7 14) (om-make-color 0 0 0)) (list (list 7 14 0) (om-make-color 0 0 0)) (list (list 7 15) (om-make-color 0 0 0)) (list (list 7 15 0) (om-make-color 0 0 0)) (list (list 7 16) (om-make-color 0 0 0)) (list (list 7 16 0) (om-make-color 0 0 0)) (list (list 7 17) (om-make-color 0 0 0)) (list (list 7 17 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 0 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 1 0) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 2 0) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 3 0) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 4 0) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 5 0) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 6 0) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 7 0) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 8 0) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 8 9 0) (om-make-color 0 0 0)) (list (list 8 10) (om-make-color 0 0 0)) (list (list 8 10 0) (om-make-color 0 0 0)) (list (list 8 11) (om-make-color 0 0 0)) (list (list 8 11 0) (om-make-color 0 0 0)) (list (list 8 12) (om-make-color 0 0 0)) (list (list 8 12 0) (om-make-color 0 0 0)) (list (list 8 13) (om-make-color 0 0 0)) (list (list 8 13 0) (om-make-color 0 0 0)) (list (list 8 14) (om-make-color 0 0 0)) (list (list 8 14 0) (om-make-color 0 0 0)) (list (list 8 15) (om-make-color 0 0 0)) (list (list 8 15 0) (om-make-color 0 0 0)) (list (list 8 16) (om-make-color 0 0 0)) (list (list 8 16 0) (om-make-color 0 0 0)) (list (list 8 17) (om-make-color 0 0 0)) (list (list 8 17 0) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 0 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 1 0) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 2 0) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 3 0) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 4 0) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 5 0) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 6 0) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 7 0) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 8 0) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 9 9 0) (om-make-color 0 0 0)) (list (list 9 10) (om-make-color 0 0 0)) (list (list 9 10 0) (om-make-color 0 0 0)) (list (list 9 11) (om-make-color 0 0 0)) (list (list 9 11 0) (om-make-color 0 0 0)) (list (list 9 12) (om-make-color 0 0 0)) (list (list 9 12 0) (om-make-color 0 0 0)) (list (list 9 13) (om-make-color 0 0 0)) (list (list 9 13 0) (om-make-color 0 0 0)) (list (list 9 14) (om-make-color 0 0 0)) (list (list 9 14 0) (om-make-color 0 0 0)) (list (list 9 15) (om-make-color 0 0 0)) (list (list 9 15 0) (om-make-color 0 0 0)) (list (list 9 16) (om-make-color 0 0 0)) (list (list 9 16 0) (om-make-color 0 0 0)) (list (list 9 17) (om-make-color 0 0 0)) (list (list 9 17 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 0 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 1 0) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 2 0) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 3 0) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 4 0) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 5 0) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 6 0) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 7 0) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 8 0) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)) (list (list 10 9 0) (om-make-color 0 0 0)) (list (list 10 10) (om-make-color 0 0 0)) (list (list 10 10 0) (om-make-color 0 0 0)) (list (list 10 11) (om-make-color 0 0 0)) (list (list 10 11 0) (om-make-color 0 0 0)) (list (list 10 12) (om-make-color 0 0 0)) (list (list 10 12 0) (om-make-color 0 0 0)) (list (list 10 13) (om-make-color 0 0 0)) (list (list 10 13 0) (om-make-color 0 0 0)) (list (list 10 14) (om-make-color 0 0 0)) (list (list 10 14 0) (om-make-color 0 0 0)) (list (list 10 15) (om-make-color 0 0 0)) (list (list 10 15 0) (om-make-color 0 0 0)) (list (list 10 16) (om-make-color 0 0 0)) (list (list 10 16 0) (om-make-color 0 0 0)) (list (list 10 17) (om-make-color 0 0 0)) (list (list 10 17 0) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 0 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 1 0) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 2 0) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 3 0) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 4 0) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 5 0) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 6 0) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 7 0) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 11 8 0) (om-make-color 0 0 0)) (list (list 11 9) (om-make-color 0 0 0)) (list (list 11 9 0) (om-make-color 0 0 0)) (list (list 11 10) (om-make-color 0 0 0)) (list (list 11 10 0) (om-make-color 0 0 0)) (list (list 11 11) (om-make-color 0 0 0)) (list (list 11 11 0) (om-make-color 0 0 0)) (list (list 11 12) (om-make-color 0 0 0)) (list (list 11 12 0) (om-make-color 0 0 0)) (list (list 11 13) (om-make-color 0 0 0)) (list (list 11 13 0) (om-make-color 0 0 0)) (list (list 11 14) (om-make-color 0 0 0)) (list (list 11 14 0) (om-make-color 0 0 0)) (list (list 11 15) (om-make-color 0 0 0)) (list (list 11 15 0) (om-make-color 0 0 0)) (list (list 11 16) (om-make-color 0 0 0)) (list (list 11 16 0) (om-make-color 0 0 0)) (list (list 11 17) (om-make-color 0 0 0)) (list (list 11 17 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 4 24 (list 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1 1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 19/100 nil 1000 0 18350450 2621450 0 0))) t nil nil) (om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 440 190) (om-make-point 35 20) (list 6 8) "(6 8)" nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 427 166) (om-make-point 20 20) 8 "8" nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 406 192) (om-make-point 21 20) 't "t" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 159 192) (om-make-point 22 20) 500 "500" nil) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" nil) (om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" 3) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':poly?) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':mindiv) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':sign)) (om-make-point 330 216) (om-make-point 146 61) nil nil nil 1) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 219 73) (om-make-point 22 20) 72 "72" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 303 73) (om-make-point 11 20) 6 "6" nil) (om-load-boxcall 'genfun "PATTERNS" 'patterns '((om-load-inputfun 'input-funbox "periode" "N" 72) (om-load-inputfun 'input-funbox "numbre de voix" "NUMVOICES" 6)) (om-make-point 236 102) nil nil nil nil 2) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" nil) (om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" 3) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':beats)) (om-make-point 52 218) (om-make-point 143 61) nil nil nil 1)) '((6 1 2 0 nil 0) (6 1 3 0 nil 0) (6 0 4 0 nil 0) (6 0 5 0 nil 0) (1 0 6 0 nil 0) (0 0 6 1 nil 0) (2 0 7 0 nil 0) (4 0 7 1 nil 0) (5 0 8 0 nil 0) (3 0 8 1 nil 0) (7 0 9 2 nil 0) (8 0 10 2 nil 0) (21 0 15 0 nil 3) (25 0 16 0 nil 0) (24 0 21 0 ((om-make-point 252 161) (om-make-point 351 189) (om-make-point 351 189) (om-make-point 351 216)) 3) (24 1 21 1 ((om-make-point 270 161) (om-make-point 371 188) (om-make-point 372 189) (om-make-point 372 216)) 3) (19 0 21 3 nil 2) (18 0 21 4 nil 2) (17 0 21 5 nil 2) (22 0 24 0 nil 0) (23 0 24 1 nil 0) (24 0 25 0 ((om-make-point 252 161) (om-make-point 81 189) (om-make-point 81 189) (om-make-point 81 218)) 0) (24 1 25 1 ((om-make-point 270 161) (om-make-point 110 189) (om-make-point 110 189) (om-make-point 110 218)) 0) (20 0 25 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 12 320)) (setf (pict-size newpict) (om-make-point 1120 331)) newpict)) 5.0))
