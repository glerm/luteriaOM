; OM File Header - Saved 2014/04/26 5:39:38
; (6.04 :patc (om-make-point 21 108) (om-make-point 71 156) (om-make-point 1119 758) "No documentation " 183 0 nil "2014/04/26 5:39:38")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "03-imp-rythm" '((om-load-boxcall 'genfun "TRANSP-COMB1" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12)) (om-make-point 323 117) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 850 28) '"R.W. Hall & P. Klingsberg: \"Asymmetric Rhythms and Tiling Canons\" (to appear in AMM)" "" (om-make-point 158 51) nil (om-make-color 8/17 13/85 46/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) (om-make-point 1 409) (om-make-point 136 99) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(9/2 (((12 8) (1 2 7 2)) ((12 8) (1 2 7 2)) ((12 8) (1 2 7 2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 3500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 3500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 3500) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)) ((0) (0) (0) (0)) ((0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'genfun "C2RHYTHM" 'c2rhythm '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "signature" "SIGNATURE" (list 12 8)) (om-load-inputfun 'input-funbox "times" "TIMES" 3)) (om-make-point 23 301) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 316 194) (om-make-point 87 64) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 10) (list 4 5 7 2) (list 8 9 11 6)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux9" 't 'nil (om-make-point 179 106) (om-make-point 37 20) (list 0 4 8) "(0 4 8)" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 9 105) (om-make-point 110 133) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 10)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 66 46) (om-make-point 76 22) (list 0 1 3 10) "(0 1 3 10)" nil) (om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 16 47) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'lispfun "CAR" 'car '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 890 211) nil nil nil nil 1) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 711 207) (om-make-point 52 20) 6000 "6000" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 784 164) (om-make-point 20 20) 100 "100" nil) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 835 193) nil nil nil nil 1) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 789 231) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 866 92) (om-make-point 231 25) (list 0 1 3 10 4 5 7 2 8 9 11 6) "(0 1 3 10 4 5 7 2 8 9 11 6)" nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 1 2 3 4 5 6 7 8 9 10 11))) (om-make-point 908 132) (om-make-point 139 71) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 1 3 10 4 5 7 2 8 9 11 6)) :from-file t)) nil nil (corrige (pairlis '(show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos) (list 't (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 538 249) (om-make-point 20 20) 6 "6" nil) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 717 280) (om-make-point 225 103) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-boxcall 'patch-box "set-serie" '("elements" "mathTools" "tools" "set-serie") '((om-load-inputfun 'input-funbox "no documentation" "multi" nil) (om-load-inputfun 'input-funbox "no documentation" "serie" nil) (om-load-inputfun 'input-funbox "no documentation" "times" 6)) (om-make-point 545 392) nil nil nil nil 1) (om-load-editor-box1 "MULTI-SEQ1" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 479 499) (om-make-point 560 192) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600)) :lonset '(0 200 600 2000 2400 2600 3000 4400 4800 5000 5400 6800 7200 7400 7800 9200 9600 9800 10200 11600 12000 12200 12600 14000 17000 20000 23000 26000 29000 32000 35000 38000 41000 44000 47000 50000 53000 56000 59000 62000 65000 68000 71000 74000 77000 80000 83000 86000 89000 92000 95000 98000 101000 104000 107000 110000 113000 116000 119000 122000 125000 128000 131000 134000 137000 140000 143000 146000 149000 152000 155000 158000 161000) :ldurlvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600)) :lonset '(800 1000 1400 2800 3200 3400 3800 5200 5600 5800 6200 7600 8000 8200 8600 10000 10400 10600 11000 12400 12800 13000 13400 14800 17000 19200 21400 23600 25800 28000 30200 32400 34600 36800 39000 41200 43400 45600 47800 50000 52200 54400 56600 58800 61000 63200 65400 67600 69800 72000 74200 76400 78600 80800 83000 85200 87400 89600 91800 94000 96200 98400 100600 102800 105000 107200 109400 111600 113800 116000 118200 120400 161000) :ldurlvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600) (6000) (6100) (6300) (7000) (6400) (6500) (6700) (6200) (6800) (6900) (7100) (6600)) :lonset '(1600 1800 2200 3600 4000 4200 4600 6000 6400 6600 7000 8400 8800 9000 9400 10800 11200 11400 11800 13200 13600 13800 14200 15600 17000 18400 19800 21200 22600 24000 25400 26800 28200 29600 31000 32400 33800 35200 36600 38000 39400 40800 42200 43600 45000 46400 47800 49200 50600 52000 53400 54800 56200 57600 59000 60400 61800 63200 64600 66000 67400 68800 70200 71600 73000 74400 75800 77200 78600 80000 81400 82800 161000) :ldurlvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 0 28) (om-make-color 0 0 0)) (list (list 0 28 0) (om-make-color 0 0 0)) (list (list 0 29) (om-make-color 0 0 0)) (list (list 0 29 0) (om-make-color 0 0 0)) (list (list 0 30) (om-make-color 0 0 0)) (list (list 0 30 0) (om-make-color 0 0 0)) (list (list 0 31) (om-make-color 0 0 0)) (list (list 0 31 0) (om-make-color 0 0 0)) (list (list 0 32) (om-make-color 0 0 0)) (list (list 0 32 0) (om-make-color 0 0 0)) (list (list 0 33) (om-make-color 0 0 0)) (list (list 0 33 0) (om-make-color 0 0 0)) (list (list 0 34) (om-make-color 0 0 0)) (list (list 0 34 0) (om-make-color 0 0 0)) (list (list 0 35) (om-make-color 0 0 0)) (list (list 0 35 0) (om-make-color 0 0 0)) (list (list 0 36) (om-make-color 0 0 0)) (list (list 0 36 0) (om-make-color 0 0 0)) (list (list 0 37) (om-make-color 0 0 0)) (list (list 0 37 0) (om-make-color 0 0 0)) (list (list 0 38) (om-make-color 0 0 0)) (list (list 0 38 0) (om-make-color 0 0 0)) (list (list 0 39) (om-make-color 0 0 0)) (list (list 0 39 0) (om-make-color 0 0 0)) (list (list 0 40) (om-make-color 0 0 0)) (list (list 0 40 0) (om-make-color 0 0 0)) (list (list 0 41) (om-make-color 0 0 0)) (list (list 0 41 0) (om-make-color 0 0 0)) (list (list 0 42) (om-make-color 0 0 0)) (list (list 0 42 0) (om-make-color 0 0 0)) (list (list 0 43) (om-make-color 0 0 0)) (list (list 0 43 0) (om-make-color 0 0 0)) (list (list 0 44) (om-make-color 0 0 0)) (list (list 0 44 0) (om-make-color 0 0 0)) (list (list 0 45) (om-make-color 0 0 0)) (list (list 0 45 0) (om-make-color 0 0 0)) (list (list 0 46) (om-make-color 0 0 0)) (list (list 0 46 0) (om-make-color 0 0 0)) (list (list 0 47) (om-make-color 0 0 0)) (list (list 0 47 0) (om-make-color 0 0 0)) (list (list 0 48) (om-make-color 0 0 0)) (list (list 0 48 0) (om-make-color 0 0 0)) (list (list 0 49) (om-make-color 0 0 0)) (list (list 0 49 0) (om-make-color 0 0 0)) (list (list 0 50) (om-make-color 0 0 0)) (list (list 0 50 0) (om-make-color 0 0 0)) (list (list 0 51) (om-make-color 0 0 0)) (list (list 0 51 0) (om-make-color 0 0 0)) (list (list 0 52) (om-make-color 0 0 0)) (list (list 0 52 0) (om-make-color 0 0 0)) (list (list 0 53) (om-make-color 0 0 0)) (list (list 0 53 0) (om-make-color 0 0 0)) (list (list 0 54) (om-make-color 0 0 0)) (list (list 0 54 0) (om-make-color 0 0 0)) (list (list 0 55) (om-make-color 0 0 0)) (list (list 0 55 0) (om-make-color 0 0 0)) (list (list 0 56) (om-make-color 0 0 0)) (list (list 0 56 0) (om-make-color 0 0 0)) (list (list 0 57) (om-make-color 0 0 0)) (list (list 0 57 0) (om-make-color 0 0 0)) (list (list 0 58) (om-make-color 0 0 0)) (list (list 0 58 0) (om-make-color 0 0 0)) (list (list 0 59) (om-make-color 0 0 0)) (list (list 0 59 0) (om-make-color 0 0 0)) (list (list 0 60) (om-make-color 0 0 0)) (list (list 0 60 0) (om-make-color 0 0 0)) (list (list 0 61) (om-make-color 0 0 0)) (list (list 0 61 0) (om-make-color 0 0 0)) (list (list 0 62) (om-make-color 0 0 0)) (list (list 0 62 0) (om-make-color 0 0 0)) (list (list 0 63) (om-make-color 0 0 0)) (list (list 0 63 0) (om-make-color 0 0 0)) (list (list 0 64) (om-make-color 0 0 0)) (list (list 0 64 0) (om-make-color 0 0 0)) (list (list 0 65) (om-make-color 0 0 0)) (list (list 0 65 0) (om-make-color 0 0 0)) (list (list 0 66) (om-make-color 0 0 0)) (list (list 0 66 0) (om-make-color 0 0 0)) (list (list 0 67) (om-make-color 0 0 0)) (list (list 0 67 0) (om-make-color 0 0 0)) (list (list 0 68) (om-make-color 0 0 0)) (list (list 0 68 0) (om-make-color 0 0 0)) (list (list 0 69) (om-make-color 0 0 0)) (list (list 0 69 0) (om-make-color 0 0 0)) (list (list 0 70) (om-make-color 0 0 0)) (list (list 0 70 0) (om-make-color 0 0 0)) (list (list 0 71) (om-make-color 0 0 0)) (list (list 0 71 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 13) (om-make-color 0 0 0)) (list (list 1 13 0) (om-make-color 0 0 0)) (list (list 1 14) (om-make-color 0 0 0)) (list (list 1 14 0) (om-make-color 0 0 0)) (list (list 1 15) (om-make-color 0 0 0)) (list (list 1 15 0) (om-make-color 0 0 0)) (list (list 1 16) (om-make-color 0 0 0)) (list (list 1 16 0) (om-make-color 0 0 0)) (list (list 1 17) (om-make-color 0 0 0)) (list (list 1 17 0) (om-make-color 0 0 0)) (list (list 1 18) (om-make-color 0 0 0)) (list (list 1 18 0) (om-make-color 0 0 0)) (list (list 1 19) (om-make-color 0 0 0)) (list (list 1 19 0) (om-make-color 0 0 0)) (list (list 1 20) (om-make-color 0 0 0)) (list (list 1 20 0) (om-make-color 0 0 0)) (list (list 1 21) (om-make-color 0 0 0)) (list (list 1 21 0) (om-make-color 0 0 0)) (list (list 1 22) (om-make-color 0 0 0)) (list (list 1 22 0) (om-make-color 0 0 0)) (list (list 1 23) (om-make-color 0 0 0)) (list (list 1 23 0) (om-make-color 0 0 0)) (list (list 1 24) (om-make-color 0 0 0)) (list (list 1 24 0) (om-make-color 0 0 0)) (list (list 1 25) (om-make-color 0 0 0)) (list (list 1 25 0) (om-make-color 0 0 0)) (list (list 1 26) (om-make-color 0 0 0)) (list (list 1 26 0) (om-make-color 0 0 0)) (list (list 1 27) (om-make-color 0 0 0)) (list (list 1 27 0) (om-make-color 0 0 0)) (list (list 1 28) (om-make-color 0 0 0)) (list (list 1 28 0) (om-make-color 0 0 0)) (list (list 1 29) (om-make-color 0 0 0)) (list (list 1 29 0) (om-make-color 0 0 0)) (list (list 1 30) (om-make-color 0 0 0)) (list (list 1 30 0) (om-make-color 0 0 0)) (list (list 1 31) (om-make-color 0 0 0)) (list (list 1 31 0) (om-make-color 0 0 0)) (list (list 1 32) (om-make-color 0 0 0)) (list (list 1 32 0) (om-make-color 0 0 0)) (list (list 1 33) (om-make-color 0 0 0)) (list (list 1 33 0) (om-make-color 0 0 0)) (list (list 1 34) (om-make-color 0 0 0)) (list (list 1 34 0) (om-make-color 0 0 0)) (list (list 1 35) (om-make-color 0 0 0)) (list (list 1 35 0) (om-make-color 0 0 0)) (list (list 1 36) (om-make-color 0 0 0)) (list (list 1 36 0) (om-make-color 0 0 0)) (list (list 1 37) (om-make-color 0 0 0)) (list (list 1 37 0) (om-make-color 0 0 0)) (list (list 1 38) (om-make-color 0 0 0)) (list (list 1 38 0) (om-make-color 0 0 0)) (list (list 1 39) (om-make-color 0 0 0)) (list (list 1 39 0) (om-make-color 0 0 0)) (list (list 1 40) (om-make-color 0 0 0)) (list (list 1 40 0) (om-make-color 0 0 0)) (list (list 1 41) (om-make-color 0 0 0)) (list (list 1 41 0) (om-make-color 0 0 0)) (list (list 1 42) (om-make-color 0 0 0)) (list (list 1 42 0) (om-make-color 0 0 0)) (list (list 1 43) (om-make-color 0 0 0)) (list (list 1 43 0) (om-make-color 0 0 0)) (list (list 1 44) (om-make-color 0 0 0)) (list (list 1 44 0) (om-make-color 0 0 0)) (list (list 1 45) (om-make-color 0 0 0)) (list (list 1 45 0) (om-make-color 0 0 0)) (list (list 1 46) (om-make-color 0 0 0)) (list (list 1 46 0) (om-make-color 0 0 0)) (list (list 1 47) (om-make-color 0 0 0)) (list (list 1 47 0) (om-make-color 0 0 0)) (list (list 1 48) (om-make-color 0 0 0)) (list (list 1 48 0) (om-make-color 0 0 0)) (list (list 1 49) (om-make-color 0 0 0)) (list (list 1 49 0) (om-make-color 0 0 0)) (list (list 1 50) (om-make-color 0 0 0)) (list (list 1 50 0) (om-make-color 0 0 0)) (list (list 1 51) (om-make-color 0 0 0)) (list (list 1 51 0) (om-make-color 0 0 0)) (list (list 1 52) (om-make-color 0 0 0)) (list (list 1 52 0) (om-make-color 0 0 0)) (list (list 1 53) (om-make-color 0 0 0)) (list (list 1 53 0) (om-make-color 0 0 0)) (list (list 1 54) (om-make-color 0 0 0)) (list (list 1 54 0) (om-make-color 0 0 0)) (list (list 1 55) (om-make-color 0 0 0)) (list (list 1 55 0) (om-make-color 0 0 0)) (list (list 1 56) (om-make-color 0 0 0)) (list (list 1 56 0) (om-make-color 0 0 0)) (list (list 1 57) (om-make-color 0 0 0)) (list (list 1 57 0) (om-make-color 0 0 0)) (list (list 1 58) (om-make-color 0 0 0)) (list (list 1 58 0) (om-make-color 0 0 0)) (list (list 1 59) (om-make-color 0 0 0)) (list (list 1 59 0) (om-make-color 0 0 0)) (list (list 1 60) (om-make-color 0 0 0)) (list (list 1 60 0) (om-make-color 0 0 0)) (list (list 1 61) (om-make-color 0 0 0)) (list (list 1 61 0) (om-make-color 0 0 0)) (list (list 1 62) (om-make-color 0 0 0)) (list (list 1 62 0) (om-make-color 0 0 0)) (list (list 1 63) (om-make-color 0 0 0)) (list (list 1 63 0) (om-make-color 0 0 0)) (list (list 1 64) (om-make-color 0 0 0)) (list (list 1 64 0) (om-make-color 0 0 0)) (list (list 1 65) (om-make-color 0 0 0)) (list (list 1 65 0) (om-make-color 0 0 0)) (list (list 1 66) (om-make-color 0 0 0)) (list (list 1 66 0) (om-make-color 0 0 0)) (list (list 1 67) (om-make-color 0 0 0)) (list (list 1 67 0) (om-make-color 0 0 0)) (list (list 1 68) (om-make-color 0 0 0)) (list (list 1 68 0) (om-make-color 0 0 0)) (list (list 1 69) (om-make-color 0 0 0)) (list (list 1 69 0) (om-make-color 0 0 0)) (list (list 1 70) (om-make-color 0 0 0)) (list (list 1 70 0) (om-make-color 0 0 0)) (list (list 1 71) (om-make-color 0 0 0)) (list (list 1 71 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 14) (om-make-color 0 0 0)) (list (list 2 14 0) (om-make-color 0 0 0)) (list (list 2 15) (om-make-color 0 0 0)) (list (list 2 15 0) (om-make-color 0 0 0)) (list (list 2 16) (om-make-color 0 0 0)) (list (list 2 16 0) (om-make-color 0 0 0)) (list (list 2 17) (om-make-color 0 0 0)) (list (list 2 17 0) (om-make-color 0 0 0)) (list (list 2 18) (om-make-color 0 0 0)) (list (list 2 18 0) (om-make-color 0 0 0)) (list (list 2 19) (om-make-color 0 0 0)) (list (list 2 19 0) (om-make-color 0 0 0)) (list (list 2 20) (om-make-color 0 0 0)) (list (list 2 20 0) (om-make-color 0 0 0)) (list (list 2 21) (om-make-color 0 0 0)) (list (list 2 21 0) (om-make-color 0 0 0)) (list (list 2 22) (om-make-color 0 0 0)) (list (list 2 22 0) (om-make-color 0 0 0)) (list (list 2 23) (om-make-color 0 0 0)) (list (list 2 23 0) (om-make-color 0 0 0)) (list (list 2 24) (om-make-color 0 0 0)) (list (list 2 24 0) (om-make-color 0 0 0)) (list (list 2 25) (om-make-color 0 0 0)) (list (list 2 25 0) (om-make-color 0 0 0)) (list (list 2 26) (om-make-color 0 0 0)) (list (list 2 26 0) (om-make-color 0 0 0)) (list (list 2 27) (om-make-color 0 0 0)) (list (list 2 27 0) (om-make-color 0 0 0)) (list (list 2 28) (om-make-color 0 0 0)) (list (list 2 28 0) (om-make-color 0 0 0)) (list (list 2 29) (om-make-color 0 0 0)) (list (list 2 29 0) (om-make-color 0 0 0)) (list (list 2 30) (om-make-color 0 0 0)) (list (list 2 30 0) (om-make-color 0 0 0)) (list (list 2 31) (om-make-color 0 0 0)) (list (list 2 31 0) (om-make-color 0 0 0)) (list (list 2 32) (om-make-color 0 0 0)) (list (list 2 32 0) (om-make-color 0 0 0)) (list (list 2 33) (om-make-color 0 0 0)) (list (list 2 33 0) (om-make-color 0 0 0)) (list (list 2 34) (om-make-color 0 0 0)) (list (list 2 34 0) (om-make-color 0 0 0)) (list (list 2 35) (om-make-color 0 0 0)) (list (list 2 35 0) (om-make-color 0 0 0)) (list (list 2 36) (om-make-color 0 0 0)) (list (list 2 36 0) (om-make-color 0 0 0)) (list (list 2 37) (om-make-color 0 0 0)) (list (list 2 37 0) (om-make-color 0 0 0)) (list (list 2 38) (om-make-color 0 0 0)) (list (list 2 38 0) (om-make-color 0 0 0)) (list (list 2 39) (om-make-color 0 0 0)) (list (list 2 39 0) (om-make-color 0 0 0)) (list (list 2 40) (om-make-color 0 0 0)) (list (list 2 40 0) (om-make-color 0 0 0)) (list (list 2 41) (om-make-color 0 0 0)) (list (list 2 41 0) (om-make-color 0 0 0)) (list (list 2 42) (om-make-color 0 0 0)) (list (list 2 42 0) (om-make-color 0 0 0)) (list (list 2 43) (om-make-color 0 0 0)) (list (list 2 43 0) (om-make-color 0 0 0)) (list (list 2 44) (om-make-color 0 0 0)) (list (list 2 44 0) (om-make-color 0 0 0)) (list (list 2 45) (om-make-color 0 0 0)) (list (list 2 45 0) (om-make-color 0 0 0)) (list (list 2 46) (om-make-color 0 0 0)) (list (list 2 46 0) (om-make-color 0 0 0)) (list (list 2 47) (om-make-color 0 0 0)) (list (list 2 47 0) (om-make-color 0 0 0)) (list (list 2 48) (om-make-color 0 0 0)) (list (list 2 48 0) (om-make-color 0 0 0)) (list (list 2 49) (om-make-color 0 0 0)) (list (list 2 49 0) (om-make-color 0 0 0)) (list (list 2 50) (om-make-color 0 0 0)) (list (list 2 50 0) (om-make-color 0 0 0)) (list (list 2 51) (om-make-color 0 0 0)) (list (list 2 51 0) (om-make-color 0 0 0)) (list (list 2 52) (om-make-color 0 0 0)) (list (list 2 52 0) (om-make-color 0 0 0)) (list (list 2 53) (om-make-color 0 0 0)) (list (list 2 53 0) (om-make-color 0 0 0)) (list (list 2 54) (om-make-color 0 0 0)) (list (list 2 54 0) (om-make-color 0 0 0)) (list (list 2 55) (om-make-color 0 0 0)) (list (list 2 55 0) (om-make-color 0 0 0)) (list (list 2 56) (om-make-color 0 0 0)) (list (list 2 56 0) (om-make-color 0 0 0)) (list (list 2 57) (om-make-color 0 0 0)) (list (list 2 57 0) (om-make-color 0 0 0)) (list (list 2 58) (om-make-color 0 0 0)) (list (list 2 58 0) (om-make-color 0 0 0)) (list (list 2 59) (om-make-color 0 0 0)) (list (list 2 59 0) (om-make-color 0 0 0)) (list (list 2 60) (om-make-color 0 0 0)) (list (list 2 60 0) (om-make-color 0 0 0)) (list (list 2 61) (om-make-color 0 0 0)) (list (list 2 61 0) (om-make-color 0 0 0)) (list (list 2 62) (om-make-color 0 0 0)) (list (list 2 62 0) (om-make-color 0 0 0)) (list (list 2 63) (om-make-color 0 0 0)) (list (list 2 63 0) (om-make-color 0 0 0)) (list (list 2 64) (om-make-color 0 0 0)) (list (list 2 64 0) (om-make-color 0 0 0)) (list (list 2 65) (om-make-color 0 0 0)) (list (list 2 65 0) (om-make-color 0 0 0)) (list (list 2 66) (om-make-color 0 0 0)) (list (list 2 66 0) (om-make-color 0 0 0)) (list (list 2 67) (om-make-color 0 0 0)) (list (list 2 67 0) (om-make-color 0 0 0)) (list (list 2 68) (om-make-color 0 0 0)) (list (list 2 68 0) (om-make-color 0 0 0)) (list (list 2 69) (om-make-color 0 0 0)) (list (list 2 69 0) (om-make-color 0 0 0)) (list (list 2 70) (om-make-color 0 0 0)) (list (list 2 70 0) (om-make-color 0 0 0)) (list (list 2 71) (om-make-color 0 0 0)) (list (list 2 71 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 2 46 (list 'g 'g 'g) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 3)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 1 129/100 nil 500 0 18350450 2621450 0 0))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 568 271) (om-make-point 41 20) 200 "200" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 501 197) (om-make-point 52 20) (list 4 4 4) "(4 4 4)" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 426 109) (om-make-point 107 22) (list 1 2 7 2) "(1 2 7 2)" nil) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" nil) (om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" 3) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':beats)) (om-make-point 430 298) (om-make-point 143 61) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 252 412) '"Complete list of 3-Asymmetric rhythmic patterns with period n=12$$R$(1 1 1 9) $(1 1 5 5)$(1 5 1 5)$(1 2 7 2)$(1 2 3 6)$(6 3 2 1)$(2 3 2 5)$(3 3 3 3)$$S$(4 4 4) $$" "" (om-make-point 161 284) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 715 53) '"Asymmetric rhythms and 'tiling canons'" "" (om-make-point 201 1) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((5 0 0 0 nil 0) (7 0 0 1 nil 0) (3 0 2 0 nil 0) (6 0 3 0 nil 0) (0 0 4 2 nil 0) (8 0 6 1 nil 0) (7 0 6 2 nil 0) (15 2 9 0 nil 0) (11 0 12 0 nil 0) (9 0 12 1 nil 0) (10 0 13 0 nil 0) (12 0 13 1 nil 0) (14 0 15 2 nil 0) (13 0 17 1 nil 0) (23 0 18 0 nil 0) (17 1 18 1 nil 0) (18 0 19 0 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (16 0 23 2 nil 0) (20 0 23 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 78 57)) (setf (pict-size newpict) (om-make-point 293 311)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 34 345)) (setf (pict-size newpict) (om-make-point 636 204)) newpict)) 5.0))
