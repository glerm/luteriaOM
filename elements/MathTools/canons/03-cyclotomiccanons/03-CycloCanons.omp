; OM File Header - Saved 2014/04/26 5:39:38
; (6.04 :patc (om-make-point 23 99) (om-make-point 12 44) (om-make-point 1189 797) "non documentation" 183 0 nil "2014/04/26 5:39:38")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "03-CycloCanons" '((om-load-editor-box1 "N-CERCLE5" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 898 557) (om-make-point 161 127) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 1 4 5 6 7 8 11 12) (list 9 10 13 14 15 16 17 20 21) (list 18 19 22 23 24 25 26 29 30) (list 27 28 31 32 33 34 35 38 39) (list 36 37 40 41 42 43 44 47 48) (list 45 46 49 50 51 52 53 56 57) (list 54 55 58 59 60 61 62 65 66) (list 63 64 67 68 69 70 71 2 3)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'lispfun "FIRST2" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 949 413) nil nil nil nil 1) (om-load-boxcall 'genfun "TRANSP-COMB1" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" (list 0 9 18 27 36 45 54 63)) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72)) (om-make-point 903 454) nil nil nil nil 1) (om-load-boxcall 'genfun "CM-CONDITIONS1" 'cm-conditions '((om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 836 112) nil nil "x" nil 1) (om-load-boxcall 'genfun "CM-CONDITIONS1" 'cm-conditions '((om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 178 98) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE4" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 24) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 65 601) (om-make-point 189 154) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 24 :puntos (list (list 0 1 4 5) (list 2 3 6 7) (list 8 9 12 13) (list 10 11 14 15) (list 16 17 20 21) (list 18 19 22 23)) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'lispfun "FIRST1" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 140 461) nil nil nil nil 1) (om-load-boxcall 'lispfun "FIRST1" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 60 465) nil nil nil nil 1) (om-load-boxcall 'genfun "TRANSP-COMB" 'transp-comb '((om-load-inputfun 'input-funbox "no documentation" "A" nil) (om-load-inputfun 'input-funbox "no documentation" "TID" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 24)) (om-make-point 100 521) nil nil nil nil 1) (om-load-boxcomment "comment1" (om-make-point 1004 55) '"Cyclotomic polynomials, CV-conditions and tiling canons" "" (om-make-point 63 9) nil (om-make-color 16/17 41/255 94/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux9" 't 'nil (om-make-point 66 301) (om-make-point 17 20) 24 "24" nil) (om-load-editor-box1 "N-CERCLE3" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 51 330) (om-make-point 113 107) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 24 :puntos (list (list 0 2 8 10 16 18)) :from-file t)) "x" nil (corrige (pairlis '(deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-editor-box1 "N-CERCLE2" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 24) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 325 325) (om-make-point 130 109) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 24 :puntos (list (list 0 1 4 5)) :from-file t)) "x" nil (corrige (pairlis '(deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 72) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 575 422) (om-make-point 242 255) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 1 4 5 6 7 8 11 12)) :from-file t)) "x" nil (corrige (pairlis '(deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-boxcall 'genfun "POLY2CANON" 'poly2canon '((om-load-inputfun 'input-funbox "no documentation" "POLY" nil)) (om-make-point 797 310) nil nil nil nil 1) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 848 82) (om-make-point 29 20) 72 "72" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 867 234) (om-make-point 23 20) 22 "22" nil) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" nil) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 892 268) nil (list (list 1 1 0 0 1 1 1 1 1 0 0 1 1)) "&" "nth" 1) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 682 114) nil nil nil (list (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 36 74) nil nil nil nil 1) (om-load-boxcall 'genfun "POLY2CANON" 'poly2canon '((om-load-inputfun 'input-funbox "no documentation" "POLY" nil)) (om-make-point 69 122) nil nil nil nil 1) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 139 171) nil nil nil nil 3) (om-load-boxin "input0" 0 (om-make-point 132 46) "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 227 246) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 58 234) nil nil nil 0)) '((3 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 2 0 nil 0) (2 1 4 0 nil 0) (2 0 5 0 nil 0)) 1 nil nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 24) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 612 183) (om-make-point 138 136) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 72 :puntos (list (list 0 1) (list 0 1 2) (list 0 2) (list 0 4) (list 0 3 6) (list 0 1 2 3) (list 0 3) (list 0 1 4 5) (list 0 2 4) (list 0 1 2 3 4 5 6 7 8) (list 0 2 4 6) (list 0 6) (list 0 12) (list 0 6 12) (list 0 2 3 5) (list 0 1 2 3 4 5 6 7) (list 0 1 6 7) (list 0 3 4 7) (list 0 9) (list 0 1 12 13) (list 0 2 3 4 5 6 7 8 10) (list 0 4 8) (list 0 1 4 5 6 7 8 11 12) (list 0 1 2 6 7 8 12 13 14) (list 0 1 2 3 8 13 14 15 16) (list 0 4 6 10) (list 0 2 12 14) (list 0 18) (list 0 36) (list 0 12 24) (list 0 2 3 4 5 6 7 9) (list 0 3 6 9) (list 0 2 9 11) (list 0 1 4 5 6 7 10 11) (list 0 1 2 6 7 11 12 13) (list 0 1 2 3 12 13 14 15) (list 0 1 18 19) (list 0 4 9 13) (list 0 3 12 15) (list 0 1 36 37) (list 0 3 4 6 7 8 10 11 14) (list 0 2 4 6 8 10 12 14 16) (list 0 8 16) (list 0 1 2 12 13 14 24 25 26) (list 0 6 12 18) (list 0 4 18 22) (list 0 2 36 38) (list 0 24 48) (list 0 3 4 6 7 9 10 13) (list 0 2 4 6 9 11 13 15) (list 0 2 3 5 12 14 15 17) (list 0 6 9 15) (list 0 3 18 21) (list 0 1 6 7 12 13 18 19) (list 0 1 4 5 18 19 22 23) (list 0 1 2 3 36 37 38 39) (list 0 9 12 21) (list 0 3 36 39) (list 0 4 6 8 10 12 14 16 20) (list 0 3 6 8 11 14 16 19 22) (list 0 2 8 10 12 14 16 22 24) (list 0 2 4 12 14 16 24 26 28) (list 0 1 2 24 25 26 48 49 50) (list 0 12 18 30) (list 0 6 36 42) (list 0 4 6 9 10 13 15 19) (list 0 3 6 9 12 15 18 21) (list 0 3 4 7 18 21 22 25) (list 0 2 9 11 12 14 21 23) (list 0 2 3 5 36 38 39 41) (list 0 9 18 27) (list 0 1 12 13 18 19 30 31) (list 0 1 6 7 36 37 42 43) (list 0 9 36 45) (list 0 6 8 12 14 16 20 22 28) (list 0 4 8 12 16 20 24 28 32) (list 0 2 4 24 26 28 48 50 52) (list 0 18 36 54) (list 0 6 9 12 15 18 21 27) (list 0 4 9 13 18 22 27 31) (list 0 3 12 15 18 21 30 33) (list 0 3 6 9 36 39 42 45) (list 0 2 9 11 36 38 45 47) (list 0 1 18 19 36 37 54 55) (list 0 8 12 16 20 24 28 32 40) (list 0 4 8 24 28 32 48 52 56) (list 0 9 12 18 21 27 30 39) (list 0 6 9 15 36 42 45 51) (list 0 3 18 21 36 39 54 57) (list 0 8 16 24 32 40 48 56 64) (list 0 9 18 27 36 45 54 63)) :from-file t)) "x" nil (corrige (pairlis '(deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 631 151) (om-make-point 17 20) 72 "72" nil) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 24) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 439 183) (om-make-point 162 140) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 24 :puntos (list (list 0 1) (list 0 1 2) (list 0 2) (list 0 4) (list 0 1 2 3) (list 0 3) (list 0 1 4 5) (list 0 2 4) (list 0 2 4 6) (list 0 6) (list 0 12) (list 0 2 3 5) (list 0 1 2 3 4 5 6 7) (list 0 1 6 7) (list 0 3 4 7) (list 0 1 12 13) (list 0 4 8) (list 0 4 6 10) (list 0 2 12 14) (list 0 2 3 4 5 6 7 9) (list 0 3 6 9) (list 0 1 4 5 6 7 10 11) (list 0 1 2 3 12 13 14 15) (list 0 3 12 15) (list 0 8 16) (list 0 6 12 18) (list 0 3 4 6 7 9 10 13) (list 0 2 3 5 12 14 15 17) (list 0 1 6 7 12 13 18 19) (list 0 3 6 9 12 15 18 21)) :from-file t)) "x" nil (corrige (pairlis '(deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 351 116) nil nil nil (list (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 36 74) nil nil nil nil 1) (om-load-boxcall 'genfun "POLY2CANON" 'poly2canon '((om-load-inputfun 'input-funbox "no documentation" "POLY" nil)) (om-make-point 69 122) nil nil nil nil 1) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 139 171) nil nil nil nil 3) (om-load-boxin "input0" 0 (om-make-point 132 46) "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 227 246) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 58 234) nil nil nil 0)) '((3 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 2 0 nil 0) (2 1 4 0 nil 0) (2 0 5 0 nil 0)) 1 nil nil) (om-load-boxcomment "comment" (om-make-point 44 20) '"# voix" "" (om-make-point 45 191) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 290 334) (om-make-point 24 20) 24 "24" nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 402 477) (om-make-point 33 20) (list 6 8) "(6 8)" nil) (om-load-boxcall 'genfun "N-STRUCTURE" 'n-structure '((om-load-inputfun 'input-funbox "values" "L" (list 5 7 9)) (om-load-inputfun 'input-funbox "n" "N" 24)) (om-make-point 183 368) nil nil nil nil 1) (om-load-boxcall 'genfun "N-STRUCTURE" 'n-structure '((om-load-inputfun 'input-funbox "values" "L" (list 5 7 9)) (om-load-inputfun 'input-funbox "n" "N" 6)) (om-make-point 256 369) nil nil nil nil 1) (om-load-editor-box1 "POLY" 'poly '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "VOICES" (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(1 (((4 4) (1 1 1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 281 601) (om-make-point 197 149) (if (find-class 'poly nil) (let ((newobj (make-instance 'poly :voices (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(39/4 (((6 8) (1 3 1 1)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (1 3 1 1)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (1 3 1 1)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (-6)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6100) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)) ((0)) ((0)) ((0)) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(39/4 (((6 8) (-2 1 3)) ((6 8) (1 4 1.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (2.0 1 3)) ((6 8) (1 4 1.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (2.0 1 3)) ((6 8) (1 4 1.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (2.0 -4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(21/2 (((6 8) (-6)) ((6 8) (-2 1 3)) ((6 8) (1 4 1.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (2.0 1 3)) ((6 8) (1 4 1.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (2.0 1 3)) ((6 8) (1 4 1.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (2.0 -4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6300) :lvel (list 80) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(21/2 (((6 8) (-6)) ((6 8) (-4 1 1)) ((6 8) (2.0 1 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1 1)) ((6 8) (2.0 1 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1 1)) ((6 8) (2.0 1 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(45/4 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-4 1 1)) ((6 8) (2.0 1 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1 1)) ((6 8) (2.0 1 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 1 1)) ((6 8) (2.0 1 3)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (4.0 -2)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6500) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(12 (((6 8) (-6)) ((6 8) (-6)) ((6 8) (-6)) ((6 8) (1 3 1 1)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (1 3 1 1)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (1 3 1 1)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (6.0)) ((6 8) (-6)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 750) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6600) :lvel (list 80) :loffset (list 0) :ldur (list 250) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 120 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '((nil) (nil) (nil) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) (nil))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '((((0) (0) (0) (0)) ((0)) ((0)) ((0)) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) (nil)) ((nil (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) nil)) ((nil) (nil (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) nil)) ((nil) (nil (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) nil)) ((nil) (nil) (nil (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) (0) (0)) ((0) (0) (0)) ((0)) ((0)) ((0) nil)) ((nil) (nil) (nil) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) ((0) (0) (0) (0)) ((0)) ((0)) ((0)) (nil)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 0 0 0) (om-make-color 0 0 0)) (list (list 0 0 1) (om-make-color 0 0 0)) (list (list 0 0 1 0) (om-make-color 0 0 0)) (list (list 0 0 2) (om-make-color 0 0 0)) (list (list 0 0 2 0) (om-make-color 0 0 0)) (list (list 0 0 3) (om-make-color 0 0 0)) (list (list 0 0 3 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 1 0 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 2 0 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 3 0 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 4 0 0) (om-make-color 0 0 0)) (list (list 0 4 1) (om-make-color 0 0 0)) (list (list 0 4 1 0) (om-make-color 0 0 0)) (list (list 0 4 2) (om-make-color 0 0 0)) (list (list 0 4 2 0) (om-make-color 0 0 0)) (list (list 0 4 3) (om-make-color 0 0 0)) (list (list 0 4 3 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 5 0 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 6 0 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 7 0 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 8 0 0) (om-make-color 0 0 0)) (list (list 0 8 1) (om-make-color 0 0 0)) (list (list 0 8 1 0) (om-make-color 0 0 0)) (list (list 0 8 2) (om-make-color 0 0 0)) (list (list 0 8 2 0) (om-make-color 0 0 0)) (list (list 0 8 3) (om-make-color 0 0 0)) (list (list 0 8 3 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 9 0 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 10 0 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 11 0 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 0 1) (om-make-color 0 0 0)) (list (list 1 0 1 0) (om-make-color 0 0 0)) (list (list 1 0 2) (om-make-color 0 0 0)) (list (list 1 0 2 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 0 0) (om-make-color 0 0 0)) (list (list 1 1 1) (om-make-color 0 0 0)) (list (list 1 1 1 0) (om-make-color 0 0 0)) (list (list 1 1 2) (om-make-color 0 0 0)) (list (list 1 1 2 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 2 0 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 3 0 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 4 0 0) (om-make-color 0 0 0)) (list (list 1 4 1) (om-make-color 0 0 0)) (list (list 1 4 1 0) (om-make-color 0 0 0)) (list (list 1 4 2) (om-make-color 0 0 0)) (list (list 1 4 2 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 5 0 0) (om-make-color 0 0 0)) (list (list 1 5 1) (om-make-color 0 0 0)) (list (list 1 5 1 0) (om-make-color 0 0 0)) (list (list 1 5 2) (om-make-color 0 0 0)) (list (list 1 5 2 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 6 0 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 7 0 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 8 0 0) (om-make-color 0 0 0)) (list (list 1 8 1) (om-make-color 0 0 0)) (list (list 1 8 1 0) (om-make-color 0 0 0)) (list (list 1 8 2) (om-make-color 0 0 0)) (list (list 1 8 2 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 9 0 0) (om-make-color 0 0 0)) (list (list 1 9 1) (om-make-color 0 0 0)) (list (list 1 9 1 0) (om-make-color 0 0 0)) (list (list 1 9 2) (om-make-color 0 0 0)) (list (list 1 9 2 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 10 0 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 1 11 0 0) (om-make-color 0 0 0)) (list (list 1 12) (om-make-color 0 0 0)) (list (list 1 12 0) (om-make-color 0 0 0)) (list (list 1 12 0 0) (om-make-color 0 0 0)) (list (list 1 12 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 1 1) (om-make-color 0 0 0)) (list (list 2 1 1 0) (om-make-color 0 0 0)) (list (list 2 1 2) (om-make-color 0 0 0)) (list (list 2 1 2 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 2 0 0) (om-make-color 0 0 0)) (list (list 2 2 1) (om-make-color 0 0 0)) (list (list 2 2 1 0) (om-make-color 0 0 0)) (list (list 2 2 2) (om-make-color 0 0 0)) (list (list 2 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 3 0 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 4 0 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 5 0 0) (om-make-color 0 0 0)) (list (list 2 5 1) (om-make-color 0 0 0)) (list (list 2 5 1 0) (om-make-color 0 0 0)) (list (list 2 5 2) (om-make-color 0 0 0)) (list (list 2 5 2 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 6 0 0) (om-make-color 0 0 0)) (list (list 2 6 1) (om-make-color 0 0 0)) (list (list 2 6 1 0) (om-make-color 0 0 0)) (list (list 2 6 2) (om-make-color 0 0 0)) (list (list 2 6 2 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 7 0 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 8 0 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 9 0 0) (om-make-color 0 0 0)) (list (list 2 9 1) (om-make-color 0 0 0)) (list (list 2 9 1 0) (om-make-color 0 0 0)) (list (list 2 9 2) (om-make-color 0 0 0)) (list (list 2 9 2 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 10 0 0) (om-make-color 0 0 0)) (list (list 2 10 1) (om-make-color 0 0 0)) (list (list 2 10 1 0) (om-make-color 0 0 0)) (list (list 2 10 2) (om-make-color 0 0 0)) (list (list 2 10 2 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 2 11 0 0) (om-make-color 0 0 0)) (list (list 2 12) (om-make-color 0 0 0)) (list (list 2 12 0) (om-make-color 0 0 0)) (list (list 2 12 0 0) (om-make-color 0 0 0)) (list (list 2 13) (om-make-color 0 0 0)) (list (list 2 13 0) (om-make-color 0 0 0)) (list (list 2 13 0 0) (om-make-color 0 0 0)) (list (list 2 13 1) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 1 1) (om-make-color 0 0 0)) (list (list 3 1 1 0) (om-make-color 0 0 0)) (list (list 3 1 2) (om-make-color 0 0 0)) (list (list 3 1 2 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 2 0 0) (om-make-color 0 0 0)) (list (list 3 2 1) (om-make-color 0 0 0)) (list (list 3 2 1 0) (om-make-color 0 0 0)) (list (list 3 2 2) (om-make-color 0 0 0)) (list (list 3 2 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 3 0 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 4 0 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 5 0 0) (om-make-color 0 0 0)) (list (list 3 5 1) (om-make-color 0 0 0)) (list (list 3 5 1 0) (om-make-color 0 0 0)) (list (list 3 5 2) (om-make-color 0 0 0)) (list (list 3 5 2 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 6 0 0) (om-make-color 0 0 0)) (list (list 3 6 1) (om-make-color 0 0 0)) (list (list 3 6 1 0) (om-make-color 0 0 0)) (list (list 3 6 2) (om-make-color 0 0 0)) (list (list 3 6 2 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 7 0 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 8 0 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 9 0 0) (om-make-color 0 0 0)) (list (list 3 9 1) (om-make-color 0 0 0)) (list (list 3 9 1 0) (om-make-color 0 0 0)) (list (list 3 9 2) (om-make-color 0 0 0)) (list (list 3 9 2 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 10 0 0) (om-make-color 0 0 0)) (list (list 3 10 1) (om-make-color 0 0 0)) (list (list 3 10 1 0) (om-make-color 0 0 0)) (list (list 3 10 2) (om-make-color 0 0 0)) (list (list 3 10 2 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 3 11 0 0) (om-make-color 0 0 0)) (list (list 3 12) (om-make-color 0 0 0)) (list (list 3 12 0) (om-make-color 0 0 0)) (list (list 3 12 0 0) (om-make-color 0 0 0)) (list (list 3 13) (om-make-color 0 0 0)) (list (list 3 13 0) (om-make-color 0 0 0)) (list (list 3 13 0 0) (om-make-color 0 0 0)) (list (list 3 13 1) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 2 1) (om-make-color 0 0 0)) (list (list 4 2 1 0) (om-make-color 0 0 0)) (list (list 4 2 2) (om-make-color 0 0 0)) (list (list 4 2 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 3 0 0) (om-make-color 0 0 0)) (list (list 4 3 1) (om-make-color 0 0 0)) (list (list 4 3 1 0) (om-make-color 0 0 0)) (list (list 4 3 2) (om-make-color 0 0 0)) (list (list 4 3 2 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 4 0 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 5 0 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 6 0 0) (om-make-color 0 0 0)) (list (list 4 6 1) (om-make-color 0 0 0)) (list (list 4 6 1 0) (om-make-color 0 0 0)) (list (list 4 6 2) (om-make-color 0 0 0)) (list (list 4 6 2 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 7 0 0) (om-make-color 0 0 0)) (list (list 4 7 1) (om-make-color 0 0 0)) (list (list 4 7 1 0) (om-make-color 0 0 0)) (list (list 4 7 2) (om-make-color 0 0 0)) (list (list 4 7 2 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 8 0 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 9 0 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 10 0 0) (om-make-color 0 0 0)) (list (list 4 10 1) (om-make-color 0 0 0)) (list (list 4 10 1 0) (om-make-color 0 0 0)) (list (list 4 10 2) (om-make-color 0 0 0)) (list (list 4 10 2 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 4 11 0 0) (om-make-color 0 0 0)) (list (list 4 11 1) (om-make-color 0 0 0)) (list (list 4 11 1 0) (om-make-color 0 0 0)) (list (list 4 11 2) (om-make-color 0 0 0)) (list (list 4 11 2 0) (om-make-color 0 0 0)) (list (list 4 12) (om-make-color 0 0 0)) (list (list 4 12 0) (om-make-color 0 0 0)) (list (list 4 12 0 0) (om-make-color 0 0 0)) (list (list 4 13) (om-make-color 0 0 0)) (list (list 4 13 0) (om-make-color 0 0 0)) (list (list 4 13 0 0) (om-make-color 0 0 0)) (list (list 4 14) (om-make-color 0 0 0)) (list (list 4 14 0) (om-make-color 0 0 0)) (list (list 4 14 0 0) (om-make-color 0 0 0)) (list (list 4 14 1) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 3 0 0) (om-make-color 0 0 0)) (list (list 5 3 1) (om-make-color 0 0 0)) (list (list 5 3 1 0) (om-make-color 0 0 0)) (list (list 5 3 2) (om-make-color 0 0 0)) (list (list 5 3 2 0) (om-make-color 0 0 0)) (list (list 5 3 3) (om-make-color 0 0 0)) (list (list 5 3 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 4 0 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 5 0 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 6 0 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 7 0 0) (om-make-color 0 0 0)) (list (list 5 7 1) (om-make-color 0 0 0)) (list (list 5 7 1 0) (om-make-color 0 0 0)) (list (list 5 7 2) (om-make-color 0 0 0)) (list (list 5 7 2 0) (om-make-color 0 0 0)) (list (list 5 7 3) (om-make-color 0 0 0)) (list (list 5 7 3 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 8 0 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 9 0 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 10 0 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 5 11 0 0) (om-make-color 0 0 0)) (list (list 5 11 1) (om-make-color 0 0 0)) (list (list 5 11 1 0) (om-make-color 0 0 0)) (list (list 5 11 2) (om-make-color 0 0 0)) (list (list 5 11 2 0) (om-make-color 0 0 0)) (list (list 5 11 3) (om-make-color 0 0 0)) (list (list 5 11 3 0) (om-make-color 0 0 0)) (list (list 5 12) (om-make-color 0 0 0)) (list (list 5 12 0) (om-make-color 0 0 0)) (list (list 5 12 0 0) (om-make-color 0 0 0)) (list (list 5 13) (om-make-color 0 0 0)) (list (list 5 13 0) (om-make-color 0 0 0)) (list (list 5 13 0 0) (om-make-color 0 0 0)) (list (list 5 14) (om-make-color 0 0 0)) (list (list 5 14 0) (om-make-color 0 0 0)) (list (list 5 14 0 0) (om-make-color 0 0 0)) (list (list 5 15) (om-make-color 0 0 0)) (list (list 5 15 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 36 (list 'g 'g 'g 'g 'g 'g) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 5 't))) t nil nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 371 474) (om-make-point 22 20) 't "t" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 343 476) (om-make-point 23 20) 3 "3" nil) (om-load-boxcall 'genfun "CANONS" 'canons '((om-load-inputfun 'input-funbox "no documentation" "R" nil) (om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" nil) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':poly?) (om-load-inputfun 'input-keyword "Choose from this list (sign mindiv beats poly?)" "Keyword input" ':sign)) (om-make-point 302 511) (om-make-point 96 61) nil nil nil 1) (om-load-boxcall 'lispfun "FIRST" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 195 295) nil nil nil nil 1) (om-load-boxcall 'genfun "POLY2CANON" 'poly2canon '((om-load-inputfun 'input-funbox "no documentation" "POLY" nil)) (om-make-point 319 209) nil nil nil nil 1) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" nil) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 298 183) nil (list (list 1 1 0 0 1 1)) "&" "nth" 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 258 185) (om-make-point 23 20) 6 "6" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 94 194) (om-make-point 23 20) 6 "6" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 87 99) (om-make-point 29 20) 24 "24" nil) (om-load-boxcall 'genfun "OUT-RYTHM" 'out-rythm '((om-load-inputfun 'input-funbox "no documentation" "NBVAR" nil) (om-load-inputfun 'input-funbox "no documentation" "PERIOD" nil) (om-load-inputfun 'input-funbox "no documentation" "POLY" nil)) (om-make-point 121 246) nil nil "x" nil 1)) '((2 0 0 2 nil 0) (13 2 1 0 nil 0) (1 0 2 1 nil 0) (15 0 3 0 nil 0) (37 0 4 0 nil 0) (8 0 5 2 nil 0) (12 2 6 0 nil 0) (11 2 7 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (10 0 11 1 nil 0) (32 0 11 2 nil 0) (33 0 12 2 nil 0) (14 0 13 2 nil 0) (17 0 14 0 nil 0) (16 0 17 0 nil 0) (3 0 17 1 nil 0) (3 0 18 0 nil 0) (20 0 19 1 nil 0) (18 0 19 2 nil 0) (22 0 21 2 nil 0) (4 0 22 0 nil 0) (32 0 26 0 nil 0) (33 0 27 0 nil 0) (24 0 27 1 nil 0) (31 0 28 0 nil 0) (27 0 31 0 nil 0) (26 0 31 1 nil 0) (30 0 31 2 nil 0) (29 0 31 3 nil 0) (25 0 31 4 nil 0) (38 0 32 0 nil 0) (34 0 33 0 nil 0) (35 0 34 0 nil 0) (4 0 34 1 nil 0) (36 0 38 0 nil 0) (37 0 38 1 nil 0) (34 0 38 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 562 71)) (setf (pict-size newpict) (om-make-point 450 570)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 7 106)) (setf (pict-size newpict) (om-make-point 534 578)) newpict)) 5.0))
