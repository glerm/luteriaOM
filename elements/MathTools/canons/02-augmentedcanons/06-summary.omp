; OM File Header - Saved 2014/04/26 5:39:38
; (6.04 :patc (om-make-point 268 107) (om-make-point 140 78) (om-make-point 1078 749) "non documentation" 183 0 nil "2014/04/26 5:39:38")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "06-summary" '((om-load-editor-box1 "MULTI-SEQ" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 258 401) (om-make-point 379 318) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidiclonset '(0 250 500 1000 1250 1750 3000 3250 3500 4000 4250 4750 6000 6250 6500 7000 7250 7750 9000 9250 9500 10000 10250 10750 12000 12250 12500 13000 13250 13750 15000 15250 15500 16000 16250 16750 18000 18250 18500 19000 19250 19750 21000 21250 21500 22000 22250 22750 24000 24250 24500 25000 25250 25750 27000 27250 27500 28000 28250 28750 30000 30250 30500 31000 31250 31750 33000 33250 33500 34000 34250 34750 36000 36250 36500 37000 37250 37750 39000 39250 39500 40000 40250 40750 42000 42250 42500 43000 43250 43750 55750) :ldurlvelloffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200)) :lonset '(2500 3750 5000 7500 8750 11250 17500 18750 20000 22500 23750 26250 32500 33750 35000 37500 38750 41250 55750) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400)) :lonset '(5500 6750 8000 10500 11750 14250 20500 21750 23000 25500 26750 29250 35500 36750 38000 40500 41750 44250 55750) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900)) :lonset '(8500 9750 11000 13500 14750 17250 23500 24750 26000 28500 29750 32250 38500 39750 41000 43500 44750 47250 55750) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700)) :lonset '(11500 12750 14000 16500 17750 20250 26500 27750 29000 31500 32750 35250 41500 42750 44000 46500 47750 50250 55750) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400)) :lonset '(14500 15750 17000 19500 20750 23250 29500 30750 32000 34500 35750 38250 44500 45750 47000 49500 50750 53250 55750) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 0 12) (om-make-color 0 0 0)) (list (list 0 12 0) (om-make-color 0 0 0)) (list (list 0 13) (om-make-color 0 0 0)) (list (list 0 13 0) (om-make-color 0 0 0)) (list (list 0 14) (om-make-color 0 0 0)) (list (list 0 14 0) (om-make-color 0 0 0)) (list (list 0 15) (om-make-color 0 0 0)) (list (list 0 15 0) (om-make-color 0 0 0)) (list (list 0 16) (om-make-color 0 0 0)) (list (list 0 16 0) (om-make-color 0 0 0)) (list (list 0 17) (om-make-color 0 0 0)) (list (list 0 17 0) (om-make-color 0 0 0)) (list (list 0 18) (om-make-color 0 0 0)) (list (list 0 18 0) (om-make-color 0 0 0)) (list (list 0 19) (om-make-color 0 0 0)) (list (list 0 19 0) (om-make-color 0 0 0)) (list (list 0 20) (om-make-color 0 0 0)) (list (list 0 20 0) (om-make-color 0 0 0)) (list (list 0 21) (om-make-color 0 0 0)) (list (list 0 21 0) (om-make-color 0 0 0)) (list (list 0 22) (om-make-color 0 0 0)) (list (list 0 22 0) (om-make-color 0 0 0)) (list (list 0 23) (om-make-color 0 0 0)) (list (list 0 23 0) (om-make-color 0 0 0)) (list (list 0 24) (om-make-color 0 0 0)) (list (list 0 24 0) (om-make-color 0 0 0)) (list (list 0 25) (om-make-color 0 0 0)) (list (list 0 25 0) (om-make-color 0 0 0)) (list (list 0 26) (om-make-color 0 0 0)) (list (list 0 26 0) (om-make-color 0 0 0)) (list (list 0 27) (om-make-color 0 0 0)) (list (list 0 27 0) (om-make-color 0 0 0)) (list (list 0 28) (om-make-color 0 0 0)) (list (list 0 28 0) (om-make-color 0 0 0)) (list (list 0 29) (om-make-color 0 0 0)) (list (list 0 29 0) (om-make-color 0 0 0)) (list (list 0 30) (om-make-color 0 0 0)) (list (list 0 30 0) (om-make-color 0 0 0)) (list (list 0 31) (om-make-color 0 0 0)) (list (list 0 31 0) (om-make-color 0 0 0)) (list (list 0 32) (om-make-color 0 0 0)) (list (list 0 32 0) (om-make-color 0 0 0)) (list (list 0 33) (om-make-color 0 0 0)) (list (list 0 33 0) (om-make-color 0 0 0)) (list (list 0 34) (om-make-color 0 0 0)) (list (list 0 34 0) (om-make-color 0 0 0)) (list (list 0 35) (om-make-color 0 0 0)) (list (list 0 35 0) (om-make-color 0 0 0)) (list (list 0 36) (om-make-color 0 0 0)) (list (list 0 36 0) (om-make-color 0 0 0)) (list (list 0 37) (om-make-color 0 0 0)) (list (list 0 37 0) (om-make-color 0 0 0)) (list (list 0 38) (om-make-color 0 0 0)) (list (list 0 38 0) (om-make-color 0 0 0)) (list (list 0 39) (om-make-color 0 0 0)) (list (list 0 39 0) (om-make-color 0 0 0)) (list (list 0 40) (om-make-color 0 0 0)) (list (list 0 40 0) (om-make-color 0 0 0)) (list (list 0 41) (om-make-color 0 0 0)) (list (list 0 41 0) (om-make-color 0 0 0)) (list (list 0 42) (om-make-color 0 0 0)) (list (list 0 42 0) (om-make-color 0 0 0)) (list (list 0 43) (om-make-color 0 0 0)) (list (list 0 43 0) (om-make-color 0 0 0)) (list (list 0 44) (om-make-color 0 0 0)) (list (list 0 44 0) (om-make-color 0 0 0)) (list (list 0 45) (om-make-color 0 0 0)) (list (list 0 45 0) (om-make-color 0 0 0)) (list (list 0 46) (om-make-color 0 0 0)) (list (list 0 46 0) (om-make-color 0 0 0)) (list (list 0 47) (om-make-color 0 0 0)) (list (list 0 47 0) (om-make-color 0 0 0)) (list (list 0 48) (om-make-color 0 0 0)) (list (list 0 48 0) (om-make-color 0 0 0)) (list (list 0 49) (om-make-color 0 0 0)) (list (list 0 49 0) (om-make-color 0 0 0)) (list (list 0 50) (om-make-color 0 0 0)) (list (list 0 50 0) (om-make-color 0 0 0)) (list (list 0 51) (om-make-color 0 0 0)) (list (list 0 51 0) (om-make-color 0 0 0)) (list (list 0 52) (om-make-color 0 0 0)) (list (list 0 52 0) (om-make-color 0 0 0)) (list (list 0 53) (om-make-color 0 0 0)) (list (list 0 53 0) (om-make-color 0 0 0)) (list (list 0 54) (om-make-color 0 0 0)) (list (list 0 54 0) (om-make-color 0 0 0)) (list (list 0 55) (om-make-color 0 0 0)) (list (list 0 55 0) (om-make-color 0 0 0)) (list (list 0 56) (om-make-color 0 0 0)) (list (list 0 56 0) (om-make-color 0 0 0)) (list (list 0 57) (om-make-color 0 0 0)) (list (list 0 57 0) (om-make-color 0 0 0)) (list (list 0 58) (om-make-color 0 0 0)) (list (list 0 58 0) (om-make-color 0 0 0)) (list (list 0 59) (om-make-color 0 0 0)) (list (list 0 59 0) (om-make-color 0 0 0)) (list (list 0 60) (om-make-color 0 0 0)) (list (list 0 60 0) (om-make-color 0 0 0)) (list (list 0 61) (om-make-color 0 0 0)) (list (list 0 61 0) (om-make-color 0 0 0)) (list (list 0 62) (om-make-color 0 0 0)) (list (list 0 62 0) (om-make-color 0 0 0)) (list (list 0 63) (om-make-color 0 0 0)) (list (list 0 63 0) (om-make-color 0 0 0)) (list (list 0 64) (om-make-color 0 0 0)) (list (list 0 64 0) (om-make-color 0 0 0)) (list (list 0 65) (om-make-color 0 0 0)) (list (list 0 65 0) (om-make-color 0 0 0)) (list (list 0 66) (om-make-color 0 0 0)) (list (list 0 66 0) (om-make-color 0 0 0)) (list (list 0 67) (om-make-color 0 0 0)) (list (list 0 67 0) (om-make-color 0 0 0)) (list (list 0 68) (om-make-color 0 0 0)) (list (list 0 68 0) (om-make-color 0 0 0)) (list (list 0 69) (om-make-color 0 0 0)) (list (list 0 69 0) (om-make-color 0 0 0)) (list (list 0 70) (om-make-color 0 0 0)) (list (list 0 70 0) (om-make-color 0 0 0)) (list (list 0 71) (om-make-color 0 0 0)) (list (list 0 71 0) (om-make-color 0 0 0)) (list (list 0 72) (om-make-color 0 0 0)) (list (list 0 72 0) (om-make-color 0 0 0)) (list (list 0 73) (om-make-color 0 0 0)) (list (list 0 73 0) (om-make-color 0 0 0)) (list (list 0 74) (om-make-color 0 0 0)) (list (list 0 74 0) (om-make-color 0 0 0)) (list (list 0 75) (om-make-color 0 0 0)) (list (list 0 75 0) (om-make-color 0 0 0)) (list (list 0 76) (om-make-color 0 0 0)) (list (list 0 76 0) (om-make-color 0 0 0)) (list (list 0 77) (om-make-color 0 0 0)) (list (list 0 77 0) (om-make-color 0 0 0)) (list (list 0 78) (om-make-color 0 0 0)) (list (list 0 78 0) (om-make-color 0 0 0)) (list (list 0 79) (om-make-color 0 0 0)) (list (list 0 79 0) (om-make-color 0 0 0)) (list (list 0 80) (om-make-color 0 0 0)) (list (list 0 80 0) (om-make-color 0 0 0)) (list (list 0 81) (om-make-color 0 0 0)) (list (list 0 81 0) (om-make-color 0 0 0)) (list (list 0 82) (om-make-color 0 0 0)) (list (list 0 82 0) (om-make-color 0 0 0)) (list (list 0 83) (om-make-color 0 0 0)) (list (list 0 83 0) (om-make-color 0 0 0)) (list (list 0 84) (om-make-color 0 0 0)) (list (list 0 84 0) (om-make-color 0 0 0)) (list (list 0 85) (om-make-color 0 0 0)) (list (list 0 85 0) (om-make-color 0 0 0)) (list (list 0 86) (om-make-color 0 0 0)) (list (list 0 86 0) (om-make-color 0 0 0)) (list (list 0 87) (om-make-color 0 0 0)) (list (list 0 87 0) (om-make-color 0 0 0)) (list (list 0 88) (om-make-color 0 0 0)) (list (list 0 88 0) (om-make-color 0 0 0)) (list (list 0 89) (om-make-color 0 0 0)) (list (list 0 89 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 52/85 3/17 7/51)) (list (list 1 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 0 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 1) (om-make-color 52/85 3/17 7/51)) (list (list 1 1 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 2) (om-make-color 52/85 3/17 7/51)) (list (list 1 2 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 3) (om-make-color 52/85 3/17 7/51)) (list (list 1 3 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 4) (om-make-color 52/85 3/17 7/51)) (list (list 1 4 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 5) (om-make-color 52/85 3/17 7/51)) (list (list 1 5 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 6) (om-make-color 52/85 3/17 7/51)) (list (list 1 6 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 7) (om-make-color 52/85 3/17 7/51)) (list (list 1 7 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 8) (om-make-color 52/85 3/17 7/51)) (list (list 1 8 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 9) (om-make-color 52/85 3/17 7/51)) (list (list 1 9 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 10) (om-make-color 52/85 3/17 7/51)) (list (list 1 10 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 11) (om-make-color 52/85 3/17 7/51)) (list (list 1 11 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 12) (om-make-color 52/85 3/17 7/51)) (list (list 1 12 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 13) (om-make-color 52/85 3/17 7/51)) (list (list 1 13 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 14) (om-make-color 52/85 3/17 7/51)) (list (list 1 14 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 15) (om-make-color 52/85 3/17 7/51)) (list (list 1 15 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 16) (om-make-color 52/85 3/17 7/51)) (list (list 1 16 0) (om-make-color 52/85 3/17 7/51)) (list (list 1 17) (om-make-color 52/85 3/17 7/51)) (list (list 1 17 0) (om-make-color 52/85 3/17 7/51)) (list (list 2) (om-make-color 82/255 173/255 31/255)) (list (list 2 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 0 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 1) (om-make-color 82/255 173/255 31/255)) (list (list 2 1 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 2) (om-make-color 82/255 173/255 31/255)) (list (list 2 2 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 3) (om-make-color 82/255 173/255 31/255)) (list (list 2 3 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 4) (om-make-color 82/255 173/255 31/255)) (list (list 2 4 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 5) (om-make-color 82/255 173/255 31/255)) (list (list 2 5 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 6) (om-make-color 82/255 173/255 31/255)) (list (list 2 6 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 7) (om-make-color 82/255 173/255 31/255)) (list (list 2 7 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 8) (om-make-color 82/255 173/255 31/255)) (list (list 2 8 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 9) (om-make-color 82/255 173/255 31/255)) (list (list 2 9 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 10) (om-make-color 82/255 173/255 31/255)) (list (list 2 10 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 11) (om-make-color 82/255 173/255 31/255)) (list (list 2 11 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 12) (om-make-color 82/255 173/255 31/255)) (list (list 2 12 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 13) (om-make-color 82/255 173/255 31/255)) (list (list 2 13 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 14) (om-make-color 82/255 173/255 31/255)) (list (list 2 14 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 15) (om-make-color 82/255 173/255 31/255)) (list (list 2 15 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 16) (om-make-color 82/255 173/255 31/255)) (list (list 2 16 0) (om-make-color 82/255 173/255 31/255)) (list (list 2 17) (om-make-color 82/255 173/255 31/255)) (list (list 2 17 0) (om-make-color 82/255 173/255 31/255)) (list (list 3) (om-make-color 59/255 3/17 151/255)) (list (list 3 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 0 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 1) (om-make-color 59/255 3/17 151/255)) (list (list 3 1 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 2) (om-make-color 59/255 3/17 151/255)) (list (list 3 2 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 3) (om-make-color 59/255 3/17 151/255)) (list (list 3 3 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 4) (om-make-color 59/255 3/17 151/255)) (list (list 3 4 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 5) (om-make-color 59/255 3/17 151/255)) (list (list 3 5 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 6) (om-make-color 59/255 3/17 151/255)) (list (list 3 6 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 7) (om-make-color 59/255 3/17 151/255)) (list (list 3 7 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 8) (om-make-color 59/255 3/17 151/255)) (list (list 3 8 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 9) (om-make-color 59/255 3/17 151/255)) (list (list 3 9 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 10) (om-make-color 59/255 3/17 151/255)) (list (list 3 10 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 11) (om-make-color 59/255 3/17 151/255)) (list (list 3 11 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 12) (om-make-color 59/255 3/17 151/255)) (list (list 3 12 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 13) (om-make-color 59/255 3/17 151/255)) (list (list 3 13 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 14) (om-make-color 59/255 3/17 151/255)) (list (list 3 14 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 15) (om-make-color 59/255 3/17 151/255)) (list (list 3 15 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 16) (om-make-color 59/255 3/17 151/255)) (list (list 3 16 0) (om-make-color 59/255 3/17 151/255)) (list (list 3 17) (om-make-color 59/255 3/17 151/255)) (list (list 3 17 0) (om-make-color 59/255 3/17 151/255)) (list (list 4) (om-make-color 217/255 109/255 4/51)) (list (list 4 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 0 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 1) (om-make-color 217/255 109/255 4/51)) (list (list 4 1 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 2) (om-make-color 217/255 109/255 4/51)) (list (list 4 2 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 3) (om-make-color 217/255 109/255 4/51)) (list (list 4 3 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 4) (om-make-color 217/255 109/255 4/51)) (list (list 4 4 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 5) (om-make-color 217/255 109/255 4/51)) (list (list 4 5 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 6) (om-make-color 217/255 109/255 4/51)) (list (list 4 6 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 7) (om-make-color 217/255 109/255 4/51)) (list (list 4 7 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 8) (om-make-color 217/255 109/255 4/51)) (list (list 4 8 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 9) (om-make-color 217/255 109/255 4/51)) (list (list 4 9 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 10) (om-make-color 217/255 109/255 4/51)) (list (list 4 10 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 11) (om-make-color 217/255 109/255 4/51)) (list (list 4 11 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 12) (om-make-color 217/255 109/255 4/51)) (list (list 4 12 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 13) (om-make-color 217/255 109/255 4/51)) (list (list 4 13 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 14) (om-make-color 217/255 109/255 4/51)) (list (list 4 14 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 15) (om-make-color 217/255 109/255 4/51)) (list (list 4 15 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 16) (om-make-color 217/255 109/255 4/51)) (list (list 4 16 0) (om-make-color 217/255 109/255 4/51)) (list (list 4 17) (om-make-color 217/255 109/255 4/51)) (list (list 4 17 0) (om-make-color 217/255 109/255 4/51)) (list (list 5) (om-make-color 14/15 11/51 15/17)) (list (list 5 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 0 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 1) (om-make-color 14/15 11/51 15/17)) (list (list 5 1 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 2) (om-make-color 14/15 11/51 15/17)) (list (list 5 2 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 3) (om-make-color 14/15 11/51 15/17)) (list (list 5 3 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 4) (om-make-color 14/15 11/51 15/17)) (list (list 5 4 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 5) (om-make-color 14/15 11/51 15/17)) (list (list 5 5 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 6) (om-make-color 14/15 11/51 15/17)) (list (list 5 6 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 7) (om-make-color 14/15 11/51 15/17)) (list (list 5 7 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 8) (om-make-color 14/15 11/51 15/17)) (list (list 5 8 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 9) (om-make-color 14/15 11/51 15/17)) (list (list 5 9 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 10) (om-make-color 14/15 11/51 15/17)) (list (list 5 10 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 11) (om-make-color 14/15 11/51 15/17)) (list (list 5 11 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 12) (om-make-color 14/15 11/51 15/17)) (list (list 5 12 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 13) (om-make-color 14/15 11/51 15/17)) (list (list 5 13 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 14) (om-make-color 14/15 11/51 15/17)) (list (list 5 14 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 15) (om-make-color 14/15 11/51 15/17)) (list (list 5 15 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 16) (om-make-color 14/15 11/51 15/17)) (list (list 5 16 0) (om-make-color 14/15 11/51 15/17)) (list (list 5 17) (om-make-color 14/15 11/51 15/17)) (list (list 5 17 0) (om-make-color 14/15 11/51 15/17)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 2 0 2621450 18350450 0 250 nil 61/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g) 24 2))) t nil nil) (om-load-boxcall 'genfun "ALLCANONS-AFF1" 'allcanons-aff '((om-load-inputfun 'input-funbox "no documentation" "N" nil) (om-load-inputfun 'input-funbox "no documentation" "R" nil) (om-load-inputfun 'input-funbox "no documentation" "S" nil)) (om-make-point 815 549) nil nil nil nil 1) (om-load-boxcall 'genfun "SIGNATURES1" 'signatures '((om-load-inputfun 'input-funbox "no documentation" "N" nil) (om-load-inputfun 'input-funbox "no documentation" "K" nil)) (om-make-point 182 110) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 49 53) '"4)" "" (om-make-point 647 87) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 49 53) '"3)" "" (om-make-point 651 437) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 49 53) '"2)" "" (om-make-point 69 440) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 49 53) '"1)" "" (om-make-point 83 124) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux34" 't 'nil (om-make-point 894 126) (om-make-point 88 20) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil) (om-load-boxcall 'bastype "aux33" 't 'nil (om-make-point 777 91) (om-make-point 118 20) (list 26 12 13 14 15 25) "(26 12 13 14 15 25)" nil) (om-load-boxcall 'genfun "PGMOUT" 'pgmout '((om-load-inputfun 'input-funbox "program number" "PROG" 15) (om-load-inputfun 'input-funbox "channel" "CHANS" 1) (om-load-inputfun 'input-funbox "optional port" "PORT" 0)) (om-make-point 919 196) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 28 36) '"S" "" (om-make-point 525 102) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 28 36) '"R" "" (om-make-point 424 107) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux14" 't 'nil (om-make-point 563 171) (om-make-point 23 20) 3 "3" nil) (om-load-boxcall 'bastype "aux13" 't 'nil (om-make-point 496 141) (om-make-point 94 20) (list (list 1 0) (list 5 10)) "((1 0) (5 10))" nil) (om-load-boxcall 'bastype "aux12" 't 'nil (om-make-point 395 142) (om-make-point 93 20) (list 0 1 2 4 5 7) "(0 1 2 4 5 7)" nil) (om-load-boxcomment "comment" (om-make-point 28 36) '"S" "" (om-make-point 880 447) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 28 36) '"R" "" (om-make-point 812 441) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux11" 't 'nil (om-make-point 881 484) (om-make-point 48 20) (list 1 5) "(1 5)" nil) (om-load-boxcall 'bastype "aux10" 't 'nil (om-make-point 771 477) (om-make-point 98 20) (list 0 1 2 4 5 7) "(0 1 2 4 5 7)" nil) (om-load-boxcall 'bastype "aux9" 't 'nil (om-make-point 787 508) (om-make-point 23 20) 12 "12" nil) (om-load-boxcall 'lispfun "LENGTH2" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 161 541) nil nil nil nil 1) (om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 199 429) (om-make-point 23 20) 6 "6" nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 130 430) (om-make-point 23 20) 12 "12" nil) (om-load-boxcall 'lispfun "LENGTH1" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 189 191) nil nil nil nil 1) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 231 67) (om-make-point 23 20) 6 "6" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 147 76) (om-make-point 23 20) 12 "12" nil) (om-load-boxcall 'genfun "AUGMENTED-CANON" 'augmented-canon '((om-load-inputfun 'input-funbox "no documentation" "R" nil) (om-load-inputfun 'input-funbox "no documentation" "FACTOR" nil) (om-load-inputfun 'input-funbox "no documentation" "TIMES" nil)) (om-make-point 443 189) nil nil nil nil 1) (om-load-boxcall 'genfun "AG-CANONINFO" 'ag-canoninfo '((om-load-inputfun 'input-funbox "no documentation" "N" nil) (om-load-inputfun 'input-funbox "no documentation" "K" nil)) (om-make-point 141 449) nil nil nil "ag-canoninfo" 1) (om-load-boxcomment "comment" (om-make-point 841 64) '"The four steps of the augmentation process" "" (om-make-point 83 6) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil))) '((26 0 0 1 nil 0) (19 0 1 0 nil 0) (18 0 1 1 nil 0) (17 0 1 2 nil 0) (25 0 2 0 nil 0) (24 0 2 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (27 0 20 0 nil 0) (2 0 23 0 nil 0) (14 0 26 0 nil 0) (13 0 26 1 nil 0) (12 0 26 2 nil 0) (22 0 27 0 nil 0) (21 0 27 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 58 502)) (setf (pict-size newpict) (om-make-point 962 262)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 322 56)) (setf (pict-size newpict) (om-make-point 293 311)) newpict)) 5.0))
