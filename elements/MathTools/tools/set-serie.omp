; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 123 16) (om-make-point 438 401) (om-make-point 491 451) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "set-serie" '((om-load-seqbox "SEQUENCE" 'sequence '((om-load-inputfun 'input-funbox "patch" "PATCH" nil) (om-load-inputfun 'input-funbox "patch" "OPPATCH" nil)) (om-make-point 4 315) nil nil nil 2) (om-load-boxcall 'genfun "FLAT1" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) (om-make-point 150 132) nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) (om-make-point 190 216) nil nil nil nil 1) (om-load-boxcall 'genfun "REPEAT-N" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 0)) (om-make-point 199 140) nil nil nil nil 1) (om-load-boxin "input2" 2 (om-make-point 240 50) "no documentation" "times" nil nil) (om-load-boxin "input1" 1 (om-make-point 158 51) "no documentation" "serie" nil nil) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil) (om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 54 208) nil nil nil (list (om-load-boxcall 'slot "slots" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 79 212) nil nil nil nil 8) (om-load-boxin "input1" 1 (om-make-point 168 43) "no documentation" "seri" nil nil) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 11 140) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 36 45) "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 164 289) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 19 289) nil nil nil 0)) '((2 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 2 0 nil 0) (0 0 5 0 nil 0)) 1 nil nil) (om-load-boxcall 'slot "slots" 'poly '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "VOICES" (list (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(1 (((4 4) (1 1 1 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 23 122) nil nil nil nil 2) (om-load-boxout "output" 0 (om-make-point 29 381) '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" "multi" nil nil)) '((6 0 0 0 nil 0) (7 0 0 1 nil 0) (5 0 1 0 nil 0) (3 0 2 0 nil 0) (1 0 3 0 nil 0) (4 0 3 1 nil 0) (7 1 6 0 nil 0) (2 0 6 1 nil 0) (9 0 7 0 nil 0) (0 1 8 0 nil 0)) nil 5.0))
