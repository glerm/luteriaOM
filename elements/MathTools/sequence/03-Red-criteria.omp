; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 208 16) (om-make-point 50 50) (om-make-point 1088 804) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "03-Red-criteria" '((om-load-boxcall 'genfun "SUITE-REDUCTIBLE1" 'suite-reductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 855 464) nil nil nil nil 1) (om-load-boxcall 'genfun "SUITE-REDUCTIBLE1" 'suite-reductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 530 445) nil nil nil nil 1) (om-load-boxcall 'genfun "SUITE-REDUCTIBLE1" 'suite-reductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 240 477) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 570 307) (om-make-point 23 20) 9 "9" nil) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 701 517) nil nil nil nil 1) (om-load-boxcall 'genfun "REPEAT-N" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 0)) (om-make-point 535 342) nil nil nil nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 639 175) (om-make-point 21 20) 2 "2" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 480 176) (om-make-point 17 20) 0 "0" nil) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0) (om-load-inputfun 'input-funbox "max" "HIGH" 0)) (om-make-point 518 208) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 610 414) (om-make-point 18 22) 3 "3" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 918 431) (om-make-point 18 22) 5 "5" nil) (om-load-boxcomment "comment" (om-make-point 423 63) '"Criteria of reducibility" "" (om-make-point 335 11) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 266 82) '"Any sequence of period a prime number p and taking values in Z/pZ is reducible" "" (om-make-point 117 116) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 262 58) '"Any sequence of period p^n and taking values in Z/pZ is reducible" "" (om-make-point 569 92) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 878 324) (om-make-point 23 20) 25 "25" nil) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 1009 534) nil nil nil nil 1) (om-load-boxcall 'genfun "REPEAT-N" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 0)) (om-make-point 846 354) nil nil nil nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 947 192) (om-make-point 21 20) 4 "4" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 788 193) (om-make-point 17 20) 0 "0" nil) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0) (om-load-inputfun 'input-funbox "max" "HIGH" 0)) (om-make-point 823 221) nil nil nil nil 1) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 146 531) nil nil nil nil 1) (om-load-boxcall 'genfun "REPEAT-N" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 0)) (om-make-point 208 411) nil nil nil nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 309 245) (om-make-point 21 20) 19 "19" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 149 241) (om-make-point 17 20) 1 "1" nil) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0) (om-load-inputfun 'input-funbox "max" "HIGH" 0)) (om-make-point 184 280) nil nil nil nil 1)) '((16 0 0 0 nil 0) (10 0 0 1 nil 0) (5 0 1 0 nil 0) (9 0 1 1 nil 0) (21 0 2 0 nil 0) (22 0 2 1 nil 0) (1 0 4 0 nil 0) (8 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (0 0 15 0 nil 0) (19 0 16 0 nil 0) (14 0 16 1 nil 0) (18 0 19 0 nil 0) (17 0 19 1 nil 0) (2 0 20 0 nil 0) (24 0 21 0 nil 0) (22 0 21 1 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 638 311)) (setf (pict-size newpict) (om-make-point 429 364)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 31 308)) (setf (pict-size newpict) (om-make-point 429 364)) newpict)) 5.0))
