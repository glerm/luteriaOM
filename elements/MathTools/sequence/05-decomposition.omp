; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 29 74) (om-make-point 50 50) (om-make-point 1168 869) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "05-decomposition" '((om-load-boxcall 'genfun "SUITE-REDUCTIBLE1" 'suite-reductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12)) (om-make-point 55 271) nil nil nil nil 1) (om-load-boxcall 'genfun "SUITE-REPRODUCTIBLE1" 'suite-reproductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12)) (om-make-point 374 277) nil nil nil nil 1) (om-load-boxcall 'genfun "SUITE-REPRODUCTIBLE1" 'suite-reproductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 917 269) nil nil nil nil 1) (om-load-boxcall 'genfun "SUITE-DECOMPOSITION1" 'suite-decomposition '((om-load-inputfun 'input-funbox "no documentation" "SUITE" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 850 133) nil nil nil nil 1) (om-load-boxcall 'genfun "SUITE-DECOMPOSITION1" 'suite-decomposition '((om-load-inputfun 'input-funbox "no documentation" "SUITE" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 84 141) nil nil nil nil 1) (om-load-boxcall 'lispfun "LENGTH1" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 918 382) nil nil nil nil 1) (om-load-boxcall 'bastype "aux8" 't 'nil (om-make-point 1004 235) (om-make-point 20 22) 10 "10" nil) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 997 117) (om-make-point 19 22) 10 "10" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 885 82) (om-make-point 140 25) (list 2 5 3 7 5 5 6 8 9) "(2 5 3 7 5 5 6 8 9)" nil) (om-load-boxcomment "comment1" (om-make-point 53 29) '"Rep" "" (om-make-point 525 667) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment1" (om-make-point 53 29) '"Red" "" (om-make-point 527 621) nil (om-make-color 56/255 27/85 56/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "MULTI-SEQ1" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 245 377) (om-make-point 210 385) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6000) (6200) (6200) (6600) (7000) (7000) (6600) (6200) (6200) (6000) (6400)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6800) (6200) (6000) (6400) (6400) (6000) (6800) (6800) (6000) (7000) (6400) (6000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6600) (7000) (6400) (6000) (6800) (6800) (6000) (6400) (7000) (6600) (6800) (6800)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6600) (6800) (6800) (6000) (6400) (6400) (6600) (6800) (6200) (6000) (7000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (6200) (6000) (6400) (6400) (6000) (6200) (6200) (6600) (7000) (7000) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (7000) (6400) (6000) (6800) (6200) (6000) (6400) (6400) (6000) (6800) (6800)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000) (6600) (6800) (6800) (6600) (7000) (6400) (6000) (6800) (6800) (6000) (6400)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6800) (6200) (6000) (7000) (6400) (6600) (6800) (6800) (6000) (6400) (6400) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6600) (7000) (7000) (6600) (6200) (6200) (6000) (6400) (6400) (6000) (6200) (6200)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6000) (6800) (6800) (6000) (7000) (6400) (6000) (6800) (6200) (6000) (6400)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6800) (6800) (6000) (6400) (7000) (6600) (6800) (6800) (6600) (7000) (6400) (6000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6400) (6400) (6600) (6800) (6200) (6000) (7000) (6400) (6600) (6800) (6800)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6000) (6200) (6200) (6600) (7000) (7000) (6600) (6200) (6200) (6000) (6400)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 0 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 1 0) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 2 0) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 3 0) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 4 0) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 5 0) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 6 0) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 7 0) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 8 0) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 6 9 0) (om-make-color 0 0 0)) (list (list 6 10) (om-make-color 0 0 0)) (list (list 6 10 0) (om-make-color 0 0 0)) (list (list 6 11) (om-make-color 0 0 0)) (list (list 6 11 0) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 0 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 1 0) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 2 0) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 3 0) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 4 0) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 5 0) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 6 0) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 7 0) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 8 0) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 7 9 0) (om-make-color 0 0 0)) (list (list 7 10) (om-make-color 0 0 0)) (list (list 7 10 0) (om-make-color 0 0 0)) (list (list 7 11) (om-make-color 0 0 0)) (list (list 7 11 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 0 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 1 0) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 2 0) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 3 0) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 4 0) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 5 0) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 6 0) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 7 0) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 8 0) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 8 9 0) (om-make-color 0 0 0)) (list (list 8 10) (om-make-color 0 0 0)) (list (list 8 10 0) (om-make-color 0 0 0)) (list (list 8 11) (om-make-color 0 0 0)) (list (list 8 11 0) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 0 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 1 0) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 2 0) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 3 0) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 4 0) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 5 0) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 6 0) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 7 0) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 8 0) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 9 9 0) (om-make-color 0 0 0)) (list (list 9 10) (om-make-color 0 0 0)) (list (list 9 10 0) (om-make-color 0 0 0)) (list (list 9 11) (om-make-color 0 0 0)) (list (list 9 11 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 0 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 1 0) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 2 0) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 3 0) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 4 0) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 5 0) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 6 0) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 7 0) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 8 0) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)) (list (list 10 9 0) (om-make-color 0 0 0)) (list (list 10 10) (om-make-color 0 0 0)) (list (list 10 10 0) (om-make-color 0 0 0)) (list (list 10 11) (om-make-color 0 0 0)) (list (list 10 11 0) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 0 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 1 0) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 2 0) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 3 0) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 4 0) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 5 0) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 6 0) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 7 0) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 11 8 0) (om-make-color 0 0 0)) (list (list 11 9) (om-make-color 0 0 0)) (list (list 11 9 0) (om-make-color 0 0 0)) (list (list 11 10) (om-make-color 0 0 0)) (list (list 11 10 0) (om-make-color 0 0 0)) (list (list 11 11) (om-make-color 0 0 0)) (list (list 11 11 0) (om-make-color 0 0 0)) (list (list 12) (om-make-color 0 0 0)) (list (list 12 0) (om-make-color 0 0 0)) (list (list 12 0 0) (om-make-color 0 0 0)) (list (list 12 1) (om-make-color 0 0 0)) (list (list 12 1 0) (om-make-color 0 0 0)) (list (list 12 2) (om-make-color 0 0 0)) (list (list 12 2 0) (om-make-color 0 0 0)) (list (list 12 3) (om-make-color 0 0 0)) (list (list 12 3 0) (om-make-color 0 0 0)) (list (list 12 4) (om-make-color 0 0 0)) (list (list 12 4 0) (om-make-color 0 0 0)) (list (list 12 5) (om-make-color 0 0 0)) (list (list 12 5 0) (om-make-color 0 0 0)) (list (list 12 6) (om-make-color 0 0 0)) (list (list 12 6 0) (om-make-color 0 0 0)) (list (list 12 7) (om-make-color 0 0 0)) (list (list 12 7 0) (om-make-color 0 0 0)) (list (list 12 8) (om-make-color 0 0 0)) (list (list 12 8 0) (om-make-color 0 0 0)) (list (list 12 9) (om-make-color 0 0 0)) (list (list 12 9 0) (om-make-color 0 0 0)) (list (list 12 10) (om-make-color 0 0 0)) (list (list 12 10 0) (om-make-color 0 0 0)) (list (list 12 11) (om-make-color 0 0 0)) (list (list 12 11 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 2 0 2621450 18350450 0 1000 nil 1 1 1 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1 1 1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g) 10 2 't))) t nil nil) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 285 293) nil nil nil (list (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 249 155) (om-make-point 130 65) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 197 230) nil nil nil nil 3) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 6000)) (om-make-point 217 117) nil nil nil nil 1) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 100)) (om-make-point 137 203) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 121 121) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 125 47) "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 380 312) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 80 301) nil nil nil 0)) '((2 0 0 1 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0)) 1 nil nil) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 141 277) nil nil nil (list (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 249 155) (om-make-point 130 65) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 197 230) nil nil nil nil 3) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 6000)) (om-make-point 217 117) nil nil nil nil 1) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 100)) (om-make-point 137 203) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 121 121) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 125 47) "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 380 312) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 80 301) nil nil nil 0)) '((2 0 0 1 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0)) 1 nil nil) (om-load-editor-box1 "MULTI-SEQ1" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 9 378) (om-make-point 224 385) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6100) (6400) (7000) (6700) (6100) (6400) (7000) (6700) (6100) (6400) (7000) (6700)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6300) (6600) (6900) (6600) (6300) (6600) (6900) (6600) (6300) (6600) (6900) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6300) (6300) (6900) (6900) (6300) (6300) (6900) (6900) (6300) (6300) (6900) (6900)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6600) (6000) (6600) (6000) (6600) (6000) (6600) (6000) (6600) (6000) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems) (list 2 0 2621450 18350450 0 1000 nil 1 1 1 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list 'g 'g 'g 'g 'g 'g) 24 2 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 524 39) '"4   0    2    2   6  10   10  6   2   2    0   4" "" (om-make-point 593 663) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 511 40) '"1   4   10   7   1   4   10   7   1   4   10   7" "" (om-make-point 595 617) nil (om-make-color 56/255 27/85 56/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 524 38) '"5   4     0   9   7   2   8   1   3   6   10   11" "" (om-make-point 595 571) nil (om-make-color 133/255 14/85 53/255) (om-make-font "Geneva" 24 :family nil :style 'nil :mode nil)) (om-load-boxcall 'lispfun "CAR" 'car '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 846 268) nil nil nil nil 1) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 608 307) (om-make-point 39 20) 6000 "6000" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 679 277) (om-make-point 20 20) 100 "100" nil) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 752 327) nil nil nil nil 1) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 651 355) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE1" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 1 2 3 4 5 6 7 8 9 10 11))) (om-make-point 637 90) (om-make-point 180 126) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 5 4 0 9 7 2 8 1 3 6 10 11)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 582 451) (om-make-point 531 109) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6500) (6400) (6000) (6900) (6700) (6200) (6800) (6100) (6300) (6600) (7000) (7100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 224 33) '"reproducible component" "" (om-make-point 235 208) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 204 30) '"reducible component" "" (om-make-point 4 210) nil (om-make-color 56/255 27/85 56/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 495 334) nil nil nil nil 1) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 11 337) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 207 32) '"(all-interval series)" "" (om-make-point 21 51) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 677 56) '"Decomposition of a periodic sequence" "" (om-make-point 181 0) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 78 24) '"palindromic!" "" (om-make-point 243 257) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 243 238) (om-make-point 202 26) (list 4 0 2 2 6 10 10 6 2 2 0 4) "(4 0 2 2 6 10 10 6 2 2 0 4)" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 13 242) (om-make-point 178 21) (list 1 4 10 7 1 4 10 7 1 4 10 7) "(1 4 10 7 1 4 10 7 1 4 10 7)" nil) (om-load-boxcomment "comment" (om-make-point 87 20) '"Suite Lyrique" "" (om-make-point 235 81) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 177 125) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 22 84) (om-make-point 201 21) (list 5 4 0 9 7 2 8 1 3 6 10 11) "(5 4 0 9 7 2 8 1 3 6 10 11)" nil)) '((33 0 0 0 nil 0) (32 0 1 0 nil 0) (8 0 2 0 nil 0) (6 0 2 1 nil 0) (8 0 3 0 nil 0) (7 0 3 1 nil 0) (36 0 4 0 nil 0) (35 0 4 1 nil 0) (2 0 5 0 nil 0) (12 0 11 1 nil 0) (1 0 12 0 nil 0) (0 0 13 0 nil 0) (13 0 14 1 nil 0) (23 2 18 0 nil 0) (20 0 21 0 nil 0) (18 0 21 1 nil 0) (19 0 22 0 nil 0) (21 0 22 1 nil 0) (36 0 23 2 nil 0) (22 0 24 1 nil 0) (1 0 27 0 nil 0) (0 0 28 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 4 97)) (setf (pict-size newpict) (om-make-point 595 558)) newpict)) 5.0))
