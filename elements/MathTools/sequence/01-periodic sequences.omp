; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 8 18) (om-make-point 50 50) (om-make-point 1089 733) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "01-periodic sequences" '((om-load-boxcall 'genfun "DIFF-IN-LIST1" 'diff-in-list '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12)) (om-make-point 131 318) nil nil nil nil 1) (om-load-boxcall 'genfun "DIFF-IN-LIST1" 'diff-in-list '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12)) (om-make-point 175 378) nil nil nil nil 1) (om-load-boxcall 'genfun "DIFF-IN-LIST1" 'diff-in-list '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12)) (om-make-point 228 438) nil nil nil nil 1) (om-load-boxcall 'genfun "DIFF-IN-LIST1" 'diff-in-list '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12)) (om-make-point 110 249) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 540 55) '"taking values in a cyclic group" "" (om-make-point 279 44) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 384 391) (om-make-point 33 21) 100 "100" nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 351 391) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 221 345) (om-make-point 238 20) (list 0 2 4 5 7 9 11 0 2 4 5 7 9 11 0 2 4 5 7 9 11) "(0 2 4 5 7 9 11 0 2 4 5 7 9 11 0 2 4 5 7 9 11)" nil) (om-load-boxcall 'patch-box "differences" '("elements" "tools" "differences") '((om-load-inputfun 'input-funbox "no documentation" "list" nil) (om-load-inputfun 'input-funbox "no documentation" "mod" 12) (om-load-inputfun 'input-funbox "no documentation" "k" 5)) (om-make-point 319 421) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 77 22) '"Period = ??" "" (om-make-point 121 459) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 977 218) (om-make-point 11 20) 6 "6" nil) (om-load-boxcall 'genfun "REPEAT-N1" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 0)) (om-make-point 853 322) nil nil nil nil 1) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 887 143) (om-make-point 17 20) 11 "11" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 806 143) (om-make-point 11 20) 0 "0" nil) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0) (om-load-inputfun 'input-funbox "max" "HIGH" 11)) (om-make-point 823 192) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 153 114) (om-make-point 122 20) (list 0 2 4 5 7 9 11) "(0 2 4 5 7 9 11)" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 954 389) (om-make-point 17 20) 12 "12" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 1015 397) (om-make-point 25 20) 100 "100" nil) (om-load-boxcall 'patch-box "differences" '("elements" "tools" "differences") '((om-load-inputfun 'input-funbox "no documentation" "list" nil) (om-load-inputfun 'input-funbox "no documentation" "mod" 12) (om-load-inputfun 'input-funbox "no documentation" "k" 5)) (om-make-point 913 477) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 16 73) '".$.$." "" (om-make-point 216 493) nil (om-make-color 194/255 58/255 106/255) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 16 73) '".$.$." "" (om-make-point 109 493) nil (om-make-color 194/255 58/255 106/255) (om-make-font "Geneva" 14 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 77 22) '"Period = 7" "" (om-make-point 86 403) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 413 209) (om-make-point 11 20) 6 "6" nil) (om-load-editor-box1 "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 240) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) (om-make-point 552 509) (om-make-point 227 104) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(9/4 (((12 16) (2 2 1 2 2 2 1)) ((12 16) (2 2 1 2 2 2 1)) ((12 16) (2 2 1 2 2 2 1)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 500) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 250) :lchan (list 10) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 73 20) '"Period = 7" "" (om-make-point 54 341) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 76 27) '"Period = 7" "" (om-make-point 36 272) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 76 27) '"Period = 7" "" (om-make-point 63 109) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "REPEAT-N" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 4)) (om-make-point 361 225) nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) (om-make-point 319 266) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 842 51) '"Finite difference calculus on periodic sequences" "" (om-make-point 128 4) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "C2RHYTHM" 'c2rhythm '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "signature" "SIGNATURE" (list 12 16)) (om-load-inputfun 'input-funbox "times" "TIMES" 3)) (om-make-point 592 416) nil nil nil nil 1) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 410 515) (om-make-point 133 96) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6200 6400 6500 6700 6900 7100) :lvel (list 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 1 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'genfun "C2CHORD" 'c2chord '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "index" "INDEX" 0) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 495 416) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 529 153) (om-make-point 154 133) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 0 2 4 5 7 9 11)) :from-file t)) nil nil (corrige (pairlis '(winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) 't))) t nil nil)) '((3 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 2 0 nil 0) (28 0 3 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (5 0 8 2 nil 0) (14 0 11 0 nil 0) (10 0 11 1 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (11 0 18 0 nil 0) (16 0 18 1 nil 0) (17 0 18 2 nil 0) (30 0 23 0 nil 0) (15 0 27 0 nil 0) (22 0 27 1 nil 0) (27 0 28 0 nil 0) (33 0 30 0 nil 0) (32 0 31 0 nil 0) (33 0 32 0 nil 0) (15 0 33 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 443 97)) (setf (pict-size newpict) (om-make-point 475 284)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 18 490)) (setf (pict-size newpict) (om-make-point 1075 212)) newpict)) 5.0))
