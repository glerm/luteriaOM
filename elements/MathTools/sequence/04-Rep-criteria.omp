; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 282 16) (om-make-point 50 50) (om-make-point 1103 710) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "04-Rep-criteria" '((om-load-boxcall 'genfun "SUITE-REPRODUCTIBLE1" 'suite-reproductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 7)) (om-make-point 339 265) nil nil nil nil 1) (om-load-boxcall 'genfun "PERMUT-RANDOM" 'permut-random '((om-load-inputfun 'input-funbox "the list" "LIST" nil)) (om-make-point 757 171) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 703 131) (om-make-point 163 24) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10)" nil) (om-load-boxcall 'lispfun "SUITE-REPRODUCTIBLE" 'suite-reproductible '((om-load-inputfun 'input-funbox "LIST" "LIST" nil) (om-load-inputfun 'input-funbox "N" "N" 11)) (om-make-point 727 245) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 24) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 710 325) (om-make-point 185 96) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 24 :puntos (list (list 4 7 10 6 8 2 9 3 5 1) (list 3 3 7 2 5 7 5 2 7 3) (list 0 4 6 3 2 9 8 5 7 0) (list 4 2 8 10 7 10 8 2 4 0) (list 9 6 2 8 3 9 5 2 7 4) (list 8 7 6 6 6 7 8 5 8 5) (list 10 10 0 0 1 1 8 3 8 3) (list 0 1 0 1 0 7 6 5 6 7) (list 1 10 1 10 7 10 10 1 1 4) (list 9 2 9 8 3 0 2 0 3 8) (list 4 7 10 6 8 2 9 3 5 1)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcall 'genfun "C2CHORD-SEQ" 'c2chord-seq '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 793 462) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 683 538) (om-make-point 275 105) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6250 6150 6050 6400 6450 6500 6100 6300 6350 6200) (6450 6450 6350 6050 6050 6150 6200 6050 6400 6050) (6000 6450 6250 6000 6100 6050 6400 6350 6200 6400) (6450 6350 6300 6100 6500 6350 6500 6400 6200 6150) (6450 6500 6350 6400 6400 6150 6450 6350 6500 6300) (6050 6400 6050 6000 6300 6300 6450 6150 6350 6150) (6350 6200 6500 6300 6000 6150 6250 6200 6350 6450) (6400 6300 6350 6250 6150 6100 6500 6150 6100 6450) (6450 6050 6450 6450 6500 6400 6200 6500 6350 6500) (6150 6400 6000 6050 6450 6350 6300 6400 6150 6500) (6250 6150 6050 6400 6450 6500 6100 6300 6350 6200)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000) :ldur '((1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel '((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100)) :loffset '((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)) :lchan '((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 4 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 910 403) (om-make-point 23 20) 50 "50" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 451 461) (om-make-point 23 20) 100 "100" nil) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 84 555) (om-make-point 456 97) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6500 6400 6200 6600 6300 6100) (6600 6500 6400 6400 6500 6400) (6600 6600 6000 6100 6600 6200) (6000 6100 6100 6500 6300 6400) (6100 6000 6400 6500 6100 6300) (6600 6400 6100 6300 6200 6500) (6500 6400 6200 6600 6300 6100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000) :ldur '((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000)) :lvel '((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100)) :loffset '((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)) :lchan '((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 4 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcall 'genfun "C2CHORD-SEQ" 'c2chord-seq '((om-load-inputfun 'input-funbox "the cercle" "SELF" nil) (om-load-inputfun 'input-funbox "initial value" "BASE" 6000) (om-load-inputfun 'input-funbox "approx" "APPROX" 100)) (om-make-point 357 488) nil nil nil nil 1) (om-load-editor-box1 "N-CERCLE" 'n-cercle '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "N" 12) (om-load-inputfun 'input-funbox "no documentation" "PUNTOS" (list 0 5 7))) (om-make-point 274 351) (om-make-point 185 96) (if (find-class 'n-cercle nil) (make-instance 'n-cercle :n 12 :puntos (list (list 2 1 4 5 6 3) (list 6 3 1 1 4 6) (list 4 5 0 3 2 0) (list 1 2 3 6 5 4) (list 1 1 3 6 6 4) (list 0 2 3 0 5 4) (list 2 1 4 5 6 3)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxcomment "comment" (om-make-point 498 59) '"Criteria of reproducibility" "" (om-make-point 421 6) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcomment "comment" (om-make-point 908 42) '"Any sequence of p-1 different elements (p is a prime number) taking values in Z/pZ is reproducible" "" (om-make-point 211 59) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 18 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 269 144) (om-make-point 166 26) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil) (om-load-boxcall 'genfun "PERMUT-RANDOM" 'permut-random '((om-load-inputfun 'input-funbox "the list" "LIST" nil)) (om-make-point 336 179) nil nil nil nil 1)) '((15 0 0 0 nil 0) (2 0 1 0 nil 0) (1 0 3 0 nil 0) (3 0 4 2 nil 0) (4 0 5 0 nil 0) (7 0 5 2 nil 0) (5 0 6 0 nil 0) (10 0 9 0 nil 0) (11 0 10 0 nil 0) (8 0 10 2 nil 0) (0 0 11 2 nil 0) (14 0 15 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 659 313)) (setf (pict-size newpict) (om-make-point 572 368)) newpict) (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 37 319)) (setf (pict-size newpict) (om-make-point 572 368)) newpict)) 5.0))
