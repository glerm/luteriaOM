; OM File Header - Saved 2014/04/26 5:39:37
; (6.04 :patc (om-make-point 133 17) (om-make-point 50 50) (om-make-point 960 734) "non documentation" 183 0 nil "2014/04/26 5:39:37")
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "02-red-et-rep" '((om-load-boxcall 'genfun "SUITE-REPRODUCTIBLE1" 'suite-reproductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 657 134) nil nil nil nil 1) (om-load-boxcall 'genfun "SUITE-REDUCTIBLE1" 'suite-reductible '((om-load-inputfun 'input-funbox "no documentation" "LIST" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 112 152) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 520 76) (om-make-point 216 20) (list 3 1 2 1 10 8 8 1 3 3 6 2) "(3 1 2 1 10 8 8 1 3 3 6 2)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 29 75) (om-make-point 244 20) (list 10 2 3 1 2 6 7 5 6 10 11 9) "(10 2 3 1 2 6 7 5 6 10 11 9)" nil) (om-load-boxcomment "comment1" (om-make-point 25 21) '"6" "" (om-make-point 29 246) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-boxcall 'lispfun "LENGTH1" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 54 235) nil nil nil nil 1) (om-load-boxcomment "comment2" (om-make-point 430 56) '"Reproducible sequence" "" (om-make-point 493 8) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 825 91) (om-make-point 23 20) 12 "12" nil) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 568 212) nil nil nil "length" 1) (om-load-boxwithed1 'box-with-win "OMLOOP1" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 688 210) nil nil "x" (list (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 249 155) (om-make-point 130 65) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 197 230) nil nil nil nil 3) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 6000)) (om-make-point 217 117) nil nil nil nil 1) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 100)) (om-make-point 137 203) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 121 121) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 125 47) "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 380 312) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 80 301) nil nil nil 0)) '((2 0 0 1 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0)) 1 nil nil) (om-load-boxcomment "comment1" (om-make-point 25 21) '"25" "" (om-make-point 542 222) nil (om-make-color 0 0 0) (om-make-font "Geneva" 12 :family nil :style 'nil :mode nil)) (om-load-editor-box1 "MULTI-SEQ11" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 561 280) (om-make-point 327 469) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6300) (6100) (6200) (6100) (7000) (6800) (6800) (6100) (6300) (6300) (6600) (6200)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000) (6100) (7100) (6900) (7000) (6000) (6500) (6200) (6000) (6300) (6800) (6100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6300) (7000) (7000) (6100) (6200) (6500) (6900) (7000) (6300) (6500) (6500) (6900)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6700) (6000) (6300) (6100) (6300) (6400) (6100) (6500) (6200) (6000) (6400) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6500) (6300) (7000) (6200) (6100) (6900) (6400) (6900) (7000) (6400) (6200) (6100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000) (6700) (6400) (7100) (6800) (6700) (6500) (6100) (6600) (7000) (7100) (6400)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6900) (6900) (6700) (6900) (7100) (7000) (6800) (6500) (6400) (6100) (6500) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (7000) (6200) (6200) (7100) (7000) (6900) (7100) (6900) (6400) (6100) (6300)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000) (6400) (6000) (6900) (7100) (7100) (6200) (7000) (6700) (6900) (6200) (6900)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6600) (6800) (6900) (6200) (6000) (6300) (6800) (6900) (6200) (6500) (6700) (6100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (6100) (6500) (7000) (6300) (6500) (6100) (6500) (6300) (6200) (6600) (6500)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7100) (6400) (6500) (6500) (6200) (6800) (6400) (7000) (7100) (6400) (7100) (6900)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6500) (6100) (6000) (6900) (6600) (6800) (6600) (6100) (6500) (6700) (7000) (6200)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6800) (7100) (6900) (6900) (6200) (7000) (6700) (6400) (6200) (6300) (6400) (6300)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6300) (7000) (6000) (6500) (6800) (6900) (6900) (7000) (6100) (6100) (7100) (6500)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6700) (6200) (6500) (6300) (6100) (6000) (6100) (6300) (6000) (7000) (6600) (7000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6700) (6300) (7000) (7000) (7100) (6100) (6200) (6900) (7000) (6800) (6400) (6900)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6800) (6700) (6000) (6100) (6200) (6100) (6700) (6100) (7000) (6800) (6500) (7000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7100) (6500) (6100) (6100) (7100) (6600) (6600) (6900) (7000) (6900) (6500) (7000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6600) (6800) (6000) (7000) (6700) (6000) (6300) (6100) (7100) (6800) (6500) (6100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (6400) (7000) (6900) (6500) (6300) (7000) (7000) (6900) (6900) (6800) (6500)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6200) (6600) (7100) (6800) (7000) (6700) (6000) (7100) (6000) (7100) (6900) (6900)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6500) (6900) (6200) (6900) (6500) (7100) (6100) (7100) (7000) (6000) (6500)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6100) (6400) (6500) (6700) (6800) (6600) (6200) (7000) (7100) (6200) (6500) (7100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6300) (6100) (6200) (6100) (7000) (6800) (6800) (6100) (6300) (6300) (6600) (6200)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)) (list (list 6) (om-make-color 0 0 0)) (list (list 6 0) (om-make-color 0 0 0)) (list (list 6 0 0) (om-make-color 0 0 0)) (list (list 6 1) (om-make-color 0 0 0)) (list (list 6 1 0) (om-make-color 0 0 0)) (list (list 6 2) (om-make-color 0 0 0)) (list (list 6 2 0) (om-make-color 0 0 0)) (list (list 6 3) (om-make-color 0 0 0)) (list (list 6 3 0) (om-make-color 0 0 0)) (list (list 6 4) (om-make-color 0 0 0)) (list (list 6 4 0) (om-make-color 0 0 0)) (list (list 6 5) (om-make-color 0 0 0)) (list (list 6 5 0) (om-make-color 0 0 0)) (list (list 6 6) (om-make-color 0 0 0)) (list (list 6 6 0) (om-make-color 0 0 0)) (list (list 6 7) (om-make-color 0 0 0)) (list (list 6 7 0) (om-make-color 0 0 0)) (list (list 6 8) (om-make-color 0 0 0)) (list (list 6 8 0) (om-make-color 0 0 0)) (list (list 6 9) (om-make-color 0 0 0)) (list (list 6 9 0) (om-make-color 0 0 0)) (list (list 6 10) (om-make-color 0 0 0)) (list (list 6 10 0) (om-make-color 0 0 0)) (list (list 6 11) (om-make-color 0 0 0)) (list (list 6 11 0) (om-make-color 0 0 0)) (list (list 7) (om-make-color 0 0 0)) (list (list 7 0) (om-make-color 0 0 0)) (list (list 7 0 0) (om-make-color 0 0 0)) (list (list 7 1) (om-make-color 0 0 0)) (list (list 7 1 0) (om-make-color 0 0 0)) (list (list 7 2) (om-make-color 0 0 0)) (list (list 7 2 0) (om-make-color 0 0 0)) (list (list 7 3) (om-make-color 0 0 0)) (list (list 7 3 0) (om-make-color 0 0 0)) (list (list 7 4) (om-make-color 0 0 0)) (list (list 7 4 0) (om-make-color 0 0 0)) (list (list 7 5) (om-make-color 0 0 0)) (list (list 7 5 0) (om-make-color 0 0 0)) (list (list 7 6) (om-make-color 0 0 0)) (list (list 7 6 0) (om-make-color 0 0 0)) (list (list 7 7) (om-make-color 0 0 0)) (list (list 7 7 0) (om-make-color 0 0 0)) (list (list 7 8) (om-make-color 0 0 0)) (list (list 7 8 0) (om-make-color 0 0 0)) (list (list 7 9) (om-make-color 0 0 0)) (list (list 7 9 0) (om-make-color 0 0 0)) (list (list 7 10) (om-make-color 0 0 0)) (list (list 7 10 0) (om-make-color 0 0 0)) (list (list 7 11) (om-make-color 0 0 0)) (list (list 7 11 0) (om-make-color 0 0 0)) (list (list 8) (om-make-color 0 0 0)) (list (list 8 0) (om-make-color 0 0 0)) (list (list 8 0 0) (om-make-color 0 0 0)) (list (list 8 1) (om-make-color 0 0 0)) (list (list 8 1 0) (om-make-color 0 0 0)) (list (list 8 2) (om-make-color 0 0 0)) (list (list 8 2 0) (om-make-color 0 0 0)) (list (list 8 3) (om-make-color 0 0 0)) (list (list 8 3 0) (om-make-color 0 0 0)) (list (list 8 4) (om-make-color 0 0 0)) (list (list 8 4 0) (om-make-color 0 0 0)) (list (list 8 5) (om-make-color 0 0 0)) (list (list 8 5 0) (om-make-color 0 0 0)) (list (list 8 6) (om-make-color 0 0 0)) (list (list 8 6 0) (om-make-color 0 0 0)) (list (list 8 7) (om-make-color 0 0 0)) (list (list 8 7 0) (om-make-color 0 0 0)) (list (list 8 8) (om-make-color 0 0 0)) (list (list 8 8 0) (om-make-color 0 0 0)) (list (list 8 9) (om-make-color 0 0 0)) (list (list 8 9 0) (om-make-color 0 0 0)) (list (list 8 10) (om-make-color 0 0 0)) (list (list 8 10 0) (om-make-color 0 0 0)) (list (list 8 11) (om-make-color 0 0 0)) (list (list 8 11 0) (om-make-color 0 0 0)) (list (list 9) (om-make-color 0 0 0)) (list (list 9 0) (om-make-color 0 0 0)) (list (list 9 0 0) (om-make-color 0 0 0)) (list (list 9 1) (om-make-color 0 0 0)) (list (list 9 1 0) (om-make-color 0 0 0)) (list (list 9 2) (om-make-color 0 0 0)) (list (list 9 2 0) (om-make-color 0 0 0)) (list (list 9 3) (om-make-color 0 0 0)) (list (list 9 3 0) (om-make-color 0 0 0)) (list (list 9 4) (om-make-color 0 0 0)) (list (list 9 4 0) (om-make-color 0 0 0)) (list (list 9 5) (om-make-color 0 0 0)) (list (list 9 5 0) (om-make-color 0 0 0)) (list (list 9 6) (om-make-color 0 0 0)) (list (list 9 6 0) (om-make-color 0 0 0)) (list (list 9 7) (om-make-color 0 0 0)) (list (list 9 7 0) (om-make-color 0 0 0)) (list (list 9 8) (om-make-color 0 0 0)) (list (list 9 8 0) (om-make-color 0 0 0)) (list (list 9 9) (om-make-color 0 0 0)) (list (list 9 9 0) (om-make-color 0 0 0)) (list (list 9 10) (om-make-color 0 0 0)) (list (list 9 10 0) (om-make-color 0 0 0)) (list (list 9 11) (om-make-color 0 0 0)) (list (list 9 11 0) (om-make-color 0 0 0)) (list (list 10) (om-make-color 0 0 0)) (list (list 10 0) (om-make-color 0 0 0)) (list (list 10 0 0) (om-make-color 0 0 0)) (list (list 10 1) (om-make-color 0 0 0)) (list (list 10 1 0) (om-make-color 0 0 0)) (list (list 10 2) (om-make-color 0 0 0)) (list (list 10 2 0) (om-make-color 0 0 0)) (list (list 10 3) (om-make-color 0 0 0)) (list (list 10 3 0) (om-make-color 0 0 0)) (list (list 10 4) (om-make-color 0 0 0)) (list (list 10 4 0) (om-make-color 0 0 0)) (list (list 10 5) (om-make-color 0 0 0)) (list (list 10 5 0) (om-make-color 0 0 0)) (list (list 10 6) (om-make-color 0 0 0)) (list (list 10 6 0) (om-make-color 0 0 0)) (list (list 10 7) (om-make-color 0 0 0)) (list (list 10 7 0) (om-make-color 0 0 0)) (list (list 10 8) (om-make-color 0 0 0)) (list (list 10 8 0) (om-make-color 0 0 0)) (list (list 10 9) (om-make-color 0 0 0)) (list (list 10 9 0) (om-make-color 0 0 0)) (list (list 10 10) (om-make-color 0 0 0)) (list (list 10 10 0) (om-make-color 0 0 0)) (list (list 10 11) (om-make-color 0 0 0)) (list (list 10 11 0) (om-make-color 0 0 0)) (list (list 11) (om-make-color 0 0 0)) (list (list 11 0) (om-make-color 0 0 0)) (list (list 11 0 0) (om-make-color 0 0 0)) (list (list 11 1) (om-make-color 0 0 0)) (list (list 11 1 0) (om-make-color 0 0 0)) (list (list 11 2) (om-make-color 0 0 0)) (list (list 11 2 0) (om-make-color 0 0 0)) (list (list 11 3) (om-make-color 0 0 0)) (list (list 11 3 0) (om-make-color 0 0 0)) (list (list 11 4) (om-make-color 0 0 0)) (list (list 11 4 0) (om-make-color 0 0 0)) (list (list 11 5) (om-make-color 0 0 0)) (list (list 11 5 0) (om-make-color 0 0 0)) (list (list 11 6) (om-make-color 0 0 0)) (list (list 11 6 0) (om-make-color 0 0 0)) (list (list 11 7) (om-make-color 0 0 0)) (list (list 11 7 0) (om-make-color 0 0 0)) (list (list 11 8) (om-make-color 0 0 0)) (list (list 11 8 0) (om-make-color 0 0 0)) (list (list 11 9) (om-make-color 0 0 0)) (list (list 11 9 0) (om-make-color 0 0 0)) (list (list 11 10) (om-make-color 0 0 0)) (list (list 11 10 0) (om-make-color 0 0 0)) (list (list 11 11) (om-make-color 0 0 0)) (list (list 11 11 0) (om-make-color 0 0 0)) (list (list 12) (om-make-color 0 0 0)) (list (list 12 0) (om-make-color 0 0 0)) (list (list 12 0 0) (om-make-color 0 0 0)) (list (list 12 1) (om-make-color 0 0 0)) (list (list 12 1 0) (om-make-color 0 0 0)) (list (list 12 2) (om-make-color 0 0 0)) (list (list 12 2 0) (om-make-color 0 0 0)) (list (list 12 3) (om-make-color 0 0 0)) (list (list 12 3 0) (om-make-color 0 0 0)) (list (list 12 4) (om-make-color 0 0 0)) (list (list 12 4 0) (om-make-color 0 0 0)) (list (list 12 5) (om-make-color 0 0 0)) (list (list 12 5 0) (om-make-color 0 0 0)) (list (list 12 6) (om-make-color 0 0 0)) (list (list 12 6 0) (om-make-color 0 0 0)) (list (list 12 7) (om-make-color 0 0 0)) (list (list 12 7 0) (om-make-color 0 0 0)) (list (list 12 8) (om-make-color 0 0 0)) (list (list 12 8 0) (om-make-color 0 0 0)) (list (list 12 9) (om-make-color 0 0 0)) (list (list 12 9 0) (om-make-color 0 0 0)) (list (list 12 10) (om-make-color 0 0 0)) (list (list 12 10 0) (om-make-color 0 0 0)) (list (list 12 11) (om-make-color 0 0 0)) (list (list 12 11 0) (om-make-color 0 0 0)) (list (list 13) (om-make-color 0 0 0)) (list (list 13 0) (om-make-color 0 0 0)) (list (list 13 0 0) (om-make-color 0 0 0)) (list (list 13 1) (om-make-color 0 0 0)) (list (list 13 1 0) (om-make-color 0 0 0)) (list (list 13 2) (om-make-color 0 0 0)) (list (list 13 2 0) (om-make-color 0 0 0)) (list (list 13 3) (om-make-color 0 0 0)) (list (list 13 3 0) (om-make-color 0 0 0)) (list (list 13 4) (om-make-color 0 0 0)) (list (list 13 4 0) (om-make-color 0 0 0)) (list (list 13 5) (om-make-color 0 0 0)) (list (list 13 5 0) (om-make-color 0 0 0)) (list (list 13 6) (om-make-color 0 0 0)) (list (list 13 6 0) (om-make-color 0 0 0)) (list (list 13 7) (om-make-color 0 0 0)) (list (list 13 7 0) (om-make-color 0 0 0)) (list (list 13 8) (om-make-color 0 0 0)) (list (list 13 8 0) (om-make-color 0 0 0)) (list (list 13 9) (om-make-color 0 0 0)) (list (list 13 9 0) (om-make-color 0 0 0)) (list (list 13 10) (om-make-color 0 0 0)) (list (list 13 10 0) (om-make-color 0 0 0)) (list (list 13 11) (om-make-color 0 0 0)) (list (list 13 11 0) (om-make-color 0 0 0)) (list (list 14) (om-make-color 0 0 0)) (list (list 14 0) (om-make-color 0 0 0)) (list (list 14 0 0) (om-make-color 0 0 0)) (list (list 14 1) (om-make-color 0 0 0)) (list (list 14 1 0) (om-make-color 0 0 0)) (list (list 14 2) (om-make-color 0 0 0)) (list (list 14 2 0) (om-make-color 0 0 0)) (list (list 14 3) (om-make-color 0 0 0)) (list (list 14 3 0) (om-make-color 0 0 0)) (list (list 14 4) (om-make-color 0 0 0)) (list (list 14 4 0) (om-make-color 0 0 0)) (list (list 14 5) (om-make-color 0 0 0)) (list (list 14 5 0) (om-make-color 0 0 0)) (list (list 14 6) (om-make-color 0 0 0)) (list (list 14 6 0) (om-make-color 0 0 0)) (list (list 14 7) (om-make-color 0 0 0)) (list (list 14 7 0) (om-make-color 0 0 0)) (list (list 14 8) (om-make-color 0 0 0)) (list (list 14 8 0) (om-make-color 0 0 0)) (list (list 14 9) (om-make-color 0 0 0)) (list (list 14 9 0) (om-make-color 0 0 0)) (list (list 14 10) (om-make-color 0 0 0)) (list (list 14 10 0) (om-make-color 0 0 0)) (list (list 14 11) (om-make-color 0 0 0)) (list (list 14 11 0) (om-make-color 0 0 0)) (list (list 15) (om-make-color 0 0 0)) (list (list 15 0) (om-make-color 0 0 0)) (list (list 15 0 0) (om-make-color 0 0 0)) (list (list 15 1) (om-make-color 0 0 0)) (list (list 15 1 0) (om-make-color 0 0 0)) (list (list 15 2) (om-make-color 0 0 0)) (list (list 15 2 0) (om-make-color 0 0 0)) (list (list 15 3) (om-make-color 0 0 0)) (list (list 15 3 0) (om-make-color 0 0 0)) (list (list 15 4) (om-make-color 0 0 0)) (list (list 15 4 0) (om-make-color 0 0 0)) (list (list 15 5) (om-make-color 0 0 0)) (list (list 15 5 0) (om-make-color 0 0 0)) (list (list 15 6) (om-make-color 0 0 0)) (list (list 15 6 0) (om-make-color 0 0 0)) (list (list 15 7) (om-make-color 0 0 0)) (list (list 15 7 0) (om-make-color 0 0 0)) (list (list 15 8) (om-make-color 0 0 0)) (list (list 15 8 0) (om-make-color 0 0 0)) (list (list 15 9) (om-make-color 0 0 0)) (list (list 15 9 0) (om-make-color 0 0 0)) (list (list 15 10) (om-make-color 0 0 0)) (list (list 15 10 0) (om-make-color 0 0 0)) (list (list 15 11) (om-make-color 0 0 0)) (list (list 15 11 0) (om-make-color 0 0 0)) (list (list 16) (om-make-color 0 0 0)) (list (list 16 0) (om-make-color 0 0 0)) (list (list 16 0 0) (om-make-color 0 0 0)) (list (list 16 1) (om-make-color 0 0 0)) (list (list 16 1 0) (om-make-color 0 0 0)) (list (list 16 2) (om-make-color 0 0 0)) (list (list 16 2 0) (om-make-color 0 0 0)) (list (list 16 3) (om-make-color 0 0 0)) (list (list 16 3 0) (om-make-color 0 0 0)) (list (list 16 4) (om-make-color 0 0 0)) (list (list 16 4 0) (om-make-color 0 0 0)) (list (list 16 5) (om-make-color 0 0 0)) (list (list 16 5 0) (om-make-color 0 0 0)) (list (list 16 6) (om-make-color 0 0 0)) (list (list 16 6 0) (om-make-color 0 0 0)) (list (list 16 7) (om-make-color 0 0 0)) (list (list 16 7 0) (om-make-color 0 0 0)) (list (list 16 8) (om-make-color 0 0 0)) (list (list 16 8 0) (om-make-color 0 0 0)) (list (list 16 9) (om-make-color 0 0 0)) (list (list 16 9 0) (om-make-color 0 0 0)) (list (list 16 10) (om-make-color 0 0 0)) (list (list 16 10 0) (om-make-color 0 0 0)) (list (list 16 11) (om-make-color 0 0 0)) (list (list 16 11 0) (om-make-color 0 0 0)) (list (list 17) (om-make-color 0 0 0)) (list (list 17 0) (om-make-color 0 0 0)) (list (list 17 0 0) (om-make-color 0 0 0)) (list (list 17 1) (om-make-color 0 0 0)) (list (list 17 1 0) (om-make-color 0 0 0)) (list (list 17 2) (om-make-color 0 0 0)) (list (list 17 2 0) (om-make-color 0 0 0)) (list (list 17 3) (om-make-color 0 0 0)) (list (list 17 3 0) (om-make-color 0 0 0)) (list (list 17 4) (om-make-color 0 0 0)) (list (list 17 4 0) (om-make-color 0 0 0)) (list (list 17 5) (om-make-color 0 0 0)) (list (list 17 5 0) (om-make-color 0 0 0)) (list (list 17 6) (om-make-color 0 0 0)) (list (list 17 6 0) (om-make-color 0 0 0)) (list (list 17 7) (om-make-color 0 0 0)) (list (list 17 7 0) (om-make-color 0 0 0)) (list (list 17 8) (om-make-color 0 0 0)) (list (list 17 8 0) (om-make-color 0 0 0)) (list (list 17 9) (om-make-color 0 0 0)) (list (list 17 9 0) (om-make-color 0 0 0)) (list (list 17 10) (om-make-color 0 0 0)) (list (list 17 10 0) (om-make-color 0 0 0)) (list (list 17 11) (om-make-color 0 0 0)) (list (list 17 11 0) (om-make-color 0 0 0)) (list (list 18) (om-make-color 0 0 0)) (list (list 18 0) (om-make-color 0 0 0)) (list (list 18 0 0) (om-make-color 0 0 0)) (list (list 18 1) (om-make-color 0 0 0)) (list (list 18 1 0) (om-make-color 0 0 0)) (list (list 18 2) (om-make-color 0 0 0)) (list (list 18 2 0) (om-make-color 0 0 0)) (list (list 18 3) (om-make-color 0 0 0)) (list (list 18 3 0) (om-make-color 0 0 0)) (list (list 18 4) (om-make-color 0 0 0)) (list (list 18 4 0) (om-make-color 0 0 0)) (list (list 18 5) (om-make-color 0 0 0)) (list (list 18 5 0) (om-make-color 0 0 0)) (list (list 18 6) (om-make-color 0 0 0)) (list (list 18 6 0) (om-make-color 0 0 0)) (list (list 18 7) (om-make-color 0 0 0)) (list (list 18 7 0) (om-make-color 0 0 0)) (list (list 18 8) (om-make-color 0 0 0)) (list (list 18 8 0) (om-make-color 0 0 0)) (list (list 18 9) (om-make-color 0 0 0)) (list (list 18 9 0) (om-make-color 0 0 0)) (list (list 18 10) (om-make-color 0 0 0)) (list (list 18 10 0) (om-make-color 0 0 0)) (list (list 18 11) (om-make-color 0 0 0)) (list (list 18 11 0) (om-make-color 0 0 0)) (list (list 19) (om-make-color 0 0 0)) (list (list 19 0) (om-make-color 0 0 0)) (list (list 19 0 0) (om-make-color 0 0 0)) (list (list 19 1) (om-make-color 0 0 0)) (list (list 19 1 0) (om-make-color 0 0 0)) (list (list 19 2) (om-make-color 0 0 0)) (list (list 19 2 0) (om-make-color 0 0 0)) (list (list 19 3) (om-make-color 0 0 0)) (list (list 19 3 0) (om-make-color 0 0 0)) (list (list 19 4) (om-make-color 0 0 0)) (list (list 19 4 0) (om-make-color 0 0 0)) (list (list 19 5) (om-make-color 0 0 0)) (list (list 19 5 0) (om-make-color 0 0 0)) (list (list 19 6) (om-make-color 0 0 0)) (list (list 19 6 0) (om-make-color 0 0 0)) (list (list 19 7) (om-make-color 0 0 0)) (list (list 19 7 0) (om-make-color 0 0 0)) (list (list 19 8) (om-make-color 0 0 0)) (list (list 19 8 0) (om-make-color 0 0 0)) (list (list 19 9) (om-make-color 0 0 0)) (list (list 19 9 0) (om-make-color 0 0 0)) (list (list 19 10) (om-make-color 0 0 0)) (list (list 19 10 0) (om-make-color 0 0 0)) (list (list 19 11) (om-make-color 0 0 0)) (list (list 19 11 0) (om-make-color 0 0 0)) (list (list 20) (om-make-color 0 0 0)) (list (list 20 0) (om-make-color 0 0 0)) (list (list 20 0 0) (om-make-color 0 0 0)) (list (list 20 1) (om-make-color 0 0 0)) (list (list 20 1 0) (om-make-color 0 0 0)) (list (list 20 2) (om-make-color 0 0 0)) (list (list 20 2 0) (om-make-color 0 0 0)) (list (list 20 3) (om-make-color 0 0 0)) (list (list 20 3 0) (om-make-color 0 0 0)) (list (list 20 4) (om-make-color 0 0 0)) (list (list 20 4 0) (om-make-color 0 0 0)) (list (list 20 5) (om-make-color 0 0 0)) (list (list 20 5 0) (om-make-color 0 0 0)) (list (list 20 6) (om-make-color 0 0 0)) (list (list 20 6 0) (om-make-color 0 0 0)) (list (list 20 7) (om-make-color 0 0 0)) (list (list 20 7 0) (om-make-color 0 0 0)) (list (list 20 8) (om-make-color 0 0 0)) (list (list 20 8 0) (om-make-color 0 0 0)) (list (list 20 9) (om-make-color 0 0 0)) (list (list 20 9 0) (om-make-color 0 0 0)) (list (list 20 10) (om-make-color 0 0 0)) (list (list 20 10 0) (om-make-color 0 0 0)) (list (list 20 11) (om-make-color 0 0 0)) (list (list 20 11 0) (om-make-color 0 0 0)) (list (list 21) (om-make-color 0 0 0)) (list (list 21 0) (om-make-color 0 0 0)) (list (list 21 0 0) (om-make-color 0 0 0)) (list (list 21 1) (om-make-color 0 0 0)) (list (list 21 1 0) (om-make-color 0 0 0)) (list (list 21 2) (om-make-color 0 0 0)) (list (list 21 2 0) (om-make-color 0 0 0)) (list (list 21 3) (om-make-color 0 0 0)) (list (list 21 3 0) (om-make-color 0 0 0)) (list (list 21 4) (om-make-color 0 0 0)) (list (list 21 4 0) (om-make-color 0 0 0)) (list (list 21 5) (om-make-color 0 0 0)) (list (list 21 5 0) (om-make-color 0 0 0)) (list (list 21 6) (om-make-color 0 0 0)) (list (list 21 6 0) (om-make-color 0 0 0)) (list (list 21 7) (om-make-color 0 0 0)) (list (list 21 7 0) (om-make-color 0 0 0)) (list (list 21 8) (om-make-color 0 0 0)) (list (list 21 8 0) (om-make-color 0 0 0)) (list (list 21 9) (om-make-color 0 0 0)) (list (list 21 9 0) (om-make-color 0 0 0)) (list (list 21 10) (om-make-color 0 0 0)) (list (list 21 10 0) (om-make-color 0 0 0)) (list (list 21 11) (om-make-color 0 0 0)) (list (list 21 11 0) (om-make-color 0 0 0)) (list (list 22) (om-make-color 0 0 0)) (list (list 22 0) (om-make-color 0 0 0)) (list (list 22 0 0) (om-make-color 0 0 0)) (list (list 22 1) (om-make-color 0 0 0)) (list (list 22 1 0) (om-make-color 0 0 0)) (list (list 22 2) (om-make-color 0 0 0)) (list (list 22 2 0) (om-make-color 0 0 0)) (list (list 22 3) (om-make-color 0 0 0)) (list (list 22 3 0) (om-make-color 0 0 0)) (list (list 22 4) (om-make-color 0 0 0)) (list (list 22 4 0) (om-make-color 0 0 0)) (list (list 22 5) (om-make-color 0 0 0)) (list (list 22 5 0) (om-make-color 0 0 0)) (list (list 22 6) (om-make-color 0 0 0)) (list (list 22 6 0) (om-make-color 0 0 0)) (list (list 22 7) (om-make-color 0 0 0)) (list (list 22 7 0) (om-make-color 0 0 0)) (list (list 22 8) (om-make-color 0 0 0)) (list (list 22 8 0) (om-make-color 0 0 0)) (list (list 22 9) (om-make-color 0 0 0)) (list (list 22 9 0) (om-make-color 0 0 0)) (list (list 22 10) (om-make-color 0 0 0)) (list (list 22 10 0) (om-make-color 0 0 0)) (list (list 22 11) (om-make-color 0 0 0)) (list (list 22 11 0) (om-make-color 0 0 0)) (list (list 23) (om-make-color 0 0 0)) (list (list 23 0) (om-make-color 0 0 0)) (list (list 23 0 0) (om-make-color 0 0 0)) (list (list 23 1) (om-make-color 0 0 0)) (list (list 23 1 0) (om-make-color 0 0 0)) (list (list 23 2) (om-make-color 0 0 0)) (list (list 23 2 0) (om-make-color 0 0 0)) (list (list 23 3) (om-make-color 0 0 0)) (list (list 23 3 0) (om-make-color 0 0 0)) (list (list 23 4) (om-make-color 0 0 0)) (list (list 23 4 0) (om-make-color 0 0 0)) (list (list 23 5) (om-make-color 0 0 0)) (list (list 23 5 0) (om-make-color 0 0 0)) (list (list 23 6) (om-make-color 0 0 0)) (list (list 23 6 0) (om-make-color 0 0 0)) (list (list 23 7) (om-make-color 0 0 0)) (list (list 23 7 0) (om-make-color 0 0 0)) (list (list 23 8) (om-make-color 0 0 0)) (list (list 23 8 0) (om-make-color 0 0 0)) (list (list 23 9) (om-make-color 0 0 0)) (list (list 23 9 0) (om-make-color 0 0 0)) (list (list 23 10) (om-make-color 0 0 0)) (list (list 23 10 0) (om-make-color 0 0 0)) (list (list 23 11) (om-make-color 0 0 0)) (list (list 23 11 0) (om-make-color 0 0 0)) (list (list 24) (om-make-color 0 0 0)) (list (list 24 0) (om-make-color 0 0 0)) (list (list 24 0 0) (om-make-color 0 0 0)) (list (list 24 1) (om-make-color 0 0 0)) (list (list 24 1 0) (om-make-color 0 0 0)) (list (list 24 2) (om-make-color 0 0 0)) (list (list 24 2 0) (om-make-color 0 0 0)) (list (list 24 3) (om-make-color 0 0 0)) (list (list 24 3 0) (om-make-color 0 0 0)) (list (list 24 4) (om-make-color 0 0 0)) (list (list 24 4 0) (om-make-color 0 0 0)) (list (list 24 5) (om-make-color 0 0 0)) (list (list 24 5 0) (om-make-color 0 0 0)) (list (list 24 6) (om-make-color 0 0 0)) (list (list 24 6 0) (om-make-color 0 0 0)) (list (list 24 7) (om-make-color 0 0 0)) (list (list 24 7 0) (om-make-color 0 0 0)) (list (list 24 8) (om-make-color 0 0 0)) (list (list 24 8 0) (om-make-color 0 0 0)) (list (list 24 9) (om-make-color 0 0 0)) (list (list 24 9 0) (om-make-color 0 0 0)) (list (list 24 10) (om-make-color 0 0 0)) (list (list 24 10 0) (om-make-color 0 0 0)) (list (list 24 11) (om-make-color 0 0 0)) (list (list 24 11 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)) ((0) (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 2 25 (list 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 46/25 nil 1000 0 18350450 2621450 0 2))) t nil nil) (om-load-editor-box1 "MULTI-SEQ1" 'multi-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-make-point 13 331) (om-make-point 410 374) (if (find-class 'multi-seq nil) (let ((newobj (make-instance 'multi-seq :chord-seqs (list (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((7000) (6200) (6300) (6100) (6200) (6600) (6700) (6500) (6600) (7000) (7100) (6900)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6400) (6100) (7000) (6100) (6400) (6100) (7000) (6100) (6400) (6100) (7000) (6100)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6900) (6900) (6300) (6300) (6900) (6900) (6300) (6300) (6900) (6900) (6300) (6300)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6600) (6000) (6600) (6000) (6600) (6000) (6600) (6000) (6600) (6000) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj '(((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 0 2) (om-make-color 0 0 0)) (list (list 0 2 0) (om-make-color 0 0 0)) (list (list 0 3) (om-make-color 0 0 0)) (list (list 0 3 0) (om-make-color 0 0 0)) (list (list 0 4) (om-make-color 0 0 0)) (list (list 0 4 0) (om-make-color 0 0 0)) (list (list 0 5) (om-make-color 0 0 0)) (list (list 0 5 0) (om-make-color 0 0 0)) (list (list 0 6) (om-make-color 0 0 0)) (list (list 0 6 0) (om-make-color 0 0 0)) (list (list 0 7) (om-make-color 0 0 0)) (list (list 0 7 0) (om-make-color 0 0 0)) (list (list 0 8) (om-make-color 0 0 0)) (list (list 0 8 0) (om-make-color 0 0 0)) (list (list 0 9) (om-make-color 0 0 0)) (list (list 0 9 0) (om-make-color 0 0 0)) (list (list 0 10) (om-make-color 0 0 0)) (list (list 0 10 0) (om-make-color 0 0 0)) (list (list 0 11) (om-make-color 0 0 0)) (list (list 0 11 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 1) (om-make-color 0 0 0)) (list (list 1 1 0) (om-make-color 0 0 0)) (list (list 1 2) (om-make-color 0 0 0)) (list (list 1 2 0) (om-make-color 0 0 0)) (list (list 1 3) (om-make-color 0 0 0)) (list (list 1 3 0) (om-make-color 0 0 0)) (list (list 1 4) (om-make-color 0 0 0)) (list (list 1 4 0) (om-make-color 0 0 0)) (list (list 1 5) (om-make-color 0 0 0)) (list (list 1 5 0) (om-make-color 0 0 0)) (list (list 1 6) (om-make-color 0 0 0)) (list (list 1 6 0) (om-make-color 0 0 0)) (list (list 1 7) (om-make-color 0 0 0)) (list (list 1 7 0) (om-make-color 0 0 0)) (list (list 1 8) (om-make-color 0 0 0)) (list (list 1 8 0) (om-make-color 0 0 0)) (list (list 1 9) (om-make-color 0 0 0)) (list (list 1 9 0) (om-make-color 0 0 0)) (list (list 1 10) (om-make-color 0 0 0)) (list (list 1 10 0) (om-make-color 0 0 0)) (list (list 1 11) (om-make-color 0 0 0)) (list (list 1 11 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)) (list (list 2 1) (om-make-color 0 0 0)) (list (list 2 1 0) (om-make-color 0 0 0)) (list (list 2 2) (om-make-color 0 0 0)) (list (list 2 2 0) (om-make-color 0 0 0)) (list (list 2 3) (om-make-color 0 0 0)) (list (list 2 3 0) (om-make-color 0 0 0)) (list (list 2 4) (om-make-color 0 0 0)) (list (list 2 4 0) (om-make-color 0 0 0)) (list (list 2 5) (om-make-color 0 0 0)) (list (list 2 5 0) (om-make-color 0 0 0)) (list (list 2 6) (om-make-color 0 0 0)) (list (list 2 6 0) (om-make-color 0 0 0)) (list (list 2 7) (om-make-color 0 0 0)) (list (list 2 7 0) (om-make-color 0 0 0)) (list (list 2 8) (om-make-color 0 0 0)) (list (list 2 8 0) (om-make-color 0 0 0)) (list (list 2 9) (om-make-color 0 0 0)) (list (list 2 9 0) (om-make-color 0 0 0)) (list (list 2 10) (om-make-color 0 0 0)) (list (list 2 10 0) (om-make-color 0 0 0)) (list (list 2 11) (om-make-color 0 0 0)) (list (list 2 11 0) (om-make-color 0 0 0)) (list (list 3) (om-make-color 0 0 0)) (list (list 3 0) (om-make-color 0 0 0)) (list (list 3 0 0) (om-make-color 0 0 0)) (list (list 3 1) (om-make-color 0 0 0)) (list (list 3 1 0) (om-make-color 0 0 0)) (list (list 3 2) (om-make-color 0 0 0)) (list (list 3 2 0) (om-make-color 0 0 0)) (list (list 3 3) (om-make-color 0 0 0)) (list (list 3 3 0) (om-make-color 0 0 0)) (list (list 3 4) (om-make-color 0 0 0)) (list (list 3 4 0) (om-make-color 0 0 0)) (list (list 3 5) (om-make-color 0 0 0)) (list (list 3 5 0) (om-make-color 0 0 0)) (list (list 3 6) (om-make-color 0 0 0)) (list (list 3 6 0) (om-make-color 0 0 0)) (list (list 3 7) (om-make-color 0 0 0)) (list (list 3 7 0) (om-make-color 0 0 0)) (list (list 3 8) (om-make-color 0 0 0)) (list (list 3 8 0) (om-make-color 0 0 0)) (list (list 3 9) (om-make-color 0 0 0)) (list (list 3 9 0) (om-make-color 0 0 0)) (list (list 3 10) (om-make-color 0 0 0)) (list (list 3 10 0) (om-make-color 0 0 0)) (list (list 3 11) (om-make-color 0 0 0)) (list (list 3 11 0) (om-make-color 0 0 0)) (list (list 4) (om-make-color 0 0 0)) (list (list 4 0) (om-make-color 0 0 0)) (list (list 4 0 0) (om-make-color 0 0 0)) (list (list 4 1) (om-make-color 0 0 0)) (list (list 4 1 0) (om-make-color 0 0 0)) (list (list 4 2) (om-make-color 0 0 0)) (list (list 4 2 0) (om-make-color 0 0 0)) (list (list 4 3) (om-make-color 0 0 0)) (list (list 4 3 0) (om-make-color 0 0 0)) (list (list 4 4) (om-make-color 0 0 0)) (list (list 4 4 0) (om-make-color 0 0 0)) (list (list 4 5) (om-make-color 0 0 0)) (list (list 4 5 0) (om-make-color 0 0 0)) (list (list 4 6) (om-make-color 0 0 0)) (list (list 4 6 0) (om-make-color 0 0 0)) (list (list 4 7) (om-make-color 0 0 0)) (list (list 4 7 0) (om-make-color 0 0 0)) (list (list 4 8) (om-make-color 0 0 0)) (list (list 4 8 0) (om-make-color 0 0 0)) (list (list 4 9) (om-make-color 0 0 0)) (list (list 4 9 0) (om-make-color 0 0 0)) (list (list 4 10) (om-make-color 0 0 0)) (list (list 4 10 0) (om-make-color 0 0 0)) (list (list 4 11) (om-make-color 0 0 0)) (list (list 4 11 0) (om-make-color 0 0 0)) (list (list 5) (om-make-color 0 0 0)) (list (list 5 0) (om-make-color 0 0 0)) (list (list 5 0 0) (om-make-color 0 0 0)) (list (list 5 1) (om-make-color 0 0 0)) (list (list 5 1 0) (om-make-color 0 0 0)) (list (list 5 2) (om-make-color 0 0 0)) (list (list 5 2 0) (om-make-color 0 0 0)) (list (list 5 3) (om-make-color 0 0 0)) (list (list 5 3 0) (om-make-color 0 0 0)) (list (list 5 4) (om-make-color 0 0 0)) (list (list 5 4 0) (om-make-color 0 0 0)) (list (list 5 5) (om-make-color 0 0 0)) (list (list 5 5 0) (om-make-color 0 0 0)) (list (list 5 6) (om-make-color 0 0 0)) (list (list 5 6 0) (om-make-color 0 0 0)) (list (list 5 7) (om-make-color 0 0 0)) (list (list 5 7 0) (om-make-color 0 0 0)) (list (list 5 8) (om-make-color 0 0 0)) (list (list 5 8 0) (om-make-color 0 0 0)) (list (list 5 9) (om-make-color 0 0 0)) (list (list 5 9 0) (om-make-color 0 0 0)) (list (list 5 10) (om-make-color 0 0 0)) (list (list 5 10 0) (om-make-color 0 0 0)) (list (list 5 11) (om-make-color 0 0 0)) (list (list 5 11 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)) ((0) (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode) (list 't 2 24 (list 'g 'g 'g 'g 'g 'g) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1 1 1 1 1 1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 1 1 1 nil 1000 0 18350450 2621450 0 2))) t nil nil) (om-load-boxcomment "comment" (om-make-point 387 60) '"Reducible sequence" "" (om-make-point 82 6) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 36 :family nil :style 'nil :mode nil)) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 146 247) nil nil nil (list (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 249 155) (om-make-point 130 65) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000)) :lonset '(0 1000) :ldur '((1000)) :lvel '((100)) :loffset '((0)) :lchan '((1)) :legato 0)))) (load-port-info newobj '((0))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 197 230) nil nil nil nil 3) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 6000)) (om-make-point 217 117) nil nil nil nil 1) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 100)) (om-make-point 137 203) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 121 121) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 125 47) "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 380 312) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 80 301) nil nil nil 0)) '((2 0 0 1 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0)) 1 nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 156 116) (om-make-point 23 20) 12 "12" nil)) '((2 0 0 0 nil 0) (7 0 0 1 nil 0) (3 0 1 0 nil 0) (15 0 1 1 nil 0) (1 0 5 0 nil 0) (0 0 8 0 nil 0) (0 0 9 0 nil 0) (9 0 11 1 nil 0) (14 0 12 1 nil 0) (1 0 14 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name '|USER-ciel|))) (setf (thepict newpict) (om-get-picture '|USER-ciel|)) (setf (name newpict) '|USER-ciel|) (setf (pict-pos newpict) (om-make-point 4 274)) (setf (pict-size newpict) (om-make-point 1032 499)) newpict)) 5.0))
